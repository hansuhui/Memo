https://tutorial.djangogirls.org/ko/django_models/#django-모델

[Django 모델]

이번에는 블로그 내 모든 포스트를 저장하는 부분을 만들 거에요. 
먼저 우리는 객체(object)에 대해서 조금 알고 있어야 해요.

[객체(Objecgt)]

프로그래밍 개발 방법 중에는 객체 지향 프로그래밍 이라 부르는 개념이 있어요. 이 개발 방법은 프로그램이 
어떻게 작동해야하는지 모든 것을 하나하나 지시하는 것 대신, 모델을 만들어 그 모델이 어떤 역할을 가지고 
어덯게 행동해야하는지 정의하여 서로 알아서 상호작용할 수 있도록 만드는 것입니다.

그본적으로 객체지향설계 개념은 현실에 존재하는 것을 속성과 행위로 나타내는 것입니다. 여기서 속성은 객체
속성(properties), 행위는 메소드(methods)로 구현됩니다.


[장고 모델]

객체(Object)가 어떻게 구성되어야 하는지 이전에 살펴봤으니, 이번에는
블러그 글을 위한 장고 모델을 만들어봅시다.

장고 안에 모델은 객체의 특별한 종류입니다. 이 모델을 저장하면 그 내용이 
데이터베이스에 저장되는 것이 특별한 점이죠. 데이터베이스란 데이터의 집합니다.
데이터들이 모아져 있는 곳이지요.  우리는 데이터를 저장하기 위해서 여러가지 데이터베이스를 입맛에 맞게 
고를 수 있는데요. 여기서는 SQLite 데이터베이스를 사용하겠습니다.

'Sqlite' 데이터베이스는 기본 장고 데이터베이스 어댑터입니다. 라는 것만까지만 알고 있어도 충분해요.
어댑터가 무엇인지를 알려면 내용이 너무 길어지니 일단 여기까지만 알고 계세요.

쉽게 말해 데이터베이스안에 모델이란 엑셀 스프레드시트와 같다고 말할 수 있어요. 엑셀 스프레드시트를
보명 열(필드)와 행(데이터)로 구성되어 있죠? 모델도 마찬가지입니다.


[어플리케이션 제작하기]

잘 정돈된 상태에서 시작하기 위해, 프로젝트 내부에 별도의 어플리케이션을 만들어볼 거에요.
처음부터 모든 것이 잘 분비되어있다면 훌륭하죠. 어플리케이션을 만들기 위해 콘솔창에서 아래 
명령어를 실행하세요.

(myvenv) ~/djangogirls$ python manage.py startapp blog

이제 blog 디렉토리가 생성되고 그 안에 여러 파일들고 같이 들어잇는 것을 알 수 있어요.
현재 디렉토리와 파일들은 다음과 같을 거예요.

djangogirls
├── mysite
|       __init__.py
|       settings.py
|       urls.py
|       wsgi.py
├── manage.py
└── blog
    ├── migrations
    |       __init__.py
    ├── __init__.py
    ├── admin.py
    ├── models.py
    ├── tests.py
    └── views.py

어플리케이션을 생성한 후 장고에게 사용해야한다고 알려줘야 합니다.
이 역할을 하는 파일이 mysite/settings.py 입니다. 이 파일 안에서 ISTALLED_APPS 을 열어 
바로 위에 blog 를 추가하세요. 최종 결과물은 다음과 같을 거에요.


   INSTALLED_APPS = (
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'blog',
    )



[블로그 글 모델 만들기]

모든  Model 객체는 blog/models.py 파일에 선언하여 모델을 만듭니다. 
이 파일에 우리의 블로그 글 모델도 정의할 거에요.

blog/models.py 파일을 열어서 안에 모든 내용을 삭제한후 아래 코드를 추가하세요.

 from django.db import models
    from django.utils import timezone


    class Post(models.Model):
        author = models.ForeignKey('auth.User')
        title = models.CharField(max_length=200)
        text = models.TextField()
        created_date = models.DateTimeField(
                default=timezone.now)
        published_date = models.DateTimeField(
                blank=True, null=True)

        def publish(self):
            self.published_date = timezone.now()
            self.save()

        def __str__(self):
            return self.title

str 양 옆에 언더스코어를(__) 두 개씩 넣었는지 다시 확인하세요. 이런 관습은 파이썬에서 자주 사용되는데,
"던더(dunder;더블-언더스코어의 준말" 라고도 불려요.
 
으음... 코드가 좀 무서워졌죠? 각 줄마다 어떤 의미인지 설명해드릴거에요.

from 또는 import로 시작하는 부분은 다른 파일에 있는 것을 추가하라는 뜻입니다. 다시 말해, 매번 다른
파일에 잇는 것을 복사&붙여넣기로 해야하는 작업을 'from</0>'이 대신 불러와주는 거죠

class Post(models.Model):는 모델을 정의하는 코드입니다.
(모델은객체(object)라고 했죠)

- class는 특별한 키워드로, 객체를 정의한다는 것을 알려줍니다.

- post는 모델의 이름입니다. (특수문자와 공백 제외한다면) 다른 이름을 붙일 수도 있습니다.
  항상 클래스 이름의 첫 글자는 대문자로 써야 합니다.

- model.Model은 Post가 장고 모델임을 의미합니다. 이 코드 때문에 장고는 Post가 데이터베이스에
  저장되어야 된다고 알게 됩니다.

이제 속성을 정의하는 것에 대해서 이야기 해볼게요.

title, text, created_date, published_date, author에 대해서 말할 거에요. 속성을 정의하기 위해,
각 필드마다 어던 종류의 데이터 타입을 가지는지를 정해야해요.
여기서 데이터 타입에는 텍스트, 숫자 , 날짜, 유저 같은 다른 객체 참조 등이 있습니다.

- models.CharFiled : 글자 수가 제한된 테스트를 정의할 떄 사용합니다.
  글 제목같이 대부분의 잛은 문자열 정보를 저장할 때 사용합니다.

- models.TextFiled : 글자 수에 제한이 없는 긴 텍스트를 위한 속성입니다. 

- models.ForeignKey : 다른 모델에 대한 링크를 의미합니다.


시간 관계 상 모든 코드들을 하나하나 다 설명하지는 않을 거에요. 대신 모델의 필드와 정의하는 방법이
궁금하다면 아래 장고 공식 문서를 꼭 읽어보길 바랍니다.

(https://docs.djangoproject.com/en/1.8/ref/models/fields/#field-types)

def publish(self): 는 무슨 뜻일까요? 이 것이 바로 앞서 말했던 publish 라는 메소드(method)입니다.
def는 이것이 함수/멧도라는 뜻이고, publish는 메소드의 이름입니다. 원한다면 메서드 이름을 변경할 수도
있어요. 이름을 붙일 떄는 공백 대신, 소문자와 언더스코어를 사용해야 합니다.
예를들어, 평균 가격을 계산하는 메소드는 calculate_average_price 라고 부를 수 있겠네요.

메소드는 자주 무언가를 되돌려주죠. (return) 그 예로 __str__ 메서드를 봅시다. 
이 시나리오대로라면, __str__를 호출하면 Post 모델의 제목 텍스트(string)를 얻게 될 거예요.

아직 모델에 대해서 잘 모르는 부분이 있다면, 코치에게 자유롭게 물어보세요! 지금 배운 내용이
너무 복잡하게 느껴질 수 있어요. 객체와 함수를 배운 적이 없는 분들이 한꺼번에 배우게 된다면
특히 그렇겠죠. 그래도 해 볼 만한 마법이라고 생각했으면 좋겠어요!


[데이터베이스에 모델을 위한 테이블 만들기]

이 장의 마지막 단계입니다. 이제 데이터베이스에 우리의 새모델,Post 모델을 추가할 거에요. 먼저 우리는
장고 모델에 (우리가 방금 만든!) 몇가지 변화가 생겼다는 걸 알게 해줘야 합니다.
python manage.py makemigrations lobal 를 입력해 보세요. 아마도 화면에 이렇게 보이겟죠?

(myvenv) ~/djangogirls$ python manage.py makemigrations blog
Migrations for 'blog':
  0001_initial.py:
  - Create model Post

장고는 데이터베이스에 지금 반영할 수 읶도록 마이그레이션 파일(migration file)이라는 것을 준비해 두었답니다.
이제 python manage.py migrate blog 명령을 실행해, 실제 데이터베이스에 모델 추가를 반영하겠습니다.

(myvenv) ~/djangogirls$ python manage.py migrate blog
Operations to perform:
  Apply all migrations: blog
Running migrations:
  Rendering model states... DONE
  Applying blog.0001_initial... OK







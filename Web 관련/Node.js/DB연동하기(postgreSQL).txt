명령커멘트 실행를 한뒤 ionic 프로젝트로 이동한다

프로젝트 폴더에서 npm install pg를 설치한다.
프로젝트 폴더에서 npm install transformers 도 설치한다


설치 후에 관리 폴더를 하나 작성해서 database.js 파일을 생성한다.


[database.js]

var pg = require('pg');
 
// create a config to configure both pooling behavior 
// and client options 
// note: all config is optional and the environment variables 
// will be read if the config is not present 
var config = {
  user: 'id', //env var: PGUSER 
  database: 'db명', //env var: PGDATABASE 
  password: 'pw', //env var: PGPASSWORD 
  host: 'host', // Server hosting the postgres database 
  port: 5432, //env var: PGPORT 
  max: 10, // max number of clients in the pool 
  idleTimeoutMillis: 30000, // how long a client is allowed to remain idle before being closed 
};
 
 
//this initializes a connection pool 
//it will keep idle connections open for a 30 seconds 
//and set a limit of maximum 10 idle clients 
var pool = new pg.Pool(config);
 
// to run a query we can acquire a client from the pool, 
// run a query on the client, and then return the client to the pool 
pool.connect(function(err, client, done) {
  if(err) {
    return console.error('error fetching client from pool', err);
  }
  client.query('select * from tb_board', null, function(err, result) {
    //call `done(err)` to release the client back to the pool (or destroy it if there is an error) 
    done(err);
 
    if(err) {
      return console.error('error running query', err);
    }
    console.log(result.rows[0].crea_id);
	 console.log(result.rows[1].idx);
    //output: 1 
  });
});
 
pool.on('error', function (err, client) {
  // if an error is encountered by a client while it sits idle in the pool 
  // the pool itself will emit an error event with both the error and 
  // the client which emitted the original error 
  // this is a rare occurrence but can happen if there is a network partition 
  // between your application and the database, the database restarts, etc. 
  // and so you might want to handle it and at least log it out 
  console.error('idle client error', err.message, err.stack)
})


여기까지의 테스트

cmd창에서 node 폴더명/database.js 실행하면 해당 쿼리 결과값이 나온다.






https://www.npmjs.com/package/pg

node-postgres

Non-blocking PostgreSQL client for node.js Pure JavaScript and optional native libpq bindings.

Install
npm install pg


Intro & Examples


var pg = require('pg');
 
// instantiate a new client 
// the client will read connection information from 
// the same environment variables used by postgres cli tools 
var client = new pg.Client();
 
// connect to our database 
client.connect(function (err) {
  if (err) throw err;
 
  // execute a query on our database 
  client.query('SELECT $1::text as name', ['brianc'], function (err, result) {
    if (err) throw err;
 
    // just print the result to the console 
    console.log(result.rows[0]); // outputs: { name: 'brianc' } 
 
    // disconnect the client 
    client.end(function (err) {
      if (err) throw err;
    });
  });
});
 

[Client pooling]


var pg = require('pg');
 
// create a config to configure both pooling behavior 
// and client options 
// note: all config is optional and the environment variables 
// will be read if the config is not present 
var config = {
  user: 'foo', //env var: PGUSER 
  database: 'my_db', //env var: PGDATABASE 
  password: 'secret', //env var: PGPASSWORD 
  host: 'localhost', // Server hosting the postgres database 
  port: 5432, //env var: PGPORT 
  max: 10, // max number of clients in the pool 
  idleTimeoutMillis: 30000, // how long a client is allowed to remain idle before being closed 
};
 
 
//this initializes a connection pool 
//it will keep idle connections open for a 30 seconds 
//and set a limit of maximum 10 idle clients 
var pool = new pg.Pool(config);
 
// to run a query we can acquire a client from the pool, 
// run a query on the client, and then return the client to the pool 
pool.connect(function(err, client, done) {
  if(err) {
    return console.error('error fetching client from pool', err);
  }
  client.query('SELECT $1::int AS number', ['1'], function(err, result) {
    //call `done(err)` to release the client back to the pool (or destroy it if there is an error) 
    done(err);
 
    if(err) {
      return console.error('error running query', err);
    }
    console.log(result.rows[0].number);
    //output: 1 
  });
});
 
pool.on('error', function (err, client) {
  // if an error is encountered by a client while it sits idle in the pool 
  // the pool itself will emit an error event with both the error and 
  // the client which emitted the original error 
  // this is a rare occurrence but can happen if there is a network partition 
  // between your application and the database, the database restarts, etc. 
  // and so you might want to handle it and at least log it out 
  console.error('idle client error', err.message, err.stack)
})

node-postgres users pg-pool to manage pooling. It bundles it 
and exports it for convenience. If you whan, you can require('pg-pool') and use it directly-it's the
same as the constructor exported at pg.Pool


it's highly recommended you read the documentation for pg-pool.

https://github.com/brianc/node-postgres/wiki/Example

For more information about config.ssl check TLS (SSL) of nodejs

[More Documentation]

- Native Bindings -

To install the native bindings:
npm install pg pg-native

var pg = require('pg').native
var Pool = require('pg').Pool // bad! this is not bound to the native client 
var Client = require('pg').Client // bad! this is the pure JavaScript client 
 
var pg = require('pg').native
var Pool = pg.Pool // good! a pool bound to the native client 
var Client = pg.Client // good! this client uses libpq bindings 










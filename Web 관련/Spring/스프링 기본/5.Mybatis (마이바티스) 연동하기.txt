http://addio3305.tistory.com/62


1. Mybatis 란?

일단 MyBatis 홈페이지에서는 다음과 같이 정의하고 있다.

MyBatis is a first class persistence framework with support for custom SQL, stored procedures and advanced mappings. MyBatis eliminates almost all of the JDBC code and manual setting of parameters and retrieval of results. MyBatis can use simple XML or Annotations for configuration and map primitives, Map interfaces and Java POJOs(Plain Old Java Objects) to database records.

간단하지만 MyBatis에 대한 개념을 알게해주는 설명글이다.

MyBatis는 개발자가 지정한 SQL, 저장프로시저, 그리고 몇가지 고급 매핑을 지원하는 퍼시스턴스
프레임워크이다. MyBatis는 JDBC 코드와 수동으로 셋팅하는 파라미터와 결과 매핑을 제거한다.
MyBatis는 데이터베이스 레코드에 원시타입과 Map 인터페이스 그리고 자바 POJO를 설정하고
매핑하기 위해 XML과 애노테이션을 사용할 수 있다.

기존에 JDBC를 이용하여 프로그래밍을 하는 방식에 비해서 MyBatis는 개발자의 부담을 굉장히
많이 덜어주고, 생산성 향상에도 도움이 된다.

기존에 JDBC를 이용하여 프로그래밍을 하는 방식은 프로그램 소스 안에 SQL문을 작성하는 
방식이었다. 커넥션을 맺고, 셀렉트문 날려서 리절트셋 나오고, 그걸 rs.next()등을 이용하여
하나씩 받아오는....
따라서 SQL의 변경 등이 발생할 경우, 프로그램을 수정하기 떄문에 그 유연성이 좋지 못했는데,
MyBatis에서는 SQL을 xml 파일에 작성하기 때문에 , SQL의 변환이 자유롭고, 가독성이 좋다는
장점이 있다.

이후에 실제로 하나씩 만들어보면서 이게 무슨소리인지 확인하도록 하자

2.MyBatis 라이브러리
스프링에서 MyBatis를 사용하려면 라이브러리가 필요하다.
우리는 이미 Maven을 이용하여 라이브러리를 관리하기 때문에, 라이브러리의 추가가 굉장히 쉽다.
pom.xml에 다음을 추가한다.


<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.2.2</version>
</dependency>
 
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>1.2.0</version>
</dependency>
 
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>${org.springframework-version}</version>
</dependency>
 
<dependency>
    <groupId>commons-dbcp</groupId>
    <artifactId>commons-dbcp</artifactId>
    <version>1.4</version>
</dependency>

여기까지가 공통으로 들어가는 라이브러리고, 사용하는 DB에 따라서 추가할 라이브러리가 약간 다르다

1)MySql을 사용할 경우

<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>5.1.31</version>
</dependency>


2) Oracle의 경우

오라클의 경우, 약간 손이 더 간다.

ojdbc.jar 파일을 검색할 경우, 다음과 같은 dependency가 나오는데, 실제로는 다운 불가하다

<dependency>
        <groupId>ojdbc</groupId>
        <artifactId>ojdbc</artifactId>
        <version>14</version>
</dependency>

따라서 다음의 dependency로 바꿔준다.

<dependency>
    <groupId>com.oracle</groupId>
    <artifactId>ojdbc14</artifactId>
    <version>10.2.0.4.0</version>
</dependency>

이렇게 작성하여도 아직은 에러가 나온다.
따라서 상단의 <properties> 다음에 다음 코드를 추가한다.

<repositories>
    <repository>
        <id>mvn2</id>
        <url>http://repo1.maven.org/maven2/</url>
        <releases>
            <enabled>true</enabled>
        </releases>
        <snapshots>
            <enabled>true</enabled>
        </snapshots>
    </repository>
     
    <repository>
         <id>oracle</id>
         <name>ORACLE JDBC Repository</name>
         <url>http://mesir.googlecode.com/svn/trunk/mavenrepo</url>
    </repository> 
</repositories>

ojdbc를 다운받을 수 있는 Repository를 수동으로 등록한 것이다.

3. MyBatis와 DB(데이터베이스) 연결 설정
마이바티스와 데이터베이스를 연결하는 방법을 살펴보자.

1) src/java/resource 폴더 밑에 config > spring 폴더를 만든다.

2) spring 폴더 안에 context-datasource.xml 파일을 만든다.

3) web.xml에서 위의 설정파일을 읽도록 되어있는지 확인한다.
   web.xml의 하단에 다음의 코드가 있어야한다.

<context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath*:config/spring/context-*.xml</param-value>
</context-param>

이는 최초 서버가 시작될 때, 해당 위치에 있는 context 파일을 모조리 읽어들이는 것을 뜻한다.
xml 태그에서 알수 있듯이 , contextConfigLocation을 설정하고,  그 위치는 위에서 만들었던
config > spring 폴더에 있는 context-로 시작하는 모든 xml 파일을 의미한다.
앞으로 스프링 관련 여러가지 설정파일이 있기 때문에, 위와 같이 설정파일을 읽어올 수 
있도록 하였다.


4) MyBatis 연결 설정을 하자

- MySQL 의 경우 - 

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/jdbc  http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd">
     
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://주소/스키마"/>
        <property name="username" value="아이디"/>
        <property name="password" value="비밀번호"/>
    </bean>
</beans>

별달리 어려운 설정은 없을것이라고 생각한다.
url에서 MySQL이 설치된 서버의 주소와 사용할 DB 스키마를 적어주면 된다.
(개인PC에서 개발할 경우 localhost/스키마 또는 127.0.0.1/스키마 로 적으주면 된다.)


- Oracle의 경우 -


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/jdbc  http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd">
     
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
        <property name="url" value="jdbc:oracle:thin:@localhost:1521:XE"/>
        <property name="username" value="아이디"/>
        <property name="password" value="비밀번호"/>
    </bean>

</beans>

오라클의 경우도 별다를건 없다. MySQL과 다른거는 dataSource의 class와 url이 다르다.
그 점을 자세히 보길 바란다.

(오라클의 경우 보통 Oracle 10g XE 또는 Oracle 11g XE를 깔아서 연습하기 때문에,
그에 맞춰서 소스를 썻다. 실제 오라클 엔터프라이즈의 경우 localhost 대신 IP 주소,
XE 대신 사용하는 DB 스키마를 적어준다.)


5.MyBatis 와 Spring의 연결

1) resource 폴더에 mapper 폴더를 생성한다.

2) resource > config > spring 폴더에 context-mapper.xml 파일을 생성한다.

3) context-mapper.xml 파일에 다음의 내용을 작성한다.


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
 
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath:/mapper/**/*_SQL.xml" />
    </bean>
     
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSession"/>
    </bean>  
</beans>

몇가지 살펴보자.
6번째 줄의 property의 name과 ref가 dataSource로 정의되어있다.
이 두가지는 같은것을 의미하지 않는다. name은 위에서 등록한 sqlSession 빈(been)에서
사용할 이름이 dataSource이고, ref의 dataSource는 우리가 context-datassource.xml에서
정의한 빈(bean)을 참고하는 것을 의미한다.

7번째 줄의 mapperLocations는 앞으로 우리가 작성할 SQL문이 위치할 장소이다.
여기서 classpath:/mapper/**/*_SQL.xml 이라는 정의를 살펴보자.

앞에서 web.xml에서 spring conext 설정파일을 읽어오기 위해서 
classpath*:config/string/context-*.xml 라고 정의했던것을 기억하자.

앞으로 우리는 다양한 SQL 파일을 만들것인데, 그것을 일일이 등록해서 사용할 수는 없다.
(원래는 xml 파일에 XML도 bean으로 설정해야한다.)
그렇지만 다양한 사람들이 작업하는 프로젝트의 특성상, 그것을 일일이 등록할 수 없고,
할 수 있더라도 귀찮은 일이다. 따라서 서버가 시작될 때 자동으로 SQL이 정의되어 있는
XML 파일도 읽어오도록 하는것이 필요하다.

따라서 SQL이 위치할 mapper 폴더를 잡아주고, 그 안에 모든 폴더를 의미하는 ** 를 붙여준 후,
마지막으로 _SQL로 끝나는 모든 xml 파일을 읽어주도록 한다.

여기서 중간에 **를 붙인 이유는 , 유연한 폴더구조의 변경을 위해서 이렇게 작성했다.
우리는 앞으로 게시판에 관련된 쿼리만 작성하겠지만, 실제 프로젝트에서는 굉장히 많은
패키지가 생성되기 때문에 2,3단계로 구분된다. 그것을 유연성있게 대처하도록 해줬다.

마지막으로 10번째 줄의 sqlSessionTemplate은 마이바티스 스프링 연동 모듈의 핵심이다.
SQLSessionTemplete은 SqlSession을 구현하고 , 코드에서 SqlSession을 대체하는 역할을 한다.
실제 코드에서 어떻게 사용하는지를 나중에 보면서 다시 이야기해보자.

6. DAO 작성

마지막으로 실제 소스에서 위에서 선안한 SqlSessionTemplate를 사용할 DAO를 만들어주자.
DAO는 Data Access Object의 약자로, Dta Access Object를 Factorty 패턴화 시키는 것으로,
비즈니스 로직을 모듈화 하는 방법이다. Factory 패턴이 무엇인지 잘 모르면, 디자인 패턴에 대해서
공부하면 좋다. 여기서는 디자인 패턴에 대한 설명은 생략하고 어떻게 사용하는지만 보도록 하겠다.

1) src/main/java 폴더의 common 패키지 밑에 dao 패키지 생성

2) dao 패키지 안에  AbstractDAO.java를 생성한다.

3)  AbstractDAO에 다음 소스를 작성한다.

public class AbstractDAO {
    protected Log log = LogFactory.getLog(AbstractDAO.class);
     
    @Autowired
    private SqlSessionTemplate sqlSession;
     
    protected void printQueryId(String queryId) {
        if(log.isDebugEnabled()){
            log.debug("\t QueryId  \t:  " + queryId);
        }
    }
     
    public Object insert(String queryId, Object params){
        printQueryId(queryId);
        return sqlSession.insert(queryId, params);
    }
     
    public Object update(String queryId, Object params){
        printQueryId(queryId);
        return sqlSession.update(queryId, params);
    }
     
    public Object delete(String queryId, Object params){
        printQueryId(queryId);
        return sqlSession.delete(queryId, params);
    }
     
    public Object selectOne(String queryId){
        printQueryId(queryId);
        return sqlSession.selectOne(queryId);
    }
     
    public Object selectOne(String queryId, Object params){
        printQueryId(queryId);
        return sqlSession.selectOne(queryId, params);
    }
     
    @SuppressWarnings("rawtypes")
    public List selectList(String queryId){
        printQueryId(queryId);
        return sqlSession.selectList(queryId);
    }
     
    @SuppressWarnings("rawtypes")
    public List selectList(String queryId, Object params){
        printQueryId(queryId);
        return sqlSession.selectList(queryId,params);
    }
}


간단히 살펴보자.
우리가 앞에서 SqlSessionTemplate을 설정하였고, 이는 SqlSession을 대체한다고 이야기 했었다.
5번째 줄에 SqlSessionTemplate을 선언하고 여기에 Autowired 어노테이션(Annotation)을 통해서
xml에 서언했던 의존관계를 자동으로 주입하도록 하였다.

쿼리는 sqlSession.메서드를 호출하면 되는데, 여기서는 앞으로 개발할때, 좀 더 보기 편하게 로그를
남기기위해서 AbstractDAO를 만들어서 insert, delete, update , select 메서드를 재정의 하였다.

실제 개발에서는 각 비즈니스 로직을 담당할 DAO를 생성하여 AbstractDAO를 상속받도록 할 계획이다.
앞으로 개발하면서 차차 보게될 것이다.

여기까지 작성하고 서버를 실행시켜서 에러가 나지 않으면, 설정에 문제가 없다.













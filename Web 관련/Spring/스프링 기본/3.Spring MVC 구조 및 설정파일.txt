http://addio3305.tistory.com/41


웹개발을 하다보면 MVC 패턴이란 말을 듣게 된다.
MVC란 Model - View - Controller의 약자로, 사용자 인터페이스와 비지니스 로직을 분리하여
웹 개발을 하는것을 가장 큰 장점으로 한다. MVC 패턴도 MVC 모델 1과 MVC 모델 2로 나뉘어져
있는데, 요즘에는 MVC라고 하면 당연히 MVC 모델 2를 의미한다.
따라서 여기서는 MVC 모들 2 (이하 MVC)를 기준으로 진행한다.

Model : 모델은 애플리케이션의 정보, 즉 데이터를 나타낸다.
View : 뷰는 사용자에게 보여주는 인터페이스, 즉 화면을 이야기한다. 
       자바 웹 애플리케이션에서는 JSP를 의미한다.

Controller : 컨트롤러는 비지니스 로직과 모델의 상호동작의 조정 역할을 한다.
             MVC2에서는 서블릿이 흐름을 제어하는 컨트롤러 역할을 수행한다.



MVC 패턴에 대해서 장황하게 설명해도 쉽게 이해하기 어려운 관계로 , 간단히 개념만 이야기하고
넘어간다. 실제 소스코드를 통해서 MVC 패턴에 대한 경험을 하는것이 휠씬 이해하는데 도움이 된다.
앞으로 하나씩 추가를 해나가면서 실제로 이러한 MVC 패턴이 어떻게 적용되는지를 보도록 하자.


1. Spring 라이브러리 추가

이전 글 (http://addio3305.tistory.com/36) 에서 pom.xml에 대해서 간단히 설명한 적이 있었다.
pom.xml는 간단히 말해서 프로젝트에서 필요한 모든 라이브러리들을 관리할 수 있도록 구성되어 있다.
예전에는 어떠한 라이브러리를 사용하려고 하면, 라이브러리를 다운받아서 특정 폴더에 복사하여
사용했었다. 라이브러리가 파일 하나로 구성되어 있는 경우라면 몰라도, 하나의 라이브러리에 다양한
파일로 구성되어 있다. 스프링도 마찬가지로, 스프링 프레임워크에는 상당히 많은 파일이 존재한다.

메이븐에서는 <dependency></dependency>라는 태그를 통해서 각 라이브러리를 추가할 수 있다.
여기서 추가해야할 라이브러리가 굉장히 많은 관계로 각 라이브러리에 대한 자세한 설명은 
생략하고 바로 pom.xml만 먼저 확인하고 , 복사해서 붙여넣는것을 권장한다.

첫번째로 <properties></properties> 태그는 변수의 개념으로 생각하면 된다. 우리가 프로그래밍을
하면서 어떠한 값은 상수(java에서 final static으로 으로 선언)로 선언하는 경우가 많은데,
이는 그 변수는 여기저기서 많이 사용되는 변수이기 때문이다. 이러한 변수를 직접 소스 여기저기에
일반적인 값으로 써놓으면, 그 값을 변경해야 할 경우, 모든 소스에서 일일이 변경해야하는 경우가
발생한다. 이럴때 상수로 선언해놓고, 그 하나만 변경하면 쉽게 값을 변경하면서도 다른 소스는
수정할 필요가 없다.


여기서도 마찬가지로 많이 사용되는 값은 변수로 지정하여, 추후 수정이 용이하도록 되어있다.
잠시 살펴보면 <org.springframework-version>3.2.4.RELEASE</org.springframework-version> 라는것을
볼 수 있는데, 이 글을 시작할때 Spring 3.2.4 버전을 사용하기 때문에, 이 값을 이렇게 선언하였다.
만약 스프링 버전을 변경하고 싶으면 이 변수만 바꿔주면 된다.


다음은 <repositories></repositories> 태그다.
이는 실제 라이브러리를 다운받을 장소를 의미한다. 보통은 따로 설정할 필요가 없다.
하지만 프로젝트를 진행하다 보면 인터넷에 연결할 수 없는 프로젝트도 상당히 많은데,
이럴때 내부 저장소를 만들어놓고, 개발자들은 내부저장소에서 라이브러리를 다운받도록 되어있다.
여기서는 인터넷에서 라이브러리를 받으면서, 추가로 전자정부 프레임워크 저장소도 같이 추가했다.

그 다음으로 <dependencies></dependencies> 태그는 실제 라이브러리를 지정한다.
라이브러리는 다음과 같은 형태로 구성된다.


<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-web</artifactId>
    <version>${org.springframework-version}</version>
</dependency>

여기서 <version> 태그 안에 아까 우리가 위에서 지정한 프로퍼티를 사용한 것을 볼 수 있다.
라이브러리를 추가하는것은 별도 포스팅를 통해서 좀 더 자세히 설명할 예정이다.

여기서는 pom.xml에 대해서 간단히 설명했는데, 좀 더 자세히 알고싶은 사람들은 인터넷에서
메이븐에 관련된 글을 읽어보는것을 추천한다.


2. 설정 파일 변경 (web.xml , action-servert.xml 등등)

이제 하나씩 설정을 하도록 하자.
첫번째로 web.xml 파일을 얼어보자
기존에 web.xml 파일에 대해서 간단히 설명하고, 수정했었다. (http://addio3305.tistory.com/39)
여기서 몇가지를 설정을 덧붙이려고 한다.

1.UTF-8 설정

다음을 web.xml에 추가한다.

<filter>
    <filter-name>encodingFilter</filter-name>
<filter-class>
        org.springframework.web.filter.CharacterEncodingFilter
</filter-class>
<init-param>
    <param-name>encoding</param-name>
    <param-value>utf-8</param-value>
</init-param>
</filter>
<filter-mapping>
    <filter-name>encodingFilter</filter-name>
<url-pattern>*.do</url-pattern>
</filter-mapping>

요즘에는 기본적으로 UTF-8로 인코딩한다. 뭐 한글을 아예 안쓸거면 안해줘도 상관없다.


2. 그 외 설정 파일 경로 설정
기존 설정파일을 보면 <servlet> 설정중에 <param-value>라는것이 있었다.
기존에는 servlet 설정파일이 action-servlet.xml 하나만 있었는데, 이제 또 추가되기 때문에,
확장성을 생각하여 특정 폴더에 있는 설정파일을 모두 읽어오는 방식으로 변경한다.
<param-value> 태그를 다음과 같이 수정한다.


<param-value>/WEB-INF/config/*-servlet.xml</param-value>


이는 /WEB-INF/config 폴더안에 있는 -servlet.xml로 끝나는 모든 파일을 읽어오라는것을 의미한다.
따라서 앞으로 설정파일을 추가할때는 XXX-servert.xml로 만들게 되면, 자동적으로 설정파일을 
읽어들인다.

다음으로는 SPring 설정파일을 추가한다. 기존에 <contexxt-param> 태그의 <param-value> 태그안에는
아마 아무것도 작성되지 않았을 것이다. 이제 본격적인 스프링 설정파일을 읽어오기 위해서 
다음과 같이 바꾼다.


<param-value>classpath*:config/spring/context-*.xml</param-value>

이는 앞에서 설명한것과 비슷하게 context-로 시작하는 모든 .xml을 읽어오는것을 뜻한다.
여기서 지금 이렇게 추가하면 context-xxxx.xml 파일이 없기 때문에 에러가 날 것이다.
일단 작성만 해 놓고 주석 처리하도록 한다.

























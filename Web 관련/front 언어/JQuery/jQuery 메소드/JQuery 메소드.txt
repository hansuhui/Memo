[.add()]

.add()는 이미 선택한 선택자에 선택자를 추가합니다.
$( 'h1' ).add( 'p' ) 는 h1 요소를 선택하고 추가적으로 p 요소를 선택합니다.

$( document ).ready( function() {
     $( 'li' ).add( 'p' ).css( 'color', 'red' );
 } );

li 요소에 p 요소를 추가 선택하고 글자를 빨간색으로 만드는 예제입니다.


[.addBack()]

.addBack()은 선택한 요소의 하위 요소를 선택했을 때 
처음 선택한 상위 요소도 같이 선택하도록 합니다.


$( 'ul' ).find( 'li' ).addBack()
은 ul의 하위 요소 중 li를 선택하고, 추가적으로 처음 선택했던 ul을 선택합니다.


.abc {
   padding: 5px;
   border: 1px solid #444444;
  }

$( document ).ready( function() {
    $( 'div' ).find( 'p.ip' ).addBack().addClass( 'abc' );
}g/');

div 하위 요소 중 ip를 클래스로 갖는 p 요소와 그 상위 요소인 div를 선택하여 테두리를 만드는 예제입니다.

[.addClass()]

.addClass()로 클래스 값을 추가할 수 있습니다.
.addClass("classValue1 classValue2")

[.after()]

.after()는 선택한 요소 뒤에 새 요소를 추가합니다.

h1 요소 뒤에 p 요소를 추가하는 예제입니다.

$( document ).ready( function() {
   $( 'h1' ).after( '<p>Hello World!</p>' );
} );

추가하는 요소에 클래스를 넣거나

$( 'h1' ).after( '<p class="abc">Hello World!</p>' );

참고로, 선택한 요소 앞에 컨텐트를 추가할 때는 .before()를 사용합니다.


[.ajaxStart()]

.ajaxStart()로 Ajax 요청이 시작했을 때 함수를 실행시킬 수 있습니다.
.ajaxStart()는 document 또는 window 객체에서 작동합니다.


예를 들어

$( document ).ajaxStart( function() {
   $( '.jbStart' ).show();
} );

는 Ajax 요청이 시작했을 때 클래스 값이 jbStart인 요소를 보여줍니다.

- 예제 -
버튼을 클릭하여 Ajax를 시작하면 이미지가 나오는 예제입니다.


$( document ).ready( function() {
    $( document ).ajaxStart( function() {
      $( '.jbStart' ).show();
    } );
    $( 'button' ).click( function() {
      $( '.jbAjax' ).load( 'ajax/ajax-sample-01.html p' );
    } );
} );


[.animate()]


.animate()은 선택한 요소에 CSS 속성을 부여하고, 
그 모양으로 변할 때 애니메이션 효과를 줍니다.

.animate( properties [, duration ] [, easing ] [, complete ] )

- properties -

properties에는 요소에 부여할 CSS 속성이 들어갑니다. 
font-size처럼 하이픈이 있는 속성은 fontSize처럼 하이픈을 없애고 하이픈 뒤의 첫글자를 대문자로 바꿉니다.
애니메이션 효과를 줄 수 있는 속성은 다음과 같습니다.

- backgroundPositionX
- backgroundPositionY
- borderWidth
- borderBottomWidth
- borderLeftWidth
- borderRightWidth
- borderTopWidth
- borderSpacing
- margin
- marginBottom
- marginLeft
- marginRight
- marginTop
- outlineWidth
- padding
- paddingBottom
- paddingLeft
- paddingRight
- paddingTop
- height
- width
- maxHeight
- maxWidth
- minHeight
- minWidth
- fontSize
- bottom
- left
- right
- top
- letterSpacing
- wordSpacing
- lineHeight
- textIndent

- duration -

부여한 CSS 속성 모양으로 완성될 때까지 걸리는 시간을 정합니다.

- easing -

변환되는 방식을 정합니다. 기본값은 swing입니다.

- complete -

애니메이션이 끝난 후 효과를 추가할 수 있습니다.


- 예제 -

버튼을 클릭하면 글자가 커지고 테두리가 굵어지는 예제입니다.


<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Methods | .animate()</title>
    <style>
      p {
        border: 1px solid #bcbcbc;
      }
    </style>
    <script src="//code.jquery.com/jquery-1.10.2.js"></script>
    <script>
      $( document ).ready( function() {
        $( 'button' ).click( function() {
          $( 'p' ).animate( {
            fontSize: '50px',
            borderWidth: '10px'
          }, 400 );
        } );
      } );
    </script>
  </head>
  <body>
    <button>Click</button>
    <p>Lorem Ipsum Dolor</p>
  </body>
</html>


[.append()]

.append()는 선택한 요소에 컨텐트(Content)를 추가합니다.

<p>Lorem Ipsum Dolor</p>
$( 'p' ).append( ' 123' );
<p>Lorem Ipsum Dolor 123</p>


[.appendTo()]

.appendTo()는 요소 앞에 선택한 요소를 배치합니다.

$( 'p' ).appendTo( '.ab' );
는 p 요소 앞에 ab 클래스 값을 가진 요소를 배치합니다.


- 예제 -

h1 요소 뒤에 있는 p 요소를 h1 요소 앞으로 이동시키는 예제입니다.


<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Method | .appendTo()</title>
    <script src="//code.jquery.com/jquery-1.10.2.js"></script>
    <script>
      $( document ).ready( function() {
        $( 'h1' ).appendTo( 'p' );
      } );
    </script>
  </head>
  <body>
    <h1>Lorem Ipsum Dolor</h1>
    <p>Consectetur adipiscing elit.</p>
  </body>
</html>

[.attr()]

.attr()은 두가지 일을 합니다. 하나는 속성값을 가져오는 것이고, 또하나는 속성을 추가하는 것입니다.

$( 'div' ).attr( 'class' );
는 div 요소의 class 속성값을 가져옵니다.

속성을 추가할 때의 문법은 다음과 같습니다.

$( 'h1' ).attr( 'title', 'Hello' );


[.before()]

.before()는 선택한 요소 앞에 컨텐트(Content)를 추가합니다.

$( 'p' ).before( '<h1>Hello World</h1>' );

는 p 요소 앞에 Hello World를 내용으로 갖는 h1 요소를 추가합니다.


- 예제 -

순서 없는 목록 제일 앞에 Home을 내용으로 갖는 li 요소를 추가하는 예제입니다.

<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Method | .before()</title>
    <script src="http://code.jquery.com/jquery-1.11.0.min.js"></script>
    <script>
      $( document ).ready( function() {
        $( 'li:first-child' ).before( '<li>Home</li>' );
      } );
    </script>
  </head>
  <body>
    <ul>
      <li>Lorem</li>
      <li>Ipsum</li>
      <li>Dolor</li>
    </ul>
  </body>
</html>


[.children()]

.children()은 어떤 요소의 자식 요소를 선택합니다.

$( 'div' ).children().css( 'color', 'blue' );
는 div의 자식 요소 전체의 색을 파란색으로 만듭니다


[.click()]

.click()은 선택한 요소를 클릭했을 때 특정 작업을 수행할 수 있게 합니다.


예를 들어 button 요소를 클릭했을 때 함수를 실행시키고 싶으면 다음과 같이 합니다.


$( 'button' ).click( function() {
  // function
} );



[.clone()]

.clone()은 선택한 요소를 복제합니다.

$( '.ab' ).clone().appendTo( 'h1' );
은 ab를 클래스 값으로 가지는 요소를 복제하여 h1 요소에 넣습니다.


[.css()]

.css()는 선택한 요소의 css 속성값을 가져오거나 속성값을 변경 또는 추가할 수 있게 해줍니다.


속성값을 가져오는 문법은 다음과 같습니다.

$( "h1" ).css( "color" );
는 h1 요소의 스타일 중 color 속성의 값을 가져옵니다.

속성값을 변경 또는 추가할 때는 다음과 같이 합니다.

.css( propertyName, value )


[.delay()]

.delay()는 실행 중인 함수를 정해진 시간만큼 중지(연기) 시킵니다.

duration에는 중지할 시간이 들어갑니다. 숫자로 정할 때의 단위는 1/1000초이고, 
slow 또는 fast로 정할 수 있습니다. slow는 600, fast는 200에 해당합니다.

버튼을 클릭하면 문단이 위로 사라졌다가 1초 뒤에 아래로 나타나는 예졔입니다.

    $( document ).ready( function() {
        $( 'button' ).click( function() {
          $( 'p' ).slideUp( 200 ).delay( 2000 ).slideDown( 200 );
        } );
      } );



[.detach()]

.detach()는 선택한 요소를 문서에서 제거합니다. 
제거한다는 면에서는 .remove()와 같으나, .detach()는 제거한 요소를 저장하여 다시 사용할 수 있습니다.

jb = $( 'h1' ).detach();
는 h1 요소를 문서에서 제거하고 jb라는 변수에 저장합니다.

- 예제 -

[Cut] 버튼을 클릭하면 Dolor를 잘라내고, [Paste] 버튼을 클릭하면 Ipsum 위에 붙여넣습니다.


<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery</title>
    <script src="//code.jquery.com/jquery-3.2.1.min.js"></script>
    <script>
      jQuery( document ).ready( function() {
        var jbDetach;
        $( '#cut' ).click( function() {
          jbDetach = $( '.b' ).detach();
        } );
        $( '#paste' ).click( function() {
          $( '.a' ).before( jbDetach );
        } );
      } );
    </script>
  </head>
  <body>
    <h1>Lorem</h1>
    <h2 class="a">Ipsum</h2>
    <h2 class="b">Dolor</h3>
    <button id="cut">Cut</button> <button id="paste">Paste</button>
  </body>
</html>

--------------------------------------------------------

[.each()]

.each()는 선택한 요소가 여러개일 때 각각에 대하여 반복하여 함수를 실행시킵니다.


특정 조건을 만족할 때 반복 작업에서 빠져려면

return false


[.empty()]

.empty()는 선택한 요소의 내용을 지웁니다. 주의할 점은 내용만 지울 뿐 태그는 남아있다는 것입니다.


- 예제 -

버튼을 클릭하면 p 요소의 내용이 지워지는 예제입니다.

<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Method | .empty()</title>
    <script src="//code.jquery.com/jquery-1.10.2.js"></script>
    <script>
      $( document ).ready( function() {
        $( 'button' ).click( function() {
          $( 'p' ).empty();
        } );
      } );
    </script>
  </head>
  <body>
    <button>Click To Empty</button>
    <p>Lorem Ipsum Dolor</p>
  </body>
</html>


[.fadeIn()]

.fadeIn()은 선택한 요소를 서서히 나타나게 합니다.

.fadeIn(duration, easing, complete)

- duration -

duration에는 완전히 나타날 때까지의 시간이 들어갑니다. 
fast, slow로 정하거나 400 같은 숫자로 정할 수 있습니다. 
숫자일 경우 단위는 1000분의 1초이며, fast는 200, slow는 600에 해당합니다. 
아무것도 입력하지 않으면 기본값 400으로 설정됩니다.

문자로 시간을 정할 때는 따옴표 안에 문자를 넣습니다.

.fadeIn("slow")

숫자로 시간을 정할 때는 숫자만 넣습니다.

.fadeIn(600)

- easing -

easing에는 사라지는 모양이 들어갑니다. 
swing과 linear가 가능하며 기본값은 swing입니다. 따옴표 안에 값을 넣습니다.

.fadeIn("linear")


- complete -

complete에는 지정한 요소가 나타난 다음 불러올 함수가 들어갑니다.

.fadeIn(function() {
  // Function
})


- 예제 -

2초 후에 h1 요소가 나타나고 글자가 빨간색으로 바뀌는 예제입니다.

<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Methods | fadeIn()</title>
    <style>
      h1.fi {
        display: none;
      }
    </style>
    <script src="//code.jquery.com/jquery-1.10.2.js"></script>
    <script>
      $(document).ready(function() {
        $("h1.fi").fadeIn(2000, function() {
          $("h1.fi").css("color","red");
        });
      });
    </script>
  </head>
  <body>
    <h1 class="fi">Lorem ipsum dolor.</h1>
  </body>
</html>


[.fadeOut()]


.fadeOut()은 선택한 요소를 서서히 사라지게 합니다.

.fadeOut(duration, easing, complete)


- duration -

duration에는 완전히 사라질 때까지의 시간이 들어갑니다. 
fast, slow로 정하거나 400 같은 숫자로 정할 수 있습니다. 
숫자일 경우 단위는 1000분의 1초이며, fast는 200, slow는 600에 해당합니다. 
아무것도 입력하지 않으면 기본값 400으로 설정됩니다.

문자로 시간을 정할 때는 따옴표 안에 문자를 넣습니다.
.fadeOut("slow")

숫자로 시간을 정할 때는 숫자만 넣습니다.
.fadeOut(600)

- easing - 

easing에는 사라지는 모양이 들어갑니다. 
swing과 linear가 가능하며 기본값은 swing입니다. 따옴표 안에 값을 넣습니다.
.fadeOut("linear")

- complete -

complete에는 지정한 요소가 사라진 다음 불러올 함수가 들어갑니다.
.fadeOut(function() {
  // Function
})

- 예제 -

swing과 linear의 차이를 볼 수 있는 예제입니다.


<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Methods | fadeOut()</title>
    <script src="//code.jquery.com/jquery-1.10.2.js"></script>
    <script>
      $(document).ready(function() {
        $("button").click(function() {
          $("h1.sw").fadeOut(1000, "swing");
          $("h1.ln").fadeOut(1000, "linear");
        });
      });
    </script>
  </head>
  <body>
    <h1 class="sw">Swing - Lorem ipsum dolor.</h1>
    <h1 class="ln">Linear - Lorem ipsum dolor.</h1>
    <button>Click Me.</button>
  </body>
</html>


버튼을 클릭하면 h1 요소가 사라졌다가 다시 나타나는 예제입니다.


<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Methods | fadeOut()</title>
    <script src="//code.jquery.com/jquery-1.10.2.js"></script>
    <script>
      $(document).ready(function() {
        $("button").click(function() {
          $("h1").fadeOut(1000, function() {
            $("h1").fadeIn();
          });
        });
      });
    </script>
  </head>
  <body>
    <h1>Lorem ipsum dolor.</h1>
    <button>Click Me.</button>
  </body>
</html>


[.fadeToggle()]

.fadeToggle()은 보이는 요소를 보이지 않게, 보이지 않는 요소를 보이게 합니다.

.fadeToggle( [duration ] [, easing ] [, complete ] )


- duration -

duration에는 사라지거나 나타나는데 걸리는 시간을 넣습니다. 
fast, slow로 정하거나 1000분의 1초 단위의 숫자로 정합니다. 
fast는 200, slow는 600에 해당하고 기본값은 400입니다.

문자로 시간을 정할 때는 따옴표 안에 문자를 넣습니다.
.fadeToggle( 'fast' )

숫자로 시간을 정할 때는 숫자만 넣습니다.
.fadeToggle( 600 )

- easing -

easing에는 사라지거나 나타날 때의 모양이 들어갑니다. 
swing과 linear가 가능하며 기본값은 swing입니다. 따옴표 안에 값을 넣습니다.
.fadeToggle( 'linear' )

- complete -

complete에는 지정한 요소가 사라진 다음 불러올 함수가 들어갑니다.
.fadeToggle( function() {
  // Function
} )



[.find()]

.find()는 원하는 선택자를 찾아서 선택합니다.

단순히 CSS 작업을 위한 선택은 CSS 선택자로 하는 게 편하지만, 
사용자가 입력한 값에 따라 선택자가 바뀌는 등 변수를 이용해야 할 때 유용합니다.

.find( selector )


[.get()]

.get()은 선택한 요소를 배열(Array)의 객체로 가져옵니다.

선택한 모든 요소를 가져옵니다.

.get( index )

선택한 요소 중 특정한 것만 가져옵니다.

- 예제 1 -

모든 li 요소를 jb 배열로 가져온 후, 각 요소의 내용을 출력하는 예제입니다.

<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Methods | .get()</title>
    <script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
    <script>
      $( document ).ready( function() {
        var jb = $( 'li' ).get();
        for ( var i = 0; i < jb.length; i++) {
          $( 'div' ).append( '<p>' + jb[i].innerHTML + '</p>' );
        }
      } );
    </script>
  </head>
  <body>
    <ul>
      <li>Lorem</li>
      <li>Ipsum</li>
    </ul>
    <div></div>
  </body>
</html>


li 요소 중 첫번째만 가져와서 내용을 출력하는 예제입니다.

<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Methods | .get()</title>
    <script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
    <script>
      $( document ).ready( function() {
        var jb = $( 'li' ).get( 0 );
        $( 'ul' ).after( '<p>' + jb.innerHTML + '</p>' );
      } );
    </script>
  </head>
  <body>
    <ul>
      <li>Lorem</li>
      <li>Ipsum</li>
    </ul>
  </body>
</html>



[.has()]


.has()를 이용하면 특정 선택자를 가진 요소의 상위 요소를 선택할 수 있습니다. 
CSS 선택자로는 불편했던 작업을 쉽게 할 수 있습니다.


.has( selector )

예를 들어 ul 태그를 가진 li 태그를 선택하려면 다음과 같이 합니다.

$( 'li' ).has( 'ul' )

- 예제 -

ul 요소를 가진 li 요소의 글자색을 빨간색으로 만드는 예제입니다.


<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Method | .has()</title>
    <script src="//code.jquery.com/jquery-1.10.2.js"></script>
    <script>
      $( document ).ready( function() {
        $( 'li' ).has( 'ul' ).css( 'color', 'red' );
      } );
    </script>
  </head>
  <body>
    <ul>
      <li>Lorem</li>
      <li>Ipsum
        <ul>
          <li>Sit</li>
          <li>Amet</li>
        </ul>
      </li>
      <li>Dolor</li>
    </ul>
  </body>
</html>


[.hide()]

.hide()는 선택한 요소를 사라지게 합니다.
 
.hide() 선택한 요소를 즉시 사라지게 합니다.
 
.hide( duration [, easing ] [, complete ] )


선택한 요소를 duration에서 설정한 만큼 서서히 사라지게 합니다. 
duration에는 slow, fast, 숫자를 넣을 수 있습니다. 숫자의 단위는 1000분의 1초입니다. 
기본값은 400입니다.

easing에는 사라지는 방식을 넣습니다. swing과 linear가 가능합니다. 
기본값은 swing입니다.

complete에는 사라진 다음 실행할 함수를 넣을 수 있습니다.

.hide(200,function(){
//이후 실행
})


[.hover()]

.hover()는 선택한 요소에 마우스 포인터를 올렸을 때, 
그리고 마우스 포인터가 그 요소를 벗어났을 때 어떤 효과를 넣게 해줍니다.


.hover( handlerIn(eventObject), handlerOut(eventObject) )
handlerIn(eventObject)에는 요소에 마우스 포인터를 올렸을 때의 효과를, 
handlerOut(eventObject)에는 마우스 포인터가 요소를 벗어났을 때의 효과를 넣습니다.

span 요소에 마우스 포인터를 올리면 글자가 커지고, 포인터가 벗어나면 다시 원래대로 돌아오는 예제입니다.

<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Methods | .hover()</title>
    <style>
      span {
        border: 1px solid #bcbcbc;
        cursor: pointer;
      }
    </style>
    <script src="//code.jquery.com/jquery-1.10.2.js"></script>
    <script>
      $( document ).ready( function() {
        $( 'span' ).hover(
          function () {
            $( this ).animate( {
              fontSize: '50px'
            }, 500 );
          }, function () {
            $( this ).animate( {
              fontSize: '1em'
            }, 500 );
          }
        );
      } );
    </script>
  </head>
  <body>
    <p>Lorem <span>Ipsum</span> Dolor</p>
  </body>
</html>

-----------------------------------------------------------------------------


[.html()]

.html()은 선택한 요소 안의 내용을 담거나, 다른 내용으로 바꿉니다.

HTML 태그를 포함하여 선택한 요소 안의 내용을 담으려면 다음과 같이 합니다.

.html()

이전 내용을 지우고 새로운 내용을 넣으려면 다음과 같이 합니다.

.html( htmlString )

[.inArray()]

.inArray()로 배열에 특정 값이 있는지 알아낼 수 있습니다

jQuery.inArray( value, array [, fromIndex ] )


value에는 검색하고자 하는 값을, array에는 배열의 이름을 넣습니다.

fromIndex는 옵션으로 몇번째 배열 값부터 검색할지를 정합니다. 
입력하지 않았을 때의 기본값은 0으로, 첫번째 배열 값부터 검색합니다.

예를 들어

jQuery.inArray( 'as', jbAry )

는 jbAry라는 배열에 as라는 값이 있는지 검색합니다.

만약 배열에 as가 없다면 -1을 반환합니다. 
첫번째 배열 값이 as라면 0을, 두번째 배열 값이 as라면 1을 반환합니다.


var jbAry = [ 'a', 'b', 'c', 'd', 'e' ]
var jbResult = jQuery.inArray( 'z', jbAry );

배열 값 중에 z가 없으므로 jbResult의 값은 -1입니다

var jbAry = [ 'a', 'b', 'c', 'd', 'e' ];
var jbResult = jQuery.inArray( 'c', jbAry );

c는 배열의 세번째 값이므로 jbResult의 값은 2입니다.

var jbAry = [ 'a', 'b', 'c', 'd', 'e' ];
var jbResult = jQuery.inArray( 'b', jbAry, 2 );

b는 배열의 두번째 값이지만, 세번째 값부터 검색하도록 했으므로 jbResult의 값은 -1입니다.


var jbAry = [ 'a', 'b', 'a', 'd', 'e' ];
var jbResult = jQuery.inArray( 'a', jbAry );

a 값이 여러개 있으면 첫번째 위치를 반환합니다. 즉, jbResult의 값은 0입니다.


[.load()]

.load()는 다른 문서 등에서 내용을 가져와 현재 문서에 나타냅니다.

.load( url [, data ] [, complete ] )

예를 들어 a.html의 p 요소를 가져와 div 요소 안에 넣으려면 다음과 같이 합니다.

$( 'div' ).load( 'a.html p' );

load-02.html에서 id 값이 ab인 요소를 가져와서, 현재 문서의 id 값이 xy인 요소 안에 넣는 예제입니다.

- load-01.html -

<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Methods | .load()</title>
    <script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
    <script>
      $( document ).ready( function() {
        $( '#xy' ).load( 'load-02.html #ab' );
      } );
    </script>
  </head>
  <body>
    <div id="xy"></div>
  </body>
</html>

- load-02.html -

<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Methods | .load()</title>
  </head>
  <body>
    <p>Lorem</p>
    <p id="ab">Ipsum Dolor</p>
  </body>
</html>


[.not()]


.not()은 지정한 선택자 이외의 것을 선택합니다.

.not( selector )


$( 'p' ).not( 'p.abc' ).css( 'color', 'green');
은 abc를 클래스 값으로 가지지 않은 p 요소를 선택합니다.


[.offset()]

.offset()은 선택한 요소의 좌표를 가져오거나 특정 좌표로 이동하게 합니다.

선택한 요소의 좌표를 얻으려면 다음과 같이 합니다.

.offset()

예를 들어

var jb = $( 'h1' ).offset();

는 h1 요소의 좌표를 jb 변수에 저장합니다.
선택한 요소를 특정 위치로 이동시키려면 다음과 같이 합니다.

.offset( coordinates )

예를 들어

$( 'h1' ).offset( { left: 100, top: 50 } );

은 h1 요소를 왼쪽에서 100px, 위에서 50px 위치로 이동시킵니다.

- 예제 -

h1과 h2 요소의 좌표를 출력하는 예제입니다.


<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Methods | .offset()</title>
    <script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
    <script>
      $( document ).ready( function() {
        var jb1 = $( 'h1' ).offset();
        var jb2 = $( 'h2' ).offset();
        $( 'h2' ).after(
          '<p>' + 'H1 - Left : ' + jb1.left + ', Top : ' + jb1.top + '</p>'
          + '<p>' + 'H2 - Left : ' + jb2.left + ', Top : ' + jb2.top + '</p>'
        );
      } );
    </script>
  </head>
  <body>
    <h1>Lorem</h2>
    <h2>Ipsum</h2>
  </body>
</html>

- 예제 2 -
h1 요소를 왼쪽에서 100px, 위에서 50px 위치로 이동시키는 예제입니다.


<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Methods | .offset()</title>
    <script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
    <script>
      $( document ).ready( function() {
        $( 'h1' ).offset( { left: 100, top: 50 } );
      } );
    </script>
  </head>
  <body>
    <h1>Lorem</h2>
    <h2>Ipsum</h2>
  </body>
</html>


[.parent()]

.parent()는 어떤 요소의 부모 요소를 선택합니다.

.parents( [selector] )

selector에 값이 없으면 부모 요소를 선택하고, 
값이 있으면 부모 요소에 그 selector가 있어야 선택합니다.

예를 들어

$( 'p' ).parent().css( 'color', 'green' );

은 p의 부모 요소의 색을 녹색으로 만듭니다.

$( 'p' ).parent( 'div' ).css( 'color', 'green' );

은 p의 부모 요소가 div일 때만 녹색으로 만듭니다.


[.prop()]

.prop()는 지정한 선택자를 가진 첫번째 요소의 속성값을 가져오거나 속성값을 추가합니다. 
주의할 점은 HTML 입장에서의 속성(attribute)이 아닌 
JavaScript 입장에서의 속성(property)이라는 것입니다.

속성값을 가져올 때는 다음과 같이 합니다.

.prop( propertyName )

속성값을 추가할 때는 다음과 같이 합니다.

.prop( propertyName, value )

a 요소의 href 속성값을 .attr()과 .prop()로 가져와서 출력하는 예제입니다.


<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Methods | .prop()</title>
    <script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
  </head>
  <body>
    <p><a href="#">Link</a></p>
    <p>
      <script>
        document.write( $( 'a' ).attr( 'href' ) );
        document.write( '<br>' );
        document.write( $( 'a' ).prop( 'href' ) );
      </script>
    </p>
  </body>
</html>

제일 위의 체크박스를 체크하거나 체크 해제를 하면 아래의 
모든 체크박스가 체크되거나 체크 해제 되는 예제입니다.


<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Methods | .prop()</title>
    <script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
    <script>
      $( document ).ready( function() {
        $( '.check-all' ).click( function() {
          $( '.ab' ).prop( 'checked', this.checked );
        } );
      } );
    </script>
  </head>
  <body>
    <form>
      <p><input type="checkbox" name="all" class="check-all"> <label>Check ALL</label></p>
      <hr>
      <p><input type="checkbox" name="cb1" class="ab"> <label>Checkbox 1</label></p>
      <p><input type="checkbox" name="cb2" class="ab"> <label>Checkbox 2</label></p>
    </form>
  </body>
</html>


[.remove()]


.remove()는 선택한 요소를 HTML 문서에서 제거합니다. 
태그만 제거하는 게 아니라 태그 안의 내용까지 사라지게 합니다.

.remove( [selector] )

특정 선택자를 가진 요소를 제거할 때는 괄호 안에 선택자를 넣습니다. 
예를 들어 p 요소 중 rm을 클래스 값으로 가진 것을 제거할 때는 다음과 같이 합니다.

$( 'p' ).remove( '.rm' );

물론 다음과 같이 해도 같은 결과를 가져옵니다.

$( 'p.rm' ).remove();

상황에 따라 적절한 방식으로 사용하면 됩니다.


[.removeAttr()]

.removeAttr()은 선택한 요소의 특정 속성을 제거합니다.

예를 들어 h1 요소의 title 속성을 제거하려면 다음과 같이 합니다.

$( 'h1' ).removeAttr( 'title' );


[.removeClass()]

.removeClass()로 클래스 값을 제거할 수 있습니다.

.removeClass("classValue")

classValue에는 제거하려는 클래스 값을 넣습니다. 여러개의 값을 제거할 때에는 띄어쓰기로 구분합니다.

.removeClass("classValue1 classValue2")


[.replaceWith()]


.replaceWith()는 선택한 요소를 다른 것으로 바꿉니다.
.replaceWith( newContent )

예를 들어 h1 요소를 abc로 바꾸고 싶다면 다음과 같이 합니다.

$( 'h1' ).replaceWith( 'abc' );

h1 요소의 내용 뿐 아니라 h1 태그까지 지우고 바꾼다는 것에 주의합니다.

newContent에는 특정 요소가 들어갈 수 있습니다. 예를 들어

$( 'h1' ).replaceWith( $( 'p.a' ) );

는 h1 요소를 클래스 값이 a인  p 요소로 바꿉니다.

[.resize()]

.resize()는 윈도우 크기가 바뀔 때 어떤 작업을 할 수 있게 합니다.

$( window ).resize( function() {
  // do somthing
?} );


[.scroll()]

.scroll()은 선택한 객체에 스크롤 이벤트가 발생하는 것을 감지하고 추가적인 작업을 할 수 있게 합니다.

window 객체나 overflow 속성값이 scroll 또는 auto인 요소에 사용할 수 있습니다.

.scroll( handler )


[.scrollTop()]

.scrollTop()은 선택한 요소의 스크롤바 수직 위치를 반환하거나 스크롤바 수직 위치를 정합니다.

.scrollTop()

스크롤바 수직 위치를 가져옵니다. 예를 들어

$( 'div' ).scrollTop();

는 div 요소의 스크롤바 수직 위치를 가져옵니다.

$( 'div' ).scrollTop( 300 );

은 div 요소의 스크롤바 위치를 위에서 300px로 정합니다.


[.slideDown()]

.slideDown()은 선택한 요소를 아래로 미끄러지듯 나타나게 합니다.

.slideDown( [duration ] [, complete ] )

- duration -

duration에는 완전히 나타날 때까지의 시간이 들어갑니다. 
fast, slow로 정하거나 400 같은 숫자로 정할 수 있습니다. 
숫자일 경우 단위는 1000분의 1초이며, fast는 200, slow는 600에 해당합니다. 
아무것도 입력하지 않으면 기본값 400으로 설정됩니다.

문자로 시간을 정할 때는 따옴표 안에 문자를 넣습니다.
.slideDown( 'slow' )

숫자로 시간을 정할 때는 숫자만 넣습니다.
.slideDown( 600 )

- complete -

complete에는 지정한 요소가 나타난 다음 불러올 함수가 들어갑니다.
.slideDown( function() {
  // Animation complete.
} )


[.text()]

.text()는 선택한 요소 안의 내용을 담거나, 다른 내용으로 바꿉니다.


선택한 요소 안의 내용을 담으려면 다음과 같이 합니다. 단, HTML 태그는 제외하고 담습니다.

.text()

이전 내용을 지우고 새로운 내용을 넣으려면 다음과 같이 합니다.

.text( textString )


[.toggle()]

.toggle()은 선택한 요소가 보이면 보이지 않게, 보이지 않으면 보이게 합니다.


.toggle( [duration ] [, complete ] )

- duration -

duration에는 완전히 나타날 때까지의 시간이 들어갑니다. 
fast, slow로 정하거나 400 같은 숫자로 정할 수 있습니다. 숫
자일 경우 단위는 1000분의 1초이며, fast는 200, slow는 600에 해당합니다. 
아무것도 입력하지 않으면 기본값 400으로 설정됩니다.

문자로 시간을 정할 때는 따옴표 안에 문자를 넣습니다.
.toggle( 'slow' )

숫자로 시간을 정할 때는 숫자만 넣습니다.
.toggle( 600 )

- complete -

complete에는 지정한 요소가 나타난 다음 불러올 함수가 들어갑니다.
.toggle( function() {
  // Animation complete.
});


[.toggleClass()]

.toggleClass()로 선택한 요소에 클래스(Class) 값을 넣었다 뺐다 할 수 있습니다.
.toggleClass( className )

[.unwrap()]

.unwrap()은 선택한 요소의 부모 요소를 제거합니다.
.unwrap()

- 예제 -

h1 요소를 선택하고 .unwrap()으로 div 태그를 제거하는 예제입니다.


<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Method | .unwrap()</title>
    <style>
      .ab {
        color: red;
      }
    </style>
    <script src="//code.jquery.com/jquery-1.10.2.js"></script>
    <script>
      $( document ).ready( function() {
        $( 'h1.cd' ).unwrap();
      } );
    </script>
  </head>
  <body>
    <div class="ab">
      <h1 class="cd">Lorem ipsum dolor.</h1>
    </div>
  </body>
</html>

만약 h1 태그를 선택하기 힘든 상황이라면 div를 선택하여 제거할 수도 있습니다. 
이때는 .contents()를 추가하여 자식 요소를 선택 후 제거합니다.

$( 'div.ab' ).contents().unwrap();


[.width()]

.width()는 선택한 요소의 가로 크기를 반환하거나, 가로 크기를 변경합니다.


[.wrap()]

.wrap()은 선택한 요소를 원하는 태그로 둘러싸게 합니다.

.wrap( wrappingElement )

p 요소를 div 태그로 둘러싸려면 다음과 같이 합니다.

$( 'p' ).wrap( '<div></div>' );

class나 id 값을 추가할 수도 있습니다.

$( 'p' ).wrap( '<div id="ab" class="cd"></div>' );

여러 태그를 한 번에 붙일 수도 있습니다.

$( 'p' ).wrap( '<div><strong></strong></div>' );


[.wrapAll()]

.wrapAll()은 선택한 요소 모두를 새로운 태그로 둘러싸게 합니다

.wrapAll( wrappingElement )


- 예제 -

.wrap()은 선택한 요소에 각각 적용됩니다.


<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Method | .wrapAll()</title>
    <style>
      div {
        color: red;
      }
    </style>
    <script src="//code.jquery.com/jquery-1.10.2.js"></script>
    <script>
      $( document ).ready( function() {
        $( 'p' ).wrap( '<div></div>' );
      } );
    </script>
  </head>
  <body>
    <p>Lorem ipsum dolor.</p>
    <h3>Lorem ipsum dolor.</h3>
    <p>Lorem ipsum dolor.</p>
  </body>
</html>

위 예제는 p 요소에 각각 적용되어 본문을 다음과 같이 만듭니다.

<div>
  <p>Lorem ipsum dolor.</p>
</div>
<h3>Lorem ipsum dolor.</h3>
<div>
  <p>Lorem ipsum dolor.</p>
</div>

.wrapAll()은 선택한 요소를 모아서 하나의 태그로 둘러쌉니다.
<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Method | .wrapAll()</title>
    <style>
      div {
        color: red;
      }
    </style>
    <script src="//code.jquery.com/jquery-1.10.2.js"></script>
    <script>
      $( document ).ready( function() {
        $( 'p' ).wrapAll( '<div></div>' );
      } );
    </script>
  </head>
  <body>
    <p>Lorem ipsum dolor.</p>
    <h3>Lorem ipsum dolor.</h3>
    <p>Lorem ipsum dolor.</p>
  </body>
</html>

위 예제는 p 요소를 모아서 하나의 태그로 둘러쌉니다.

<div>
  <p>Lorem ipsum dolor.</p>
  <p>Lorem ipsum dolor.</p>
</div>
<h3>Lorem ipsum dolor.</h3>


- 예제 2 -

.wrapAll()은 하위 요소 모두를 새로운 태그로 감쌀 때 유용하게 사용할 수 있습니다.
<!doctype html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>jQuery Method | .wrapAll()</title>
    <style>
      .red {
        color: red;
      }
    </style>
    <script src="//code.jquery.com/jquery-1.10.2.js"></script>
    <script>
      $( document ).ready( function() {
        $( '.wa' ).contents().wrapAll( '<div class="red"></div>' );
      } );
    </script>
  </head>
  <body>
    <div class="wa">
      <h3>Lorem ipsum dolor.</h3>
      <p>Lorem ipsum dolor.</p>
      <p>Lorem ipsum dolor.</p>
    </div>
  </body>
</html>

위 예제는 div.wa 안의 모든 요소를 div.red로 감쌉니다.

<div class="wa">
  <div class="red">
    <h3>Lorem ipsum dolor.</h3>
    <p>Lorem ipsum dolor.</p>
    <p>Lorem ipsum dolor.</p>
  </div>
</div>



[jQuery.trim()]

jQuery.trim()은 문자열에 있는 공백(whitespace)을 제거해줍니다. 
주의할 점은 문자열 앞과 뒤에 있는 공백은 제거하지만, 
문자열 중간에 있는 공백은 제거하지 않는다는 것입니다.

jQuery.trim( str )




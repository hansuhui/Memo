https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions

[트랜지션 정의에 사용한 CSS 속성]

CSS 트랜지션은 단축(shorthand) 속성 transition을 사용하여 제어합니다. 이것은 트랜지션을 설정하는
가장 좋은 방법입니다. 파라미터 목록의 길이가 싱크에 맞지 않는 것을 피하기가 더 쉬워지기 때문입니다.
시크가 맞지 않으면 CSS를 디버그하는데 많은 시간을 들여야 해서 크게 좌절할 수 있습니다.

여러분은 아래의 서브 속성으로 트랜지션의 개별 컴포넌트를 제어할 수 있습니다 ?

이 트랜지션은 단지 예제를 목적으로 계속해서 루프를 돕니다. 그리고 Css transition들은 
시작에서 종료까지 어떻 속성의 변화만을 시각화합니다. 그 루프를 시각화하려면 Css animation 속성을
살펴보세요.

(https://developer.mozilla.org/en-US/docs/Web/CSS/animation?v=control)

- transition-property -
트랜지션을 작용해야 하는 CSS 속성의 이름 혹은 이름들을 명시합니다.
여기에 나열한 속성만 트랜지션하는 동안 움직입니다.또한, 다른 모든 속성에 대한 변화는 보통 떄와 
같이 즉시 일어납니다.

(https://developer.mozilla.org/ko/docs/Web/CSS/transition-property)


- transition-duration -

트랜지션이 일어나는 지속 시간을 명시합니다. 트랜지션 동안 모든 속성에 적용하는 단일 지속
시간을 명시하거나, 다른 주기로 각 속성이 트랜지션하게 하는 여러 지속 시간을 명시할 수 있습니다.

(https://developer.mozilla.org/ko/docs/Web/CSS/transition-duration)


- transition-timing-function -

속성의 중간값을 계산하는 방법을 정의하는 함수를 명시합니다. Timing functions 는 트랙지션의
중간값을 계산하는 방법을 결정합니다. 대부분의 타이밍 함수는 큐빅 베이지어(cubic bezier)를 
정의하는 네 점의 의해 정의되므로 상응하는 함수의 그래프로 제공해서 명시할 수 있습니다.
Easing Functions Cheat Sheet 에서 이징(easing,역자주: 시간에 따른 파라미터 값의 변화율을 명시하는 함수)
를 선택할 수도 있습니다.


단축 문법

div {
    transition: <property> <duration> <timing-function> <delay>;
}


[트랜지션 완료 감지하기]

트랜시젼을 완료하면 발생하는 단일 이벤트가 있습니다. 모든 표준을 따르는 브라우저에서는
그 이벤트는 transitionend이며, Webkit에서는 webkitTransitionEnd 입니다.
자세한 내용은 맨 아래의 호환성 테이블을 참고하세요. traansitioned 이벤트는
두 속성을 제공합니다.

- propertyName -
트랜시젼을 완료한 CSS 속성의 이름을 나타내는 문자열


- elapsedTime -
 이벤트가 발생한 시점에 해당 트랜지션이 진행된 시간을 초로 나타내는 실수.
  이 값은 transition-delay 값에 영향을 받지 않습니다.

평소대로 element.addEventListener() 메소드를 사용하여 이벤트를 모니터링 할 수 있습니다.

el.addEventListener("transitionend", updateTransition, true);

트랜지션을 중단하면 transitionend 이베느는ㄴ 발생하지 않습니다. 트랜지션을 완료하기 전에 
애니매이션하고 있는 속성의 값이 바뀌기 때문입니다


[속성값 목록이 다른 개수를 가진 경우]

어떤 속성의 값 목록이 다른 것보다 짧다면, 일치되도록 그 값을 반복합니다. 예를 들면,


div {
  transition-property: opacity, left, top, height;
  transition-duration: 3s, 5s;
}

위는 아래와 값이 처리합니다.

div {
  transition-property: opacity, left, top, height;
  transition-duration: 3s, 5s, 3s, 5s;
}

비슷하게, 어떤 속성의 값 목록이 transition-property 목록보다 길다면, 그것은
끝을 잘라냅니다. 그래서, 아래의 CSS가 있다면,


div {
  transition-property: opacity, left;
  transition-duration: 3s, 5s, 2s, 1s;
}

위를 아래와 같이 해석합니다.

div {
  transition-property: opacity, left;
  transition-duration: 3s, 5s;
}


[간단한 예제]

이 예제는 사용자가 마우스를 해당 요소 위에 올려놓고 애니메이션 효과가 시작할 때까지 
2초의 딜레이가 있는 4초짜리 폰트 크기 트랜지션을 수행합니다.

#delay1 {
  position: relative;
  transition-property: font-size;
  transition-duration: 4s;
  transition-delay: 2s;
  font-size: 14px;
}

#delay1:hover {
  transition-property: font-size;
  transition-duration: 4s;
  transition-delay: 2s;
  font-size: 36px;
}



[메뉴 하이라이팅에 트랜지션 사용]

CSS의 흔한 사용은 사용자가 마우스 커서를 메뉴 위에 올려놓았을 때 그 메뉴 아이템을 
하이라이팅하는 것입니다. 트랜지션을 사용하여 효과를 휠씬 더 매력적으로 만들 수 있습니다.

우선 HTML을 사용하여 메뉴를 설정합니다.


<div class="sidebar">
  <p><a class="menuButton" href="home">Home</a></p>
  <p><a class="menuButton" href="about">About</a></p>
  <p><a class="menuButton" href="contact">Contact Us</a></p>
  <p><a class="menuButton" href="links">Links</a></p>
</div>


그리고 우리 메뉴의 모습과 느낌(look and feel)을 CSS로 만듭니다. 관련 부분이 여기 있습니다.


.menuButton {
  position: relative;
  transition-property: background-color, color;
  transition-duration: 1s;
  transition-timing-function: ease-out;
  text-align: left;
  background-color: grey;
  left: 5px;
  top: 5px;
  height: 26px;
  color: white;
  border-color: black;
  font-family: sans-serif;
  font-size: 20px;
  text-decoration: none;
  box-shadow: 2px 2px 1px black;
  padding: 2px 4px;
  border: solid 1px black;
}

.menuButton:hover {
  position: relative;
  transition-property: background-color, color;
  transition-duration: 1s;
  transition-timing-function: ease-out;
  background-color:white;
  color:black;
  box-shadow: 2px 2px 1px black;
}

이 CSS는 그 요소가 :hover 상태일 때 배경과 텍스트 색상 모두를 변경하면서 메뉴의 모습을 설정합니다.



[트랜지션을 이용하여 JaavaScript 기능 부드럽게 하기]

트랜지션은 JavaScript 기능에 아무것도하지 않고 휠씬 더 부드럽게 보이도록 하는 훌륭한 도구힙니다.
아래 예제를 보세요.

<p>Click anywhere to move the ball</p>
<div id="foo"></div>

JavaScript를 사용하여 공을 어떤 위치로 움직이는 효과가 일어나게 할 수 있습니다.

var f = document.getElementById('foo');
document.addEventListener('click', function(ev){
    f.style.left = (ev.clientX-25)+'px';
    f.style.top = (ev.clientY-25)+'px';
},false);


추가 노력 없이 CSS로 이것을 부드럽게 할 수 있습니다. 단순히 그 요소에 트랜지션을 추가하면
어떠한 변화도 부드롭게 일어날 것입니다.


p {
  padding-left: 60px;
}

#foo {
  border-radius: 50px;
  width: 50px;
  height: 50px;
  background: #c00;
  position: absolute;
  top: 0;
  left: 0;
  transition:  all 1s;
}






























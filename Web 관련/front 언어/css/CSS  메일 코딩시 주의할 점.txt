기본적으로 table tr td 만을 가지고 코딩하길 권유하고 그 외 일부 코드는 메일 서비스 회사에서 막아놓는 경우나
각 브라우저마다 기본적인 마진 패딩의 차이가 있으므로  다른 코드를 이용한 마크업을 최소화한다.



css

*기본
css 를 사용하는 방식, 상단에 스타일을 선언하는 방식은 메일 제공업체가 막는 경우가 있으므로,
스타일은 각 코드안에 인라인으로 넣어주자~

*center
메일폼의 제일 바깥에 감싸져 있는 코드에 <div align="center"></dicv> 를 넣줘서 메일을 받는 사람이 메일을 열었을데 
메일폼이 가운데 정렬이 되도록 한다.

*background
style="background:~~~" 방식이 안되는 곳이 있으므로 background="~~~" 로 작업을 권장..
background="~~~" 방식은 repeat 기능이나 left top 등의 위치조절기능이 없으므로 
텍스트앞에 아이콘이나 불릿이 있는 경우 텍스트가 이미지 폰트인 경우 같이 컷팅,
또는 텍스트가 시스템폰트인 경우 텍스트앞의 아이콘이나 불릿은 img src 로 처리..
background 스타일을 사용할 경우 아웃룩 2007은 지원하지않는 다는 걸 알아야함.

*font-family
개인적으로 이 원인을 빨리 찾지 못해서 굉장히 고생한 부분이다 ㅠ.ㅠ
시스템폰트가 들어간 코드에 폰트패밀리가 들어가지 않은 경우, 브라우저마다 또는 메일제공회사마다
기본으로 선언된 폰트 글꼴이 다르므로 반드시 폰트패밀리를 선언해줘야 한다..
돋움같은 경우, 한글보다는 영어로  style="font-family:Dotum;" 으로 선언하길 권장한다.

*vertical-align
valign="top" 또는 style="vertical-align:top;" 등을 주어서,, 공백을 최소화 한다.

*line-height
시스템폰트로 구성된 문단들은 line-height 선언이 빠지면 각 메일 회사나 브라우저마다 문단안의 텍스트 위 아래 
간격이 차이가 생길 수 있으므로 선언해주는 것이 좋다. 이외에도 경험상 시스템폰트가 들어간 곳은 line-height 를
넣주는 것이 좋은 듯하다. 개인적으로 폰트사이즈가 11px 인 경우 line-height 값은 13px로 해주고, 12px 이상은
line-height값을14px로 해준 후에 문단안의 위 아래 여백등은 패딩을 이용해 조절해주었다.

*cell
cellspacing="0" cellpadding="0" 을 사용하거나 style="border-collapse:collapse;" 를 사용하여 경계선의 여백을 없애준다.

*padding
기본적으로 위 아래 td 에 이미지가 있을 경우 padding:0; 을 주어서 밀착시킨다.


=============================================================================



Design on a Width of 600 pixels
600픽셀 너비 디자인
대부분의 이메일 표준폭은 550~600픽셀정도이고 안전을 위해서 700픽셀 이하로 유지하라.

Use Background Images Sparingly
드물게 백그라운드 이미지를 사용하라
기본적으로 단색배경을 이용해서 디자인하고 배경 이미지를 활용하라.

Stick with System fonts
시스템 글꼴을 사용하라
이메일에서 웹글꼴은 지원되지 않으므로 웹 안전글꼴을 이용하라.

Strive for a Good Balance of Text-to-Image Ratio
글자와 이미지간 비율을 유지하라.
이메일에서 이미지는 기본적으로 차단되어있다. 이미지가 차단된 상태에서도 
소비자의 행동을 일으킬수 있도록 이미지와 텍스트의 배치와 디자인 비율을 고려해야 한다.


Consider a Mobile-First Design
모바일 친화적으로 디자인하라.
모든 클라이언트 디바이스가 CSS를 지원되는 것을 기대할 수 없다.
단일 열 레이아웃, 큰 글꼴, 명확하고 간결한 메세지 사용.

www.sitepoint.com 에서 Lauren Ribando 가 작성한 내용입니다. 
해당 사이트에 더 자세하고 이해하기 쉽게 제시된 이미지가 있습니다. 
원문을 보시길 권장합니다. ( 영어가 짧아서 번역기로 돌려서 본 내용이라 핀트가 맞지 않는 내용이 있을 수도 있습니다.)

5가지의 내용이 모두 일반적으로 생각할 수 있는 사항입니다만, 정리가 잘 되어있고 고려되어야 하는 이유와 근거도 잘 설명이 되어있습니다.
1~4번은 과거 이메일 제작에서 당연하게 고려되어야 하는 내용입니다.
5번은 과거 피처폰뿐만 아니라 스마트폰을 고려할 때 당연하다고 생각됩니다.

이메일 마케팅을 위한 이메일 디자인을 제공하는 서비스 사이트를 제안했는데 괜찮은 서비스 입니다. 
이메일 마켓팅을 한다면 당연히 고려해야 할 내용이라고 생각됩니다.



=============================================================================



메일링 코딩스타일 적용테스트 (외부스타일 제외)

메일링 코딩을 할때 여러분들은 웹표준에 맞춰 코딩을 하는지요? 
메일링은 웹페이지로 볼수 없으며, 구조화를 시킬 필요도 없고, 시킬수도 없다는게 제 개인적인 생각입니다.
그래서 몇가지 테스트를 해보았습니다. 사실 꽤 오래전에 테스트를 한건데 이제서야 공유를 합니다.
css 를 부르는 방법은 크게 3가지로 분류 됩니다, (외부스타일, 내부스타일, 인라인스타일)
여기서 외부스타일은 메일제공 사이트와 class 충돌문제가 발생할수 있어 테스트 항목에서 제외시켰습니다.



	옛날방식	인라인스타일	내부스타일	비고

Daum	O	O	O	 

네이버	O	O	X	이미지를 첨부파일로 인식, 내부스타일 적용안됨

야후	O	O	O	 

파란	O	O	O	이미지를 첨부파일로 인식

구글(G메일)	O	X	X	스타일 적용안됨

엠파스	O	O	O	 

네이트	O	X	X	스타일 적용안됨, 이미지를 첨부파일로 인식

코리아닷컴	O	O	O	이미지를 첨부파일로 인식

Outlook Express	O	O	O	 


● 간단하게 3가지 방식을 설명을 드리자면

- 옛날방식 : 배경이미지나, 폰트사이즈, 컬러등을 css 로 입히는 방식이 아닌 엘리먼트 안에 직접적으로 해당소스를 삽입하는 방법입니다. 
ex)<td background="http://www.webmini.net/test_bg.gif">

- 인라인스타일 : 배경이나, 폰트사이즈, 컬러등을 해당 엘리먼트 안에 스타일을 주는 방식입니다. 
ex)<td style="background:url(http://www.webmini.net/test_bg.gif) no-repeat;">

- 내부스타일 : 해당 페이지 안에 style 소스를 선언후 class 로 불러오는 방식입니다. ex) .wrap --> <td class="wrap">



=============================================================================


이메일발송코딩 주의사항,아웃룩,네이버메일,다음메일  
 
이메일html/CSS 코딩팁

스타일시트(CSS)가 브라우저에서 모든 스타일이 제대로 보일거라는 기대는 하지 말 것.
(가장 많이 쓰는 메일서비스는 아웃룩, 네이버,다음 등등)

기본적으로 아웃룩은 스타일을 거의 렌더링하지 않는다. 

폰트의 사이즈나 색깔 패딩영역정도만 인식한다.

배경이미지도 인식못함

다음과 네이버는 스타일시트를 인식한다.

다음메일은 의도한대로 완벽하게 렌더링한다.


네이버는 ie7로 렌더링한다. ie8이상이나 firevfox에서는 이미지사용시 공간이 생긴다.
따라서 이미지태그에는 반드시 두가지 속성을 추가할것. align='absmiddle'과 border='0'


이메일html/CSS 코딩결론

배경이미지 사용하지 말 것

영역 디자인에 스타일시트 사용하지 말 것

이미지에 alignmiddle속성 넣을 것







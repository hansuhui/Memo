사용자에게 정보 얻기 I


에디터 프로그램을 실행하시고 두개의 페이지를 만들어 보도록 하겠습니다.
두페이지의 이름은 각각 'regist.asp' 와'regist_ok.asp'로 하겠습니다.
regist.asp 페이지에서는 사용자에게 정보를 입력받을 예정이고요.
regist_ok.asp 에서는 regist.asp 에서 입력된 값을 받아 화면에 출력시켜 줄 예정입니다.



[regist.asp]



<HTML>
<HEAD>
<TITLE>사용자로부터 정보 얻기</TITLE>
</HEAD>
<BODY>
<FORM NAME=frmInfo METHOD=POST ACTION=regist_ok.asp>
이름 : <INPUT TYPE=TEXT NAME=txtName SIZE=15><BR>
Email : <INPUT TYPE=TEXT NAME=txtEmail SIZE=30><BR>
전화번호 : <INPUT TYPE=TEXT NAME=txtPhone SIZE=20><BR>
<INPUT TYPE=SUBMIT VALUE='전송'>
</FORM>
</BODY>
</HTML>


=================================

[regist_ok.asp]


<%
DIM strName, strEmail, strPhone
 
strName = Request.Form("txtName")
strEmail = Request.Form("txtEmail")
strPhone = Request.Form("txtPhone")
 
Response.Write "이름은 = " & strName & "<BR>"
Response.Write "Email은 = " & strEmail & "<BR>"
Response.Write "전화번호는 = " & strPhone & "<BR>"
%>


=================================


1. FORM 태그
regist.asp 페이지에서 눈에 띄는 것은 아무래도 6번째 줄의 <FORM> 태그일 것 같습니다.
FORM 태그는 사용자에게 '정보를 입력받는 곳의 경계를 설정' 해 주는 태그입니다.


즉, 사용자가 정보를 입력하는 여러가지 필드들은 반드시 <FORM> 과 </FORM> 내부에 있어야만 합니다. 
FORM 태그 바깥에 있으면 아무리 입력을 해도 그 내용이 전달되지 않습니다.
(regist.asp 페이지에서는 6~11줄까지 FORM 태그가 감싸고 있는 것을 보실 수 있습니다.)

FORM 태그에서 중요하게 사용되는 속성은 NAME, METHOD, ACTION 등이 있는데요.
이 속성들에 대해서 조금 더 자세하게 알아보도록 하겠습니다.

1.1 NAME
- 이것은 말 그대로 FORM 의 이름을 나타냅니다.
  한 페이지 안에서 FORM 은 단지 하나가 아닌, 여러개가 사용될 수도 있는데요.
  그렇기 때문에 경우에 따라서는 이 FORM 들을 구별해야 할 필요가 생기고는 합니다.
  이 때, 각각의 FORM 들을 구분해 주는 것이 바로 NAME 속성이 되는 것입니다.

1.2 ACTION
- 현재의 페이지는 '사용자들로부터 정보를 입력받는' 페이지라는 말씀을 위에서 드렸는데요.
  이 페이지는 '단지 입력을 받을' 뿐이고, 그 정보의 처리는 다른 페이지에서 하게 됩니다.
  그렇다면 지금 입력받은 정보들을 그 '처리해 주는 페이지' 로 보내야 하겠지요?
  이 때 사용되는 속성이 바로 ACTION 속성이 되겠습니다.
  '사용자가 입력한 정보를 처리하는 페이지의 주소' 가 바로 ACTION 의 값이 되는 것이지요.
  이 주소가 정확하지 않으면 '페이지를 찾을 수 없다' 는 오류를 만나게 될 것입니다.

1.3 METHOD
- 값을 전달하는 '방식' 을 의미하는 METHOD 속성에는 두가지가 있습니다.
  하나는 'GET' 방식이고, 또 하나는 'POST' 방식인데요.
  GET 방식은 여러분들께서 주소를 입력하는 주소창에 정보를 추가해서 전달하는 방식이며,
  POST 방식은 보이지 않게 숨겨서 정보를 전달하는 방식이 되겠습니다.
  따라서 GET 방식을 사용하면 주소창에 여러분들께서 입력한 정보가 드러나게 되지요.



GET 방식으로 값을 전달하는 경우 뒤쪽에 쿼리스트링이 붙는다.

POST 방식으로 할 경우에는 주소창에 정보가 나타나지 않는다.
POST 방식의 경우엔 , 정보는 따로 데이터 스트림이라는 곳에 저장되어 전달되기 때문이지요.


GET 방식과 POST 방식의 차이

1. POST 방식이 GET방식보다 보안적 측면에서 더 우수합니다.
2. POST 방식이 GET 방식보다 더 많은 양을 전달할 수 있습니다.
POST 방식은 정보의양에 상관없이 무제한 용량을 소화할 수 있지만,
주소 URL의 뒤에 정보를 추가하는 GET 방식은 최대 2,047 글자를 넘어갈 수 없습니다.
따라서 많은 양의 내용을 전달하려 할 때 GET 방식을 사용하면 곤란하겠지요.

3. 아주 미세한차이지만 속도는 GET방식이 POST 방식보다 빠릅니다.
별도의 장치 없지 주소(URL)의 뒤에 정보를 추가하는 방식인 GET 방식이,
데이터 스트림에 따로 저장하는 POST 방식보다 더 빠르다는 것이 일반적인 중론입니다.
(이론적으로는 그렇지만 실제로는 거의 차이가 없다고 봐도 무방하겠습니다.)

이런 이유때문에 보통의 경우 GET방식 보다는 POST 방식을 주로 사용합니다.


=================================


2. INPUT 태그

FORM 태그의 내부를 보면 7,8,9,10 번 줄에 있는 INPUT 태그를 보실 수 있습니다.
INPUT 태그는 '사용자에게 정보를 물어볼 때' 사용하는 태그인데요.
그러므로 이 태그는 '사용자의 입력을 받는' 특수한 태그라고 할 수가 있겠습니다.

INPUT 태그의 종류는 상당히 다양하지만.. 종류에 대해서는 다음 강좌에서 살펴보도록 하고,
이번 강좌에서는 '사용자들이 문자열을 입력할 수 있는' 텍스트 필드(TEXT)와,
'입력이 완료되었을 때 전송을 실행하는' 실행버튼(SUBMIT)의 경우만 다루도록 하겠습니다.

위 소스의 7 ~ 11번 줄의 소스를 옮겨보면 다음과 같습니다.

7.   이름 : <INPUT TYPE=TEXT NAME=txtName SIZE=15>
8.   Email : <INPUT TYPE=TEXT NAME=txtEmail SIZE=30>
9.   전화번호 : <INPUT TYPE=TEXT NAME=txtPhone SIZE=20>
10.   <INPUT TYPE=SUBMIT VALUE='전송'>

INPUT TYPE=TEXT 는 사용자에게 글자를 입력받는 텍스트 필드를 사용하겠다는 의미입니다.
하지만 똑같은 텍스트 필드가 3개씩이나 나오니까.. 각각을 구분해야 할 필요가 있겠지요?

이 때 서로를 구분해 주는 속성이 바로 NAME 속성입니다. 이름을 지어 주는 것이지요.
이렇게 지어준 '이름' 은 정보를 넘겼을 때 유용하게 사용되므로 잘 기억해 두셔야 합니다.
(이름을 지을때에도 저는 이름 앞에 text 의 약자인 txt 를 붙여서 지었습니다. 편합니다. ^^)

뒤에 SIZE 라는 또 하나의 속성이 보이는데요.. 이것은 텍스트 필드의 '길이' 를 의미합니다. 
(영문은 사이즈 1당 글자 하나, 한글은 사이즈 2당 글자 하나가 들어가는 정도의 길이입니다.)
이름은 그다지 길지 않을 것 같으므로 사이즈를 15 정도로 주었고요.
Email 은 약간 길어질 수 있으므로 넉넉하게 30 정도로 정해 주었습니다.
만약 SIZE 값을 지정해 주지 않는다면 기본 값은 자동적으로 20 이 됩니다.

10번 줄의 SUBMIT 버튼은, 현재 FORM 안에 있는 내용들의 전송을 실행하는 버튼입니다.
이 버튼을 클릭하면 FORM 안에 있는 모든 내용들이 지정된 페이지로 전달됩니다.
(정확하게 말하자면 FORM 의 ACTION 속성에서 값으로 지정해 준 페이지로 전달됩니다.)
여기서 사용되는 VALUE 속성은 버튼 위에 쓰여지는 내용을 의미합니다.


자.. 이제는 regist.asp 페이지에서 넘겨준 정보를 처리하는 역할을 하는 페이지인
regist_ok.asp 페이지를 한번 살펴보도록 하겠습니다.
이 페이지의 구조는 상당히 단순합니다. 소스의 중요 부분만을 살짝 옮겨와 보도록 할까요?

2.   DIM strName, strEmail, strPhone

4.   strName = Request.Form("txtName")
5.   strEmail = Request.Form("txtEmail")
6.   strPhone = Request.Form("txtPhone")

8.   Response.Write "이름은 = " & strName & "<BR>"
9.   Response.Write "Email은 = " & strEmail & "<BR>"
10.   Response.Write "전화번호는 = " & strPhone & "<BR>"

우선 2번 줄에서는 이 페이지에서 사용될 변수들을 Dim 명령어를 이용하여 선언합니다.
(ASP 에서는 반드시 선언하지 않아도 되지만.. 선언하는 것이 좋은 습관인거 아시죠? ^^)
보시는 것처럼 이름, 이메일, 전화번호를 저장할 변수 셋을 선언했네요.
(저는.. 문자열이 저장된다는 이유로 앞에 'str' 이라는 접두사를 붙여주었습니다.)

4, 5, 6번 줄은 regist.asp 페이지에서 넘긴 정보를 받는 부분이 되겠습니다.
그런데 여기서 한가지.. 우리는 regist.asp 페이지에서 POST 방식을 사용했었습니다.
이처럼 POST 방식으로 넘기는 경우 'Request.Form' 과 같은 형식으로 값을 받아야 합니다.

그렇다면 GET 방식으로 값을 넘긴 경우에는 처리가 달라지는 걸까요?
네. 그렇습니다. GET 방식인 경우 'Request.QueryString' 으로 값을 받아야 하지요.


GET, POST 방식에 상관 없이 받아오는 방법이 있습니다.
QueryString 과 Form 을 생략한 Request("txtName") 처럼 받아오는 방법인데요.
하지만, 이 방법은 QueryString, Form 을 명시해 줄때보다는 효율성이 떨어진답니다.

















































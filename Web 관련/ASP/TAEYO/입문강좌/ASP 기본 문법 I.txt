http://www.taeyo.net/Columns/View.aspx?SEQ=151&PSEQ=12&IDX=6


[선언 및 생성]


Dim - 변수를 선언. (예: Dim strName)
Set - 개체를 생성 (예: Set rs = Server.CreateObject("ADODB.RecordSet"))



[논리 구문]

IF ~ THEN : IF문

SELECT CASE  : CASE 문

FOR ~ NEXT : FOR문

DO WHILE :  WHILE문




1.Dim

-Dim은 차원을 의미하는 Dimenstion의 약자로서, 변수를 선언할 때 사용합니다. 만약 Dim a 라고 한다면,
'a는 이제부터 변수다' 라는 것을 프로그램에게 알려주는 것이지요. 

여러개의 변수를 선언 할 떄

Dim a
Dim b
Dim c

처럼 하나하나 선언해 주면 됩니다. 그런데 만약 선언할 변수가 많은 경우에는 Dim a,b,c 처럼 쉼표를 기준으로 여러개의 변수를
동시에 선언할 수도 있습니다.

하지만 이런식으로 Dim a,b,c 와 같이 의미없는 변수를 선언하는 것은 좋지 않습니다. 당장은 편해서 좋을 것 같지만,
시간이 흐른 뒤 자신이 작성한 소스를 보게 되었을 때 이것이 어떤 변수인지 햇갈릴 수 있기 떄문입니다.

그러므로 변수의 이름은 '규칙'에 따라서 의미가 통하는 명확한 이름으로 주는 것이 좋습니다.

제가 사용하고, 또한 추천해 드리고 싶은 방법은 다음과 같습니다. 예를 들어서 '이름'이 들어가는 변수라면, Dim strName 과 같이
사용하는 것입니다. name은 이름을 의미하는 단어이고, 앞에 붙는 str 이라는 것은 문자열을 의미하는 string의 약자입니다.
즉, strName 이라고 한다면 '이름을 의미하는 문자열'이 되지요. 만약 번호를 의미하는 변수라면? 그때에는 '정수'를 의미하는
'integer'와 번호를 의미하는 'number'를 합쳐서 intNumber 와 같은 방식으로 사요아면 되겠지요. (이것을 헝가리안 표기법 이라고 한다)


변수 선언에 대한 또 한가지 이야기를 하겠습니다. 대부분의 다른 프로그램(C 나 C++,JAVA등) 에서는 선언하지 않은 변수를
사용하거나 , 정확하게 사용되지 않은변수를 사용하면 오류가 발생합니다. 하지만 ASP는 조금 특별하게도, 기본적으로 변수 선언을
하지 않고 변수를 사용해도 오류를 발생시키지 않습니다. (물론 오류가 발생하게끔 옵션을 수정할 수도 있습니다..)


===================

2.Set

-Set은 '개체의 인스턴스'를 생성할 때 사용하는 명령어 입니다. 개체(Object)라.. 개체란 과연 무엇일까요? 
어렵게 생각하실 것 없습니다. 그냥 여러분들께서 알고 계신 개체의 뜻 그대로 입니다. 
우리 주변에서 쉡게 접할 수 있는 컴퓨터, 의자, 책상 , 핸드폰 등이 모두 개체라는 말이지요. 이 중에서 '핸드폰'의 예를 
들어보겠습니다.

1.핸드폰은 다른 사람과 통화를 하기 위한 도구입니다.
2.내 핸드폰으로는 사진도 찍을 수 있고, 화음도 끝내줍니다.

1번에서 말하는 핸드폰과 2번에서 말하는 핸드폰의 의미는 조금 다른데요. 1번에서 말하는 핸드폰이 일반적으로 통칭해서 쓰이는
의미의 핸드폰(보통명사)이라면, 2번에서 말하는 핸드폰은 누구의 것인지 알 수 있는 구체적인 의미의 핸드폰(고유명사)입니다.

우리는 1번에서 말하는 통합된 의미의 핸드폰을 '개체(Object)'라고 하며 , 2번에서 말하는 - 실제로 사용 가능한 - 핸드폰을 
'개체의 인스턴스(Instance)'라고 합니다. 즉 개체(Object)는 추상적인 의미이며, 직접 사용할 수는 없는 존재고요.
그에 반해 인스턴스(Instance)는 구체적이며 직접 사용할 수 있는 존재라는 뜻이 되겠습니다.


핸드폰을 설명하기 위해서는 핸드폰의 특징에 대해서 이야기를 해야 할 것입니다.

위에서 언급한대로 색깔, 크기 , 무게, 버튼의 갯수, 액정의 유무... 등을 말이지요. 이런 사항들은
핸드폰이라면 되겠습니다. 또한 속성은 사용될 때에 이름과 값, 한 쌍으로 표현이 됩니다.

개체에 관하여 생각해 보아야 할 내용이 하나 더 있습니다. 
우리는 핸드폰으로 어떤 일들을 할 수 있을까요? 네... 누군가에게 전화를 걸 수도 있고 , 전화를 받을 수도 있습니다.

이처럼 어떤 개체가 수행할 수 있는 작업을 메소드(Method)라고 합니다. 속성과 마찬가지로 핸드폰이라면
기본적으로 실행할 수 있어야 하는 기능이지요. 이 메소드라는 것은 '개체 내에서 사용되는 전용 함수'라고 말씀드릴 수 있겠습니다.
함수이므로 어떤 함수냐에 따라 인자가 필요할 수도 있습니다.

예를 들어 '전화 걸기'라는메소드가 있고, '전화 받기'라는 메소드가 있다고 가정하겠습니다.
전화를 받을 때에는 폴더를 열거나, 통화 버튼만 누르면 되므로 인자가 특별히 필요 업습니다만,
'전화 걸기'메소드를 실행하려 할때에는 걸어야 할 '전화 번호'가 필요하게 됩니다. 이처럼 메소드에서는 
인자가 필요할 수도 있고 , 필요 없을 수도 있습니다.

자.. 개체의 대한 이야기는 여기서 일단 마무리를 짓겠습니다. 앞으로 계속 만나게 될테니 그떄마다 조금씩 
설명을 하도록 하겠습니다.

[개체 사용 방법 소스]

Dim myPhone
Set myPhone = Server.CreateObject("Telephone.Handphone")

myPhone.color = "white";
myPhone.number = "011-9971-88XX"

myPhone.call("02-584-88XX")
myPhone.hangup()

Set myPhone = Nothing



1번째 줄에서는 먼저 앞으로 사용될 myPhone 이라는 변수를 선언해 놓았습니다. 그리고
2번째 줄에서는 Server.CreateObject라는 특별한 메소드를 사용하여 "Handphone 개체의 인스턴스"를 만들어서
myPhone 이라는 변수에 저장하였습니다. 

개체(Object)는 추상적인 의미라는 말씀을 윗 부분에서 알려 드렸습니다. 그렇기 때문에, Handphone 개체를 우리 프로그램에서
직접 가져다 사용할 수는 없고 '인스턴스(Instance)'를 만들어서 그것을 변수에 저장하여 사용하는 것입니다. 이처럼 '개체의 인스턴스'
를 만들어서 변수에 저장할 떄에사용하는 구문이 바로 Set 구문이 되겠습니다.

3번과 4번 줄은 속성(Property)에 값을 할당하는 구문이 되겠습니다. 속성은 사용될 때에 이름과 값, 한 쌍으로 표현이 된다는 
말씀을 위에서 드렸었는데,그 내용이 바로 이 부분의 내용이 되는 것입니다. 보시는 것처럼 myPhone의 color 속성에는 "white"라는
값을 넣었으며, myPhone의 number 속성에는 "011-9971-88XX"라는값을 넣은 것입니다. 

그리고 5,6번 줄은 메소드(Method)를 실행하는 구문이 됩니다.
5번 줄은 call 이라는 메소드를 사용하여 전화를 거는 작업을 수행합니다. 
전화를 걸때는 '전화번호' 가 있어야 하므로, 인자로 "02-584-88XX" 번을 입력했으며, 
이 구문을 통해 제 핸드폰은 02-584-88XX 번으로 전화를 걸기 시작합니다. 
6번 줄은 전화를 끊는(hangup) 구문이 되겠습니다. 
끊을 때에는 특별한 인자가 필요하지 않으므로인자를 넘겨주지 않았습니다.

그리고 모든 작업을 완료한 다음에는 더이상 핸드폰이 필요하지 않으므로, 
7번의 Set myPhone = Nothing이라는 구문을 사용하여 개체의 인스턴스인 myPhone을 메모리에서 해제합니다.
'myPhone'을 더 이상 쓰지 않는다고 알려주는 것이지요.



===================

3.IF ~ THEN


IF intNumber = 1 THEN
    Response.Write "intNumber 에 들어있는 수는 1입니다!"
ELSEIF intNumber = 2 THEN
    Response.Write "intNumber 에 들어있는 수는 2입니다!"
ELSEIF intNumber = 3 THEN
    Response.Write "intNumber 에 들어있는 수는 3입니다!"
ELSE
    Response.Write "intNumber 에 들어있는 수는 1,2,3 이 아닌 다른 숫자입니다!"
END IF


===================

4. SELECT CASE

SELECT CASE intNumber
CASE 1
    Response.Write "intNumber 에 들어있는 수는 1입니다!"
CASE 2
    Response.Write "intNumber 에 들어있는 수는 2입니다!"
CASE 3
    Response.Write "intNumber 에 들어있는 수는 3입니다!"
CASE 4
    Response.Write "intNumber 에 들어있는 수는 4입니다!"
CASE 5
    Response.Write "intNumber 에 들어있는 수는 5입니다!"
CASE 6
    Response.Write "intNumber 에 들어있는 수는 6입니다!"
CASE 7,8,9
    Response.Write "intNumber 에 들어있는 수는 7,8,9 중 하나입니다!"
CASE 10
    Response.Write "intNumber 에 들어있는 수는 10입니다!"
CASE ELSE
    Response.Write "intNumber 에 들어있는 수는 1부터 10 사이의 정수가 아닙니다."
END SELECT


===================
5. FOR ~ NEXT

DIM intLoop
FOR intLoop = 1 TO 10000 STEP 1
    Response.write intLoop & "<BR>"
NEXT


FOR 시작 TO 끝 STEP증가
    반복되어 실행될 구문
NEXT


===================

6. DO WHILE


DIM intLoop
intLoop = 1
DO WHILE intLoop <= 10000
    Response.write intLoop & "<BR>"
    intLoop = intLoop + 1
LOOP




























































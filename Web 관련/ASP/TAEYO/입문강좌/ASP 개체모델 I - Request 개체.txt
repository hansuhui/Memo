ASP 개체모델 I - Request 개체


Request 개체가 하는주요 업무는 클라이언트(사용자)가 서버로 정보를보낸 다음
'클라이언트(사용자) 웹 브라우저가서버로 전달한 값을 검색'하는 일이  되겠습니다.

여기서 중요한  것은 '전달한 값들의검색은 누가 하는가' 인데요
정답은 '서버'입니다. 클라이언트가 보내준 정보를 서버측면에서 검색하는 것이지요.


서버의 입장에서 봤을 때 '클라이언트들이 보내온 정보를 검색할 때 사용하는 개체'.
이것이 바로 Request 개체인 것입니다.

이 Request 개체에는 5개의 컬렉션과 1개의 속성 ,1개의 메소드가 존재합니다.
속성과 메소드라는 단어는 이전에 언급한 적이 있었지만... 컬렉션이라는 단어가 조금 낯설군요...

컬렉션이라는 녀석은 예전에 배웠던 '배열'과 상당히 유사하다고 생각하시면 됩니다.
컬렉션과 배열의 차이점이라면.. 배열은 '인덱스번호/데이터' 한 쌍을 사용하지만,
컬렉션은 '이름/데이터'형식의 한 쌍을 사용한다는 점입니다.

컬렉션과 배열의 차이에 대해 이해하기 쉽도록 애를 들어보다면 

배열 : 배열이름(인덱스) = 데이터 ex) arrResult(0) = "김덕영"
컬렉션 : 컬렉션이름(이름) = 데이터 ex) Request.QueryString("name") = "김덕영"





[Request 개체의 멤버들]

1.컬렉션(Collection)



1.1 QueryString 컬렉션

Request 개체 중에서 가장 많은 사용 빈도수를  자랑하는 컬렉션이며,
<FORM> 태그 안에 있는 모든 HTML 컨트롤 요소들의 값을저장하는 컬렉션입니다.
(이때 FORM 태그의 METHOD는 GET 방식이어야 합니다.)
또한 URL의 뒤에 '이름/데이터'형식으로 전달되는 값들을 지정하는 역할도 합니다.

예를 들어 다음 URL을 주소창에 입력했다고 가정해 보겠습니다.
http://www.dukyoung.net/test.asp?first=kim&second=dukyoung

이 경우...
Requset.QueryString("first") 에는 "kim"이라는 값이 저장되며,
Request.QueryString("second") 에는 "dukyoung" 이라는 값이 저장됩니다.


-----------------------------------------

1.2 FORM 컬렉션

QueryString 과 함께 가장 많이 사용되는 FORM 컬렉션은, QueryString과 마찬가지로
<FORM>태그 안에 있는 모든 HTML 컨트롤 요소들의 값을 저장하는 컬렉션입니다.
(하지만 FORM 태그의 METHOD는 반드시 POST 방식이어야만 합니다.)

QueryString 컬렉션처럼 주소(URL)뒤에 '이름/데이터' 형식으로 값을 전달하여 저장하는 방식을
사용할 수 없다는 것이 QueryString 컬렉션과의 또 하나의 차이점이 되겠네요.

-----------------------------------------


1.3 Cookies 컬렉션

이 컬렉션은 지난 시간에 잠깐 언급했던 '쿠키'와 관련된 컬렉션입니다.
웹서버는 클라이언트(사용자)들의컴퓨터에 txt 파일 형식의 정보를 저장할 수 있습니다.
Request 개체의 Cookies 컬렉션은 이렇게 사용자 컴퓨터에 저장된 
클라이언트의 정보를 읽어오는 역할을 담당합니다.


쿠키 저장 장소를알고 싶으시다면 일단 인터넷 익스플로러를 띄우시고요.
상단 메뉴 중 '도구 -> 인터넷 옵션 -> 설정 -> 파일 보기' 를 클릭하시면 됩니다.
혹시 어디인지 잘 모르시겠다면 다음 그림을 참고하시면 되겠습니다.


그럼 정리하겠습니다. 사용자의 컴퓨터에 저장된 쿠키 정보를 서버측에서 
검색할 때 사용되는 컬렉션이 바로 Cookies 컬렉션이 되겠습니다.


-----------------------------------------


1.4 ServerVariabies 컬렉션

이 컬렉션은 클라이언트(사용자)가 서버로 값을 전달할 때 자동적으로 함께 전달되는 HTTP 헤더값들과, 웹 서버 자체의
몇 가지 환경 변수 값들을 저장합니다.


Request.ServerVariables("속성")



-----------------------------------------

1.5 ClientCertificate 컬렉션


가끔 어떤 사이트에 들어가보면 '인증', '보안' 어쩌구하는 사이트들을 만나실 수가 있습니다.
그 사이트들의 주소를 유심히 보면 주소 'http://' 가 아닌 'https://'로 시작하는데요.
이 사이트들은 아무나 들어오지 못하게 하기 위한 '사용자 인증 요구'를 하게 됩니다.
이때 클라이언트의 브라우저에서는 서버로 지정된 인증 필드들을 전송하게 되는데, 이 정보들이 저장되는 콜렉션이
바로 ClientCertificate 콜렉션 입니다.




===============================================

2.속성(Property)

2.1 TotalBytes 속성

Request 개체의 TotalBytes 속성은 '클라이언트(사용자)에서 서버로 보낸 정보 안에 있는 바이트의 전체 개수에대한 정보'를 제공합니다.

하지만 일반적으로 서버에서는 '전체 요청 문자열이 총 몇개인데?' 보다는
'어떤 값들이 어떤 컬렉션으로 넘어왔는데?'라는 질문이 더욱 중요하기 때문에..
이 속성은 ASP 페이지에서  사용되는 경우가 드문 편에 속하게 됩니다.
하지만 사용법은 상식 선에서 알아두는 것이 좋겠지요.


<%
    Dim intCount
    intCount = Request.TotalBytes
%>




===============================================

3.메소드(Method)

3.1 BinaryRead(Count) 메소드

BinaryRead 메소드는 <FORM>에서 POST 방식으로 정보를 전달할 때,
count 바이트 만큼의 데이터를 읽어들이는 역할을 합니다.
따라서, 이 메소드는 Request.Form 컬렉션과 부딪히는 경향이 있습니다.

만약 Request.Form 컬렉션을 참조했다면 BinaryRead 메소드는 사용할 수 없습니다.
또한 반대로 BinaryRead 메소드를 먼저 사용했다고 한다면, 짐작하시는 대로 Request.Form 컬렉션은 사용을 할 수 없게 됩니다.
이 메소드도 사용할 일이 많지는 않지만, 상식으로 사용 방법을 알아두시면 좋겠습니다.



<%
    Dim strData, intCount

    intCount = Request.TotalBytes
    strData = Request.BinaryRead(intCount)
%>





마지막으로 컬렉션에 대한 Tip 을 하나 드리자면...
Request 개체에는 특수 기능이 있는 까닭에, 컬렉션의 이름은 모두 생략 가능합니다.
예를 들어서, Request.QueryString("count") 를 Request("count") 로 사용할 수 있으며,
마찬가지로 Request.Form("count") 도 Request("count") 로 사용 가능합니다.


방금의 경우처럼 Request.QueryString("count") , Request.Form("count") 에 
각각 다른 값이 있는데 Request("count") 라고 사용했을 경우, 어떻게 될까요?

정답은! 'QueryString' 컬렉션에 있는 값이 우선권을 가진다. 입니다.
Request("count") 라고 했을 경우 Request 개체는 자체적인 우선 순위를 적용하여,

QueryString > Form > Cookies > ClientCertificate > ServerVariables

의 순서대로 검색을 하게 됩니다. 따라서 QueryString 안에 있는 값으로 인식하게 됩니다.





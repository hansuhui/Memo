[레코드셋 내에서의 데이터 검색과 필터링]


Find 메소드는 ASP에서 그다지 사용되어지는 속성은 아니지만, 그런대로 쓸만한 기능을 가진 메소드입니다.
이 메소드는 레코드셋 내에서 우리가 필요한 데이터를 찾기 위해 사용되어질 수 있는 메소드로 마치 결과 데이터 안에서
다시 한번 쿼리의 where 절을 수행하는 것과 같은 결과를 얻어낼 수 있지요.

이 구문의 형식은 다음과 같습니다.

Rs.Find Criteria, SkipRecoreds,SearchDirecion, Start

이 메소드의 첫 번째 인자를 제외하고는 나머지 인자는 지정되는 경우가 적은 편이지만, 각각의 인자를 간략히 설명하면 



======================================

{Criteria}

찾고자하는 데이터의 비교표현이 들어가는 곳입니다. 일반 SQL 쿼리에서 Where 절안의 내용과 일치한다고
보면 되겠네요. 예를 들면, 이 인자로는 다음과 같은 표현들이 사용될 수 있습니다.
"title_id='어쩌고'"
"price=20"
"title_id like'Cooking%'"


{SkipRecords}

시작위치에서 어느정도의 레코드를 지나친 뒤에 검색을 시작할 것인지 그 수를 지정.

{SearchDirection}

검색을 진행할 방향 adSerchForward를 지정하면 내리 검색을 하게되고, adSearchBackWard로 지정하게 되면
역으로 밑에서부터 검색을 시작하게 합니다. 둘 중에 하나의 인자를 사용할 수 있으며 기본값은 adSearchForward 입니다.

{Start}

검색을 시작할 위치를 지정합니다.


======================================

하지만, 이 Find 메소드는 레코드셋내의 모든 데이터를 검색하지는 않으며, 
조건에 맞는 데이터를 찾는 순간 검색을 그곳에서 멈추고, 
커서의 위치를 그 레코드에 두게 됩니다. 이를 이해하기 위해서는 역시나 
간단한 예제를 하나 해 보면 쉽게 이해를 할 수가 있는데, 
다음 예제는 titles 테이블에서 business 타입의 책들을 쿼리 명령으로 가져와서, 
그 결과 레코드셋 내에서 Find 메소드를 사용해서 가장 먼저 찾아지는 가격이 10 달러 이하인 책의 제목과 가격을 출력하는 예입니다


[Find.asp]

<!--METADATA TYPE= "typelib" NAME= "ADODB Type Library"
    FILE="C:\Program Files\Common Files\SYSTEM\ADO\msado15.dll" -->
<%
Option Explicit

Dim strConnect, sql
Dim Rs

strConnect ="Provider=SQLOLEDB.1;Data Source=TAEYO;Initial Catalog= pubs;User ID=sa;Password="
Set Rs= Server.CreateObject("ADODB.RecordSet")
SQL = "Select title, price from titles where type = 'business'"
Rs.open SQL,strConnect, adOpenStatic,adLockReadOnly, adCmdText

Rs.Find "price < 10" 

If Rs.EOF then
    Response.Write "요청하신 조건에 맞는 데이터가 없습니다"
Else
    Response.Write "제목 : " & rs(0) & "<br>"
    Response.Write "가격 : " & rs(1) & "<p>"
End if

Rs.Close
set Rs = nothing
%>


일단, 소스중에서 레코드 셋의 커서타입을 adOpenStatic 으로 지정한 것에 주목해야 하는데, 일부 데이터 제공자는
adOpenForward 로 오픈한 레코드셋의 경우 Find 메소드를 지원하지 않기 떄문입니다.

고로, Find 메소드를 사용하기 위해서는 반드시 adOpenStatic 으로 레코드셋을 오픈하여야 합니다.

그리고, If Rs.EOF then 부분도 관심있게 바라보도록 하세요. Find 메소드로 내리검색을 할 경우에는 만일, 
그 검색에 대한 결과가 없을 경우 EOF 가 True를 리턴 해주게 됩니다. 
반대로, 밑에서 위로 검색할 경우 검색결과가 나오지 않는다면 BOF 가 True를 리턴해 주게 되고 말이죠.

해서 우리는 위의 경우 EOF 값을 체크함으로써 검색결과가 없을 경우에는 
"요청하신 조건에 맞는 데이터가 없습니다"라는 문자열이 출력하게끔 구성해 놓은 것을 볼 수가 있을 것입니다.
(물론, 그런 결과는 만나지 못하겠지만.. ^_______^)

Find 메소드가 우리가 원하는 데이터를 찾아주는 역할을 한다면, 
그 부분에 대해서는 필터링도 같은 입장이랍니다. 하지만, Find 는 우리가 지정한 레코드를 찾을 때까지만 
검색하는 반면, 필터링은 레코드셋 안의 모든 레코드를 검색하여 우리가 지정한 조건에 맞는 
레코드들만을 뽑아낼 수 있게 하는 속성이지요.

더욱 원활한 이해를 위해서 먼저 쉬운 예제를 테스트 해보고 마저 이야기를 나누어 보도록 하자구요.



[Filter.asp]

<!--METADATA TYPE= "typelib" NAME= "ADODB Type Library"
    FILE="C:\Program Files\Common Files\SYSTEM\ADO\msado15.dll" -->
<%
Option Explicit

Dim strConnect
Dim Rs

strConnect = "Provider=SQLOLEDB.1;Data Source=TAEYO;Initial Catalog= pubs;User ID=sa;Password="
Set Rs = Server.CreateObject("ADODB.RecordSet")

Rs.open "titles", strConnect, adOpenStatic, adLockReadOnly, adCmdTable
Rs.Filter = "price < 15" 

Response.Write "<b>*** 레코드셋에서 price < 15 로 필터링 하였습니다. ***</b><p>"

If Rs.EOF then
    Response.Write "요청하신 조건에 맞는 데이터가 없습니다"
Else
    Response.Write "<table width=500>"
    Response.Write "<tr><td>제목</td><td>가격</td></tr>"
    Do until Rs.EOF
        Response.Write "<tr><td>" & rs("title") & "</td>"
        Response.Write "<td>" & rs("price") & "</td></tr>"
        Rs.MoveNext
    Loop
    Response.Write "</table>"
End if

Response.Write "<p><b>*** 레코드셋에서 필터링을 제거했습니다. ***</b><p>"

Rs.Filter =adFilterNone

Response.Write "<table width=500>"
Response.Write "<tr><td>제목</td><td>가격</td></tr>"
Do until Rs.EOF
    Response.Write "<tr><td>" & rs("title") & "</td>"
    Response.Write "<td>" & rs("price") & "</td></tr>"
    Rs.MoveNext
Loop
Response.Write "</table>"

	Rs.Close
	set Rs = nothing
%>



이번 예제에서는 pubs 데이터베이스의 titles 테이블의 모든 데이터를 일단 레코드셋에 담아보았습니다. 
그리고, 책의 가격이 15불 이하인 책만으로 다음과 같이 필터링을 한 것을 볼 수가 있을 것이구요.

Rs.open "titles", strConnect, adOpenStatic, adLockReadOnly, adCmdTable
Rs.Filter = "price < 15"

이제 레코드셋은 필터링이 되어져서 가격이 15불 초과인 책들은 숨겨지게 되며, 
15불 이하인 책들만이 레코드셋에서 보여지게 됩니다. 해서, 
그 이후의 소스를 보면 그 필터링의 결과가 제대로 나오는지를 확인하기 위해서 
루프를 돌면서 각각의 데이터를 출력하고 있는 것을 볼 수 있을 것입니다.

그리고, 그 루프가 끝난 다음에는 다음과 같은 코드를 사용해서 필터링을 없애고, 
모든 데이터를 다시 레코드셋에서 보이게 하는 것을 볼 수가 있습니다.

Rs.Filter = adFilterNone

레코드셋의 Filter 속성으로는 여러분이 원하는 검색조건을 사용하면 되지만, 
그 조건외에 다음과 같은 상수들을 지정할 수도 있어요.각각의 상수 값과 상수의 역할을 표로 정리해 보았습니다.

===================상수 값과 상수의 역할===================

adFilternone / 현재 지정된 필터를 없애고, 모든 레코드를 보이게 한다.

adFilterPendingRecords / 변경내용이 아직 데이터스토어로 전달되지 않은 레코드들을 보여준다.
			 단, 이기능은 배치업데이트 모드에서만 적용된다.

adFilterAffectedRecords / 마지막 Delete, ReSync, UpdateBatch 등의 호출로 영향을 받은 레코드들만을 보여준다.


adFilterFetchedRecoreds  / 데이터를 가져오는 마지막호출에 의해 만들어진 레코드들을 보여준다.


=========================================================

이들은 각각 비교적 간단한 Find 메소드와 Filter 속성의 사용 예이었습니다. 하지만, ASP 페이지에서의
사용빈도가 그다지 많지 않은 이유는 원하는 데이터를 찾기 위해서 쿼리의 수행을 하고, 거기에 Find나 Filter를 통해서
재 검색을 시도하는 것은 이유없이 서버의 성능만을 저하시킬 뿐이기 떄문이지요. 차라리 그럴바에는 한번의 쿼리를
원하는 데이터를 얻어올 수 있도록 구성하는 것이 더 효율적입니다. 하지만, 가져온 데이터를 재 정렬하면서 출력해
줄 필요성이 있다거나 하는 특별한 경우에는 오히려 유리함을 제공할 수도 있습니다.

예를 들면, 가져온 목록들을 가,나,다 순으로 큰 분류를 나누어 출력하고자 할 경우에 유리합니다.
그럴 경우, 각각의 쿼리를 던져 데이터를 가져오기 보다는 필터링을 통해서 각각의 데이터를 가,나,다 순으로 필터링하여
출력하는 것이 성능의 향상을 가져올테니 말이지요

또한, 웹이 아닌 환경의 레코드셋 내에서라면 이 방법들은 효율적으로 사용될 수 있습니다. 굳이 이미 원하는 데이터가 들어있는
레코드셋 내에서 특정데이터를 재 검색하기 위해서 다시 서버를 갔다와야 할 필요성은 없으니 말이죠. 이들을 적절히 사용할만한
곳을 찾는 것도 여러분의 능력입니다. 진정한 내공의 상승은 여러 지식을 여러분 머리 속에서 정리한 뒤, 적절한 곳에서 
사용할 줄아는 데에 있으니 말입죠....

그러면 먼저 로직을 이해하기 위해서 알파벳순으로 출력하는 예제를 먼저 해보고자 하는데, 이 예제는 모든 직워의 데이터를
레코드셋에 가져온 다음, 그 안에서 각각의 사원의 이름들을 알파벳 순으로 나열하는 예이랍니다.

이를 구현할 경우는 필터링을 사용하는 것이 여러 번의 쿼리를 사용하여 목록을 얻어오는 것보다 효과적이기에 이 예를 한번
살펴보고자 합니다. 모든 데이터를 레코드셋으로 가져온 다음, 필터를 A,B,C 순으로 반복해서 필터링을 걸어 각각에 맞는 데이터만을
출력한다면 효과적으로 알파벳 순의 목록을 얻어낼 수가 있을 것입니다.



[Filter_list.asp]

<!--METADATA TYPE= "typelib" NAME= "ADODB Type Library" 
    FILE="C:\Program Files\Common Files\SYSTEM\ADO\msado15.dll" -->
<%
Option Explicit

Dim strConnect, SQL
Dim Rs
Dim char, alphabet

strConnect = "Provider=SQLOLEDB.1;Data Source=TAEYO;Initial Catalog= pubs;User ID=sa;Password="
Set Rs = Server.CreateObject("ADODB.RecordSet")

SQL = "select lname, fname from employee"
Rs.open SQL, strConnect, adOpenStatic, adLockReadOnly, adCmdText
%>
<html><body>
<%
For char = 65 to 90
    alphabet = Chr(char)
    Rs.Filter = "Lname like '" & alphabet & "%'"

    Response.Write "<table width=500>"
    Response.Write "<tr><td><h3>" & UCase(alphabet) & "</h3></td></tr>"
    if Rs.EOF then
        Response.Write "<tr><td>그런 성을 가진 사람은 없습니다</td></tr>"
    else
        Response.Write "<tr><td>"
        Do until Rs.EOF
            Response.Write rs(0) & "(" & Rs(1) & ") , "
            Rs.MoveNext
        Loop
        Response.Write "</td></tr>"
    End if 
    Response.Write "</table><br>" 
next

Rs.Close 
set Rs= nothing
%>
</body></html>



소스중의 핵심은 각각의 알파벳 순으로 루프를 돌리며, 그 값을 필터링에 거는 다음 부분입니다.

For char= 65 to 90 
    alphabet = Chr(char)
    Rs.Filter = "Lname like '" & alphabet & "%'"


알파벳의 아스키 코드는 65번부터 시작합니다. 그렇기에 우리의 루프는 65에서부터 시작하며, 
매번 그 값을 Chr() 함수로 알파벳으로 바꾸어주어 그 값으로 필터링을 거는 것을 볼 수가 있슴다. 
필터링 후,필터링된 데이터들을 출력한 뒤, 다시 그 다음 알파벳으로 필터링 걸어 'Z'까지
계속적으로 필터링을 거는 것을 볼 수가 있을 것임다.

위의 소스를 이해하는 것은 그다지 어렵지 않을 것이라고 생각합니다. 하지만, 한글의 경우라면?

대단히 많은 질문을 받는 것중에 하나가 데이터들을 ㄱ,ㄴ,ㄷ 순으로 배치하고 싶다는 것이었어요.
이것도 마찬가지로 필터링을 걸면 해결이 가능한데 문제는 어떻게 데이터베이스에서 ㄱ,ㄴ,ㄷ에 각각 맞는 데이터를
가져올 것인가입니다. 이것은 예상외로 간단하답니다.

다른 데이터베이스에서라면 장담할 수 없지만 SQL 서버 7.0 기준이라면 ㄱ으로 사작하는 모든 데이터를 가져오기 위해서는
다음과 같은 쿼리를 사용하면 되죠.

Select * from 테이블 where name >= '가' and name < '나'

이를 힌트로 여러분들은 각각의 자음에 맞는 데이터를 가져올 수 있을 것입니다. 문제는 ㅎ 부분인데, 이부분도 다음과 같이
쿼리를 사용하여 가져올 수 있어요.

Select * from 테이블 where name >= '하' and name < '힣'\

그렇다면, 이런 로직을 사용하여 여러분의 데이터를 ㄱ,ㄴ,ㄷ, 순으로 출력할 수 있을 것입니다.


[ilter_korean.asp]

<!--METADATA TYPE= "typelib" NAME= "ADODB Type Library" 
    FILE="C:\Program Files\Common Files\SYSTEM\ADO\msado15.dll" -->
<%
Option Explicit

Dim strConnect, SQL
Dim Rs
Dim korean, startChar,endChar, criteria,i

strConnect = "Provider=SQLOLEDB.1;Data Source=TAEYO;Initial Catalog= pubs;User ID=sa;Password="
Set Rs = Server.CreateObject("ADODB.RecordSet")

SQL = "select name from test_member"
Rs.open SQL, strConnect, adOpenStatic, adLockReadOnly, adCmdText
%>
<html><body>
<%
korean = "가나다라마바사아자차카타파하힣"

For i = 1 to 14
    startChar = mid(korean,i,1)
    endChar = mid(korean,i+1,1) 

    criteria = "name > = '" & startChar & "' and name < '" & endChar & "'"
    Rs.Filter = criteria

    Response.Write "<table width=500>"
    Response.Write "<tr><td><h3>" & startChar & "</h3></td></tr>"
    if Rs.EOF then
        Response.Write "<tr><td>그런 성을 가진 사람은 없습니다</td></tr>"
    else
        Response.Write "<tr><td>"
        Do until Rs.EOF
            Response.Write rs(0) & " , "
            Rs.MoveNext
        Loop
        Response.Write "</td></tr>"
    End if
    Response.Write "</table><br>"
next	

Rs.Close
set Rs = nothing
%>
</body></html>





한글이라는 특성 때문에 미리 korean 이라는 변수에 "가나다라마바사아자차카타파하힣" 라는 문자들을 담아두었으며, 
이곳에서 Mid 함수를 사용해서 검색을 시작하려는 글자와, 그 다음 글자를 각각 뽑아내어 
startChar과 endChar 이라는 변수에 담은 것을 볼 수가 있을 것이구요.

그리고, 이 루프를 14번 반복하여 ㄱ부터 ㅎ 까지 관련 이름들을 모두 뽑아오는 것을 볼 수 있습니다. 
Mid 함수의 사용법과, 쿼리의 제작만을 신경쓴다면 이 부분도 그리 어려울 것이 없을 것이며,  
이것은 여러분이 음반관련 사이트나 영화관련 사이트를 운영한다면 꽤나 도움이 될만한 소스일지도 모르겠네요.

필터링은 ASP 페이지에서 위와 같은 경우 도움이 되어줄 것입니다.






























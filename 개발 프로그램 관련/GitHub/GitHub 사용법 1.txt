https://github.com/tadkim/infra/wiki/GitHub-::-%EA%B9%83%ED%97%88%EB%B8%8C-%EC%82%AC%EC%9A%A9%EB%B2%95-1


[Chapter 1. Git과 Github의 이해]

- Git 
Git은 분산 버전 관리 시스템이다. 
Git으로 프로젝트를 개발하는 사람은 모두 현재 상태의 파일뿐만 아니라 그 프로젝트의 전체 이력을 가지고 
있게 된다는 뜻이다.

- 버전관리 시스템: 파일의 변경 내역을 계속 추적하도록 개발된 소프트웨어

- GitHub
GitHub는 Git 저장소(repository)를 업로드 할 수 있는 웹사이트를 말한다.
GitHub는 다른 사람들과의 협업을 매우 용이하게 해준다.

리포지토리를 공유할 수 있는 중앙저장소
웹 기반 인터페이스
forking
pull requests
issues
wikis

Github는 위와 같은 기능을 제공하여 팀원들과 보다 효율적으로 변경안을 구체화하고 토른하며
검토할 수 있게 해준다.


[Git의 장점]


본질적으로 깃의 사용은 1인 프로젝트를 진행하는 사람에게도 다양한 가치가 있다.

변경취소 가능 : 실수 했을 때 구 버전의 작업 파일로 돌아갈 수 있음.

모든 변경에 대한 완벽한 이력 History : 짧게는 하루, 길게는 1년 전에 프로젝트가 어떤 형태였는지도 알 수 있다.

변경한 이유를 기록 : 협업을 하다보면(때로는 내가 작성한 코드라할지라도) 왜 변경했는지 모르겠을 때가 많다. 
이때 Git의 커밋 메시지(commit message)를 이용하면 변경한 이유를 쉽게 기록할 수 있으며, 추후에 참조할 수 있다.
변경에 대한 확신 : 이전 버전으로의 복귀가 쉽기 때문에 자신을 원하는 대로 다 변경가능한다. 
잘 안되면 언제든 이전 버전으로 복귀하면 된다.


여러 갈래의 히스토리(History) : 콘텐츠의 변경 내용을 테스트해보거나 기능을 
독립적으로 실험해보기 위해 별도의 브런치(branch)를 생성할 수 있다. 
완료되면 변경 내용을 마스터 브랜치(Master branch)로 병합할 수 있고, 잘 작동하지 않을 경우 삭제 가능하다.

충돌 해결 능력 : Git을 이용하면 여러사람이 동시에 같은 파일을 작업할 수 있다. 
Git은 대개 자동으로 변경사항을 병합할 수 있다. 그렇지 못할 경우에 충돌이 무엇인지 알려주고 이를 해결하기 쉽게 해준다.

독립된 히스토리(History) : 여러 사람들이 다른 브랜치(branch)에서 작업이 가능하다. 기능을 독립적으로 개발하고, 
완료되었을 때 그 기능을 병합할 수 있다. 

[왜 GitHub를 사용하는가?]

GitHub는 단순히 Git 저장소를 제공하는 것 이상의 가치를 제공한다.

기록요구 : Issue(이슈)를 사용해 버그를 기록하거나 개발하고 싶은 새로운 기능을 구체화할 수 있다.

독립된 히스토리(History)에 대한 협력 : branch와 pull requests를 이용해 다른 브랜치 또는 기능에 협력할 수 있다.

진행 중인 작업 검토 : pull requests 목록을 통해 현재 무슨 작업이 진행되고 있는지 모두 볼 수 있다. 
그리고 특정 pull request를 클릭하여 최근의 변경 내용과 변경에 관한 모든 논의 내용을 볼 수 있다.

팀의 작업 진척 상황 확인 : 펄스(pulse)를 훑어보거나 commit histroy를 살펴보면 팀의 작업 진척 상황을 알 수 있다.


[Git & Github 주요개념]



commit : 하나 또는 다수의 파일에 변경 내용을 저장할 때마다 새로운 commit 생성한다.

ex) ”이 변경 내용을 commit하고 이를 GitHub로 push 합시다.”

commit message : commit을 생서할 때 마다 왜 변결을 했는지에 대한 이유를 설명하는 메시지를 제공해야한다. 
이 commit message는 변경을 한 이유를 추후에 이해할 때 매우유용하다.

ex) ”새로운 SEC 가이드라인에 대한 수잔의 의견을 commit 메시지에 꼭 넣으세요.”


branch : 테스트를 해보거나 새로운 기능을 개발하기 위해 사용할 수 있는 따로 떨어진 독립적인 commit들을 말한다.

ex) “새로운 검색기능을 구현하기 위해 branch를 생성합시다.”


master branch : 새로운 Git 프로젝트를 만들 때마다 ‘master’라고 불리는 기본 branch가 생성된다. 
		배포할 준비가 되면 작업이 최종적으로 마무리되는 branch이다.

ex) “master로 바로 commit 하면 안 된다는 것을 기억하세요”


feature or topic branch : 새로운 기능을 개발할 때마다 작업할 브랜치를 만드는데, 이를 feature branch라고 한다.

ex) “feature branch가 너무 많습니다. 이들 중 하나나 두개를 완료해서 출시하는데 주력합시다.”


release branch : 직접 QA(품질보증) 작업을 하거나 고객의 요구로 구 버전의 소프트웨어를 지원해야 한다면 모든 수정이나 
업데이트를 위한 장소로 release branch가 필요하다. feature branch와 release branch는 기능적 차이는 없지만, 
팀월들과 프로젝트에 대해 이야기할 때 확연히 구별할 수 있어 유용하다.

ex) “release branch 전체에 대한 보안 버그를 수정해야 합니다.”

Merge : 병합(merge)은 한 branch에서 완성된 작업을 가져와 다른 branch에 포함하는 방법이다. 
흔히 feature branch를 master branch로 merge한다.

ex) “‘내 계정’기능이 훌륭합니다. 배포할 수 있게 master로 merge 해줄 수 있습니까?”

Tag : 특정 이력이 있는 commit에 대한 참조. 어떤 버전의 코드가 언제 배포(release)되었는지 정확히 
알 수 있도록 제품 배포 기록에 가장 자주 사용된다.

ex) “이번 배포판에 tag를 달고 출시합시다.”

Check out : 프로젝트 history의 다른 버전으로 이동해 해당 시점의 파일을 보기 위해 ‘checkout’ 한다. 
가장 일반적으로 branch에서 완료된 작업을 모두 보기 위해 branch를 checkout하지만, commit도 checkout할 수 있다.

ex) ”최종 릴리즈 태그(release tag)를 checkout 해주시겠어요? 제품에 버그가 있어서 검증하고 수정해야 합니다.”

Pull request : 원래 pull request는 branch에서 완료된 작업을 다른 사람이 리뷰하고 master로 merge요청을 하기 위해 사용되었다. 
요즘은 개발 가능한 기능에 대한 논의를 시작하는 초기 단계에서 자주 사용한다.

ex) “다른 팀원들이 어떻게 생각하는지 알 수 있게 새로운 투표 기능에 대한 pull request를 만드십시오.”

Issue : GitHub는 기능에 대해 논의하거나 버그를 추적하거나 혹은 두 가지 경우 모두 사용될 수 있는 Issue라는 기능을 갖고 있다.

ex) “당신이 옳아요, 아이폰에서는 로그인이 도지 않네요. 버그를 검증하기 위한 단계를 기록하면서 GitHub에 issue를 생성해 주시겠습니까?”

Wiki : Ward Cunningham이 최초로 개발하였다. wiki는 링크들 간을 연결해 간단하게 웹페이지를 만드는 방법이다. 
GitHub 프로젝트는 문서 작성에 자주 Wiki를 사용한다.

ex) “복수의 서버에서 작동하게끔 프로젝트 환경 설정 방법을 설명하는 페이지를 추가해 주시겠습니까?”

Clone : 종종 로컬로 작업하기 위해 프로젝트 복사본을 GitHub에서 다운로드 한다. 
repository를 사용자의 컴퓨터로 복사하는 과정을 복제(cloning)라고 한다.

ex) “repository를 clone하고, 버그를 수정한 다음 오늘 밤 수정본을 다시 GitHub로 push 해주시겠습니까?”

Fork : 때로는 프로젝트를 직접 변경하는 데 필요한 권한을 보유하지 못할 때가 있다. 
잘 알지 못하는 사람이 작성한 오픈소스 프로젝트이거나, 회사에서 작업을 같이 많이 하지 않는 다른 그룹이 작성한 프로젝트일 수도 있다. 
그러한 프로젝트를 변경하고 싶다면 먼저 GitHub의 사용자 계정에 프로젝트 복사본을 만들어야한다. 
그 과정을 repository를 fork한다고 한다. 그런다음 복제(clone)하고, 변경하고, pull request를 이용해 
원본 프로젝트에 변경 내용을 반영할 수 있다.



[Chapter 2. 프로젝트 보기]


이 장에서는 프로젝트의 상태를 확인할 수 있는 방법을 살펴볼 것이다. 
잘 알려진 부트스트랩(Bootstrap)의 오픈 소스 프로젝트를 예제로 사용하겠다.

2.1 프로젝트 페이지소개

부트스트랩은 개발자들이 웹앱을 빠르게 개발할 수 있게 해주는 프로젝트이다. 
GitHub의 프로젝트 페이지로 이동한다. 홈페이지에 아주 많은 정보가 있지만, 먼저 가장 중요한 요소들을 살펴보자.


GitHub를 그동안 오래 보아왔지만, 눈, 별, 나무줄기(?)형태의 아이콘이 정확히 어떤의미인지는 모르고있었다.

‘눈’은 이 프로젝트에 새로운 변화가 생길 때 마다 알림을 받겠다는 뜻이다. ‘구독’정도의 의미로 이해하면 좋겠다.

‘별’은 즐겨찾기 또는 별점을 부여했다는 것이고,

‘나무줄기’는 아이콘에도 나와있지만, 이 프로젝트를 fork한 수를 의미한다.

2.2 README.md파일 보기

프로젝트의 루트에 README.md라는 파일이 있으면 그 파일의 콘텐츠가 프로젝트 홈페이지의 폴더와 파일 목록 바로 아래에 표시된다.

이 파일은 프로젝트에 대한 소개와 협력자들에게 유용한 추가 정보를 제공한다.
(소프트웨어를 어떻게 설치하는지, 자동화된 테스트를 어떻게 실행하는지, 코드를 어떻게 사용하는지, 
프로젝트에 어떻게 기여할 수 있는지 등)

요즘들어 README.md 파일은 badge도 자주 포함하는데, badge는 자동화된 test suite같이 프로젝트의 
현 상태를 알려주기 위해 사용되는 이미지다.

부트스트랩이 동작하는 두 개의 다른 프로젝트의 버전을 표시하고 있다. 또한 자동화된 테스트를 통과했고, 
종속관계(dependencies)가 업데이트 되었다는 것과, 브라우저와 운영체제의 버전을 보여주고있다.


2.3 Commit history 보기


다음으로 살펴 볼 commit history는 어떤 특정 branch에서 
작어빙 완료되었을 때 가장 최근 작업이 무엇인지 알아보는 좋은 방법이다.

이를 확인하기위해 GitHub의 부트스트랩페이지로 이동해 “9,448 commits”링크를 클릭한다.

(물론, 부트스트랩 프로젝트 페이지에 접속한 시점을 기준으로 commit 수가 달라질 것이다.)

가장 최근의 작업이 목록 위쪽으로 오는 순서로 commit 목록이 표시된다.([그림 2?3]참조)

각 commit을 클릭하면, 변경이 된 이유를 설명하는 commit message가 표시된다.

commit message 아래로 commit의 일부분으로 추가되거나 삭제 또는 수정된 각각의 파일을 볼 수 있다. 삭
제된 콘텐츠는 빨간색으로, 추가된 콘텐츠는 녹색으로 표시된다.


2.4 Pull Request 보기

pull request는 현재 진행 중인 작업이 무엇인지 알 수 있게 해준다. 
프로젝트 페이지 화면에서 오른쪽위의 pull request를 클릭하면 공개된 pull request 목록이 표시된다. 
이것은 사람들이 현재 작업하고 있는 기능이나 수정사항을 나타낸다.([그림 2?5]참조)

pull request를 살펴보면 사람들이 현재 무슨 작업을 하고 있으며, 버그 수정을 하든 기능 
개발을 하든 각가의 변경 사항에 대해 어떤 역할을 하고 있는지 알 수 있다.

2.5 Issue 보기

pull request로 현재 진행되고 있는 버그 수정과 기능을 알 수 있다면, 
issue를 통해서는 프로젝트에 필요한 작업을 넓은 관점에서 볼 수 있다.

pull request는 주로 issue에 링크되어 있지만, 아무도 작업을 시작하지 않아 
pull request가 없는 issue또한 존재한다. issue 목록을 보기 위해 링크를 클릭하면 모든 공개 
issue목록이 자동으로 나타난다([그림 2?7] 참조).


누군가 Bootstrap 사용 중 겪은 어려움을 적어 공유하는 모습이다.


2.6 Pulse 보기


pulse는 프로젝트에 대한 최근의 활동 내용을 엿볼 수 있는 좋은 방법이다. 
오른 쪽 위에서 기간을 최종일, 3일, 1주 또는 한 달 등의 기간으로 지정할 수 있다.

pulse는 merge되거나 추가된 pull request의 수를 먼저 표시한다.또한 얼마나 많은 issue가 마감되고 개설되었는지 표시한다.

pulse가 활성화된 pull request와 issue의 수를 언급할 때 이것이 단지 각가의 개수를 말하는 것이 아니라, 
사용자가 지정한 시기에 개설되고 마감된 request와 issue의 수를 말하는 것임을 이해하는 것이 중요하다. 
>예를들어, 이 책을 작성할 시기에, 부트스트랩은 지나주에 총 23개의 “활성화된” pull request가 있었는데 
그중에 15개가 merge되고, 8개가 아직 논의가 되고 있다. 하지만 총 28개의 공개 pull request를 갖고 있다.

 그 다음으로 나오고 있는 단락은 최근의 변경 내용을 간략히 요약한 것으로 개발자의 수, 
마스터의 commit수, 전체 branch의 총 commit수, master branch에서 추가되거나 삭제 또는 수정된 파일의 수를 나열하고 있다.

그리고 추가되거나 삭제된 콘텐츠의 라인 수를 표시하는데, 
파일에서 텍스트 라인이나 하나 수정되면 Git은 한 라인이 삭제되고 그 자리에 다른 라인이 추가 된 것으로 인식한다는 것을 알아야한다.

오른쪽 막대그래프는 지정된 시기에 commit을 가장 많이 생성한 기여자(contributor)를 막대그래프로 나타낸다. 
그 아래에는 병합되고 논의되고 있는 pull request의 제목과 마감되고 개설 된 issue를 나타낸다.

pulse는 “Unresolved conversation”로 표시되는 목록으로 끝나는데 이는 새롭게 추가된 댓글이 있으나 
아직 마감되지 않는 모든 issue와 pul request의 목록을 말한다.

2.7 GitHub Graphs 보기

pulse가 최근의 활동내용을 요약해서 알려주는 반면, 
Graphs 화면은 좀 더 긴 기간 동안 프로 젝트에 행한 작업을 알 수 있게 해준다.


2.7.1 기여자(Contributor) Graph

기여자 그래프는 일정 기간 동안 commit수, 추가 또는 삭제 수에 근거해 기여자들을 부여준다. 전
체 공헌 활동에 대한 그래프가 먼저 나오고, 뒤이어 각 개발자들의 공헌을 나타내는 
작은그래프가 가장 많이 공헌한 개발자 순으로 나온다.

기본 commit그래프는 일정 기간 동안 master branch에 만들어진 commit수를 나타낸다. 
master branch에 merge된 commit만을 나타낸다는 것을 반드시 알아두자. feature branch에 일주일 내내 작업했는데 
아직 그 작업이 병합되지 않았다면, 배포 준비가 되어 master branch로 merge되어서야 비로소 공헌내용을 볼 수 있었을 것이다.

commit에 정해진 기준은 없다.개발자들이 오류를 조사하거나 무언가를 테스트하지 않고 코드를 작성한다면 
대략 5?10분 마다 commit을 생성할 것이다. 그러나 팀에 따라서 어떤 개발자들은 비슷한 시간을 작업해도 다른 사람보다 훨씬 적은 수의
 commit을 생성한다.이 경우라면 기여자 그래프의 contribution type을 추가 또는 삭제로 바꾸는 것이 좋겠다.
이렇게 하면 개발자들이 프로젝트에서 추가하거나 삭제한 코드의 라인 수를 알아낼 수 있다. 
개발자들이 라인을 수정하면 이전 라인을 삭제하고 새로운 라인이 추가된 것으로 나타날 것이다.






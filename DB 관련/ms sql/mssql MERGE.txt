
https://technet.microsoft.com/ko-kr/library/bb522522(v=sql.105).aspx


SQL Server 2008에서는 MERGE 문을 사용하여 단일 문에서 삽입, 업데이트 또는 삭제 작업을 수행할 수 있습니다. 
MERGE 문을 사용하면 대상 테이블 또는 뷰와 데이터 원본을 조인한 다음 이 조인의 결과를 
바탕으로 대상에 대해 여러 동작을 수행할 수 있습니다. 

예를 들어 MERGE 문을 사용하여 다음과 같은 작업을 수행할 수 있습니다.

대상 테이블에서 조건에 따라 행을 삽입 또는 업데이트합니다.

대상 테이블에 행이 존재하는 경우 하나 이상의 열을 업데이트하고, 그렇지 않으면 새 행에 데이터를 삽입합니다.

두 테이블을 동기화합니다.

원본 데이터와의 차이점에 따라 대상 테이블에서 행을 삽입, 업데이트 또는 삭제합니다.

MERGE 구문은 다음과 같은 5개의 기본 절로 구성됩니다.

MERGE 절은 삽입, 업데이트 또는 삭제 작업의 대상인 테이블 또는 뷰를 지정합니다.

USING 절은 대상과 조인되는 데이터 원본을 지정합니다.

ON 절은 대상과 원본이 일치하는 부분을 확인하는 조인 조건을 지정합니다.

WHEN 절(WHEN MATCHED, WHEN NOT MATCHED BY TARGET 및 WHEN NOT MATCHED BY SOURCE)은 WHEN 절에 지정된 추가 검색 조건 
및 ON 절의 결과를 바탕으로 수행할 동작을 지정합니다.

OUTPUT 절은 대상에서 삽입, 업데이트 또는 삭제된 각 행에 대해 한 행을 반환합니다.

구문 및 규칙에 대한 자세한 내용은 MERGE(Transact-SQL)를 참조하십시오.

원본 및 대상 검색 조건 지정


원본 데이터와 대상 데이터가 하나의 입력 스트림으로 병합되는 방법, 그리고 추가 검색 조건을 사용하여 불필요한 
행을 올바르게 필터링하는 방법을 이해해야 합니다. 이 부분을 이해하지 못하면 추가 검색 조건을 잘못 지정할 수 있고 
이로 인해 부정확한 결과가 발생하게 됩니다.

원본의 행은 ON 절에 지정된 조인 조건자를 기준으로 대상의 행과 비교됩니다. 결과는 조합된 입력 스트림입니다. 
입력 행당 하나의 삽입, 업데이트 또는 삭제 작업이 수행됩니다. 문에 지정된 WHEN 절에 따라 입력 행은 다음 중 하나일 수 있습니다.

대상과 원본에서 각각 하나씩의 행으로 구성된 일치하는 쌍. WHEN MATCHED 절의 결과입니다.

해당하는 행이 대상에 없는 원본의 행. WHEN NOT MATCHED BY TARGET 절의 결과입니다.

해당하는 행이 원본에 없는 대상의 행. WHEN NOT MATCHED BY SOURCE 절의 결과입니다.

MERGE 문에 지정되는 WHEN 절의 조합은 쿼리 프로세서에 의해 구현되는 조인 유형을 결정하고 결과 입력 스트림에 영향을 줍니다. 
예를 들어 다음과 같은 원본 및 대상 테이블과 데이터의 예를 살펴보겠습니다.









=====================[예제]===============================================================


-- MERGE statement with join conditions that produce unexpected results.
USE tempdb;
GO
BEGIN TRAN;
MERGE Target AS T
USING Source AS S
ON (T.EmployeeID = S.EmployeeID AND T.EmployeeName LIKE 'S%' 
    AND S.EmployeeName LIKE 'S%' )
WHEN NOT MATCHED BY TARGET
    THEN INSERT(EmployeeID, EmployeeName) VALUES(S.EmployeeID, S.EmployeeName)
WHEN MATCHED 
    THEN UPDATE SET T.EmployeeName = S.EmployeeName
WHEN NOT MATCHED BY SOURCE
    THEN DELETE
OUTPUT $action, Inserted.*, Deleted.*;
ROLLBACK TRAN;
GO



=====================[예제]===============================================================


USE AdventureWorks2008R2;
GO
IF OBJECT_ID (N'dbo.Purchases', N'U') IS NOT NULL 
    DROP TABLE dbo.Purchases;
GO
CREATE TABLE dbo.Purchases (
    ProductID int, CustomerID int, PurchaseDate datetime, 
    CONSTRAINT PK_PurchProdID PRIMARY KEY(ProductID,CustomerID));
GO
INSERT INTO dbo.Purchases VALUES(707, 11794, '20060821'),
(707, 15160, '20060825'),(708, 18529, '20060821'),
(711, 11794, '20060821'),(711, 19585, '20060822'),
(712, 14680, '20060825'),(712, 21524, '20060825'),
(712, 19072, '20060821'),(870, 15160, '20060823'),
(870, 11927, '20060824'),(870, 18749, '20060825');
GO
IF OBJECT_ID (N'dbo.FactBuyingHabits', N'U') IS NOT NULL 
    DROP TABLE dbo.FactBuyingHabits;
GO
CREATE TABLE dbo.FactBuyingHabits (
    ProductID int, CustomerID int, LastPurchaseDate datetime, 
    CONSTRAINT PK_FactProdID PRIMARY KEY(ProductID,CustomerID));
GO
INSERT INTO dbo.FactBuyingHabits VALUES(707, 11794, '20060814'),
(707, 18178, '20060818'),(864, 14114, '20060818'),
(866, 13350, '20060818'),(866, 20201, '20060815'),
(867, 20201, '20060814'),(869, 19893, '20060815'),
(870, 17151, '20060818'),(870, 15160, '20060817'),
(871, 21717, '20060817'),(871, 21163, '20060815'),
(871, 13350, '20060815'),(873, 23381, '20060815');
GO


[UPDATE 및 DELETE 작업 수행]


USE AdventureWorks2008R2;
GO
IF OBJECT_ID (N'Production.usp_UpdateInventory', N'P') IS NOT NULL DROP PROCEDURE Production.usp_UpdateInventory;
GO
CREATE PROCEDURE Production.usp_UpdateInventory
    @OrderDate datetime
AS
MERGE Production.ProductInventory AS target
USING (SELECT ProductID, SUM(OrderQty) FROM Sales.SalesOrderDetail AS sod
    JOIN Sales.SalesOrderHeader AS soh
    ON sod.SalesOrderID = soh.SalesOrderID
    AND soh.OrderDate = @OrderDate
    GROUP BY ProductID) AS source (ProductID, OrderQty)
ON (target.ProductID = source.ProductID)
WHEN MATCHED AND target.Quantity - source.OrderQty <= 0
    THEN DELETE
WHEN MATCHED 
    THEN UPDATE SET target.Quantity = target.Quantity - source.OrderQty, 
                    target.ModifiedDate = GETDATE()
OUTPUT $action, Inserted.ProductID, Inserted.Quantity, Inserted.ModifiedDate, Deleted.ProductID,
    Deleted.Quantity, Deleted.ModifiedDate;
GO

EXECUTE Production.usp_UpdateInventory '20030501'


[NSERT, UPDATE 및 DELETE 작업 수행]



MERGE dbo.Departments AS d
USING dbo.Departments_delta AS dd
ON (d.DeptID = dd.DeptID)
WHEN MATCHED AND d.Manager <> dd.Manager OR d.DeptName <> dd.DeptName
    THEN UPDATE SET d.Manager = dd.Manager, d.DeptName = dd.DeptName
WHEN NOT MATCHED THEN
    INSERT (DeptID, DeptName, Manager)
        VALUES (dd.DeptID, dd.DeptName, dd.Manager)
WHEN NOT MATCHED BY SOURCE THEN
    DELETE
OUTPUT $action, 
       inserted.DeptID AS SourceDeptID, inserted.DeptName AS SourceDeptName, 
       inserted.Manager AS SourceManager, 
       deleted.DeptID AS TargetDeptID, deleted.DeptName AS TargetDeptName, 
       deleted.Manager AS TargetManager;    



=====================[예제]===============================================================



MERGE CODE_DETAIL C1
 USING (SELECT B1.CO_GROUP, B1.CO_NAME AS CO_FULL_NAME                                                                                                                                          
             , '" + shopgroup.CO_CODE + "' AS CO_CODE, '" + shopgroup.CO_NAME + "' AS CO_NAME                                                                                                   
             , '" + shopgroup.CO_MEMO + "' AS CO_MEMO, '" + shopgroup.CO_SORT + "' AS CO_SORT                                                                                                   
             , '" + shopgroup.CO_DISP + "' AS CO_DISP, '" + loginId + "' AS LOGIN_USER                                                                                                          
             , CASE WHEN '" + coDiv + "' = '1'                                                                                                                                                  
                    THEN ISNULL(B2.MAX_CO_LEV1_CODE, '01')                                                                                                                                      
                    ELSE B2.CO_LEV2_CODE                                                                                                                                                        
                END AS N_CO_CODE                                                                                                                                                                
             , CASE WHEN '" + coDiv + "' = '1'                                                                                                                                                  
                    THEN ''                                                                                                                                                                     
                    ELSE '" + upperCoCode + "'                                                                                                                                                  
                END AS UPPER_CO_CODE                                                                                                                                                            
          FROM CODE_GROUP B1                                                                                                                                                                    
          LEFT OUTER                                                                                                                                                                            
          JOIN (                                                                                                                                                                                
                SELECT A1.CO_GROUP, A1.CO_CODE AS CO_LEV1_CODE                                                                                                                                  
                     , REPLICATE('0', 2 - LEN(CONVERT(CHAR, MAX(CONVERT(INT, A1.MAX_CO_CODE)) + 1))) + CONVERT(CHAR, MAX(CONVERT(INT, A1.MAX_CO_CODE)) + 1) AS MAX_CO_LEV1_CODE                 
                     , ISNULL(REPLICATE('0', 4 - LEN(CONVERT(CHAR, MAX(CONVERT(INT, A2.CO_CODE)) + 1))) + CONVERT(CHAR, MAX(CONVERT(INT, A2.CO_CODE)) + 1), A1.CO_CODE + '01') AS CO_LEV2_CODE  
                  FROM (                                                                                                                                                                        
                        SELECT CO_CODE, MAX(CO_CODE) OVER(PARTITION BY UPPER_CO_CODE) AS MAX_CO_CODE                                                                                            
                             , CO_GROUP, UPPER_CO_CODE                                                                                                                                          
                          FROM CODE_DETAIL                                                                                                                                                      
                         WHERE CO_GROUP = '3'                                                                                                                                                   
                        ) A1                                                                                                                                                                    
                  LEFT OUTER                                                                                                                                                                    
                  JOIN CODE_DETAIL A2 ON A1.CO_CODE = A2.UPPER_CO_CODE                                                                                                                          
                 WHERE A1.CO_GROUP = '3'                                                                                                                                                        
                   AND(A1.UPPER_CO_CODE = '' OR A1.UPPER_CO_CODE IS NULL)                                                                                                                       
                 GROUP BY A1.CO_GROUP, A1.CO_CODE                                                                                                                                               
                ) B2                                                                                                                                                                            
            ON B1.CO_GROUP = B2.CO_GROUP                                                                                                                                                        
         WHERE B1.CO_GROUP = '3'                                                                                                                                                                
           AND ISNULL(B2.CO_LEV1_CODE, '01') = CASE WHEN '" + coDiv + "' = '1'                                                                                                                  
                                                    THEN '01'                                                                                                                                   
                                                    ELSE '" + upperCoCode + "'                                                                                                                  
                                                END                                                                                                                                             
        ) C2                                                                                                                                                                                   

     ON (C1.CO_CODE = C2.CO_CODE AND  C1.CO_GROUP = C2.CO_GROUP)                         
   WHEN MATCHED THEN                                                                     
 UPDATE SET C1.CO_NAME = C2.CO_NAME                                                      
          , C1.CO_MEMO = C2.CO_MEMO                                                      
          , C1.CO_SORT = C2.CO_SORT                                                      
          , C1.CO_DISP = C2.CO_DISP                                                      
          , C1.UPD_DATE = GETDATE()                                                      
          , C1.UPD_USER = C2.LOGIN_USER                                                  
   WHEN NOT MATCHED THEN                                                                 
 INSERT (CO_GROUP, CO_CODE, CO_NAME, CO_FULL_NAME, CO_MEMO                               
       , CO_SORT, CO_DISP, UPPER_CO_CODE, REG_USER, REG_DATE)                            
 VALUES (C2.CO_GROUP, RTRIM(C2.N_CO_CODE), C2.CO_NAME, C2.CO_FULL_NAME, C2.CO_MEMO       
       , C2.CO_SORT, C2.CO_DISP, C2.UPPER_CO_CODE, C2.LOGIN_USER, GETDATE());            


[트랜잭션]

트랙잭션이 적용된 시스템은 전형적으로 ACID 속성에 의해 특징화 된다. ACID는 트랜잭션이
가져야할 4가지 속성인 원자성 , 일관성 , 고립성 , 지속성의 앞머리를 딴 약자이다.

- 원자성 : 트랜잭션을 구성하는 질의문들은 하나의 논리적인 단위를 형성한다.
           따라서 이들 중 일부만 수행되지 않는다.

- 일관성 : 데이터베이스는 트랜잭션을 수행하기 전과 수행한 후가 일관적이어야 한다.
   	   예를 들어 한 테이블의 행에 포함된 ID가 다른 어떤 테이블에 항상 준재해야 하는
   	   관계라면 인증되지 않는 ID를 갖는 행을 테이블에 추가하는 트랜잭션이 있을 때
  	   이 동작은 실패하고 트랜잭션은 롤백될 것이다.

- 고립성 : 하나의 트랜잭션은 다른 트랜잭션에 영향을 미치지 않는다. 따라서
 	   동시에 수행된 트랜잭션은 하나씩 순차적으로 수행된 트랜잭션 결과와 동일하다.

- 지속성 : 트랜잭션이 성공적으로 수행됐다면 이결과는 데이터베이스에 영구적으로 반영된다.

트랜잭션은 데이터베이스의 수행 결과를 확실히 보장하지만, CPU 사이클이나 메모리,
저장 공간에 댛란 오버헤드를 유발하기도 한다. MySQL은 트랜잭션을 지원하거나
트랜잭션을 지우너하지 안는 스토리지 엔진을 제공한다.
트랜잭션의 속성이 어떤 애플리케이션에서는 필수적이지만 그렇지 않는 경우도 있으므로, 어떤것이
적합한 엔진인지 생각해보고 선택하면 된다. 금융거래는 전형적으로 트랜잭션이 필요한 
애플리케이션으로 오버헤드를 최소화하는 것보다 데이터 무결성을 보장하는 것이 우선적이다.
반면 웹 페이지의 로그를 수직하는 애플리케이션의 겅우 서버 에러시 작성되는 행이 
몇 개쯤 손시되는 것은 괜찮다. 
이 경우 트랜잭션을 지원하지 않는 스토리지 엔진을 사용함으로써 트랜잭션 처리로 발생하는
오버헤드를 피할수 있다.

기본적으로 MySQL은 오토 커밋 모드로 수행되므로 , 각 질의문으로부터
발생한 변경은 데이터베이스에 즉각 커밋돼 반영된다.
사실상 각 질의문은 암묵적으로 자신만의 트랜잭션을 갖고 있다.
트랜잭션을 명시적으로 수행하기 위해서는 오토커밋 모드를 중지하고 MySQL에 직접 커밋과
롤백 시점에 대해 알려줘야 한다.

트랙잭션을 수행하는 첫 번째 방벅는 START TRANSACTION(혹은 BEGIN)을 수행해
오토 커밋 모드를 중지하고 , 트랜잭션을 구성하는 질의문을 수행한 후 질의 마지막에 COMMIT를
추가해 결과를 데이터베이스에 반영하는 것이다.
트랜잭션을 수행하는 도중 에러가 발생한 경우 변경된 내용을 취소하는 대신 ROLLBACK을
수행해 트랜잭션을 취소한다. START TANSCTION이 수행되지 바로 이전의 모드 생태로
돌아가게 해줄 것이고, 비활성화된 상태였다면 현재 트랜잭션을 종료하고 그 다음 트랜잭션을
수행할 것이다.

예제 

START TRANSACTION;
쿼리문

SAVEPOINT 포인트명;
쿼리
ROLLBACK TO SAVEPOINT 포인트명;

COMMIT; OR ROLLBACK;

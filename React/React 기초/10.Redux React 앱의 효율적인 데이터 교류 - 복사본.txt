https://velopert.com/1225

[소개]

Redux는 JavaScript 어플리케이션에서 data-state 와 UI-state를 관리해주는 도구입니다.
이는 상태적 데이터 관리가 시간이 흐름에 따라 복잡해질수도 있는 싱글 페이지 어플리케이션
(Single Page Application)에서 매우 유용하게 사용됩니다. 그리고, Redux는 React 외에도,
jQuery 혹은 Angular를 사용하는 어플리케이션에서도 사용 될 수 있습니다.

지난 강좌를 읽어보셨다면, React에서 데이터흐름은 단일 방향으로만 흐른다는것을 배우셨을 것입니다.
state 및 props 강좌에서는 parent-child 관계를 통하여 데이터를 교류하는 것을 배웠었죠.
하지만, 컴포넌트 갯수가 많아진다면,... 혹은 데이터를 교류 할 컴포넌트들이 parent-child 관계가
아니라면 지금까지 해왔던것처럼 하면 복잡해진답니다.

이에 대하여 React Document에서 해결방안을 조언해주는데요...한번 살펴볼까요?

For communication between two components that don't have a parent-child
relationship you can set up your own global event system...Flux pattern is one of the
possible ways to arrange this

번역 : parent-child 관계가 아닌 컴포넌트끼리 데이터를 교류 할 때엔 글러벌 이벤트 시스템을
       설정하는 방법이 있다. Flux 패턴은 이를 수행하기 위한 방법 중 하나이다.

Flux? "Flux" 자체는 라이브러리가 아니라, 디자인패턴입니다. Flux에 대하여 알아보기전에,
기존에 널리 사용되고 있는 MVC 디자인 패턴에 대하여 알아봅시다.


[MVC 디자인 패턴]

MVC패턴은 Controller , Model, View 이 3가지 개념으로 이뤄져있습니다. 어떠한 Action이 입력되면
,Controller은 Model이 지니고 있는 데이터를 조회하거나 업데이트 하며 , 
이 변화는 View에 반영되는 구조입니다. View에서 Vodel의 데이터에 접근 할 수도 있습니다.

이 구조는 작은 어플리케이션에서는 큰 문제없이 작동합니다. 하지만 Model,과 
View가 늘어난다면 어떻게 될까요?


[FLUX 패턴]

위 문제를 해결하기 위해서 FLUX라는 디자인 패턴이 만들어졌습니다.

시스템에서 어떠한 Action을 받았을 때, Dispatcher 가 받은 Action들을 통제하여
Store에 있는 데이터를 업데이트 합니다. 그리고 변동된 데이터가 있으면 view에 리렌더링합니다.

그리고, View에서 Dispatcher로 Action을 보낼 수도 있죠

dispatcher은 작업이 중첩되지 않도록 해줍니다. 즉,어떤 Action이 
Dispatcher를 통하여 Store에 있는 데이터를 처리하고, 그 작업이 끝날 때까지 다른
Action들을 대기시킵니다.


[Redux]

배경지식을 배웠으니, 다시 본론으로 돌아옵시다.. 이번 강좌에서 배우게 될 Redux는 위에서 설명된
Flux 아키텍쳐를 좀더 편하게 사용 할 수 있도록 해주는 라이브러리입니다. 이 라이브러리를 사용하면
데이터 관리를 편하게 할 수 있습니다.

[Redux의 3가지 원칙]

Redux를 사용 할 땐, 3가지 원칙이 적용됩니다.

- 하나, Single Source of Truth (단 하나의 진실의 근원) -

Redux는 어플리케이션의 state를 위해 단 한개의 store를 사용합니다. 모든 state가 한곳에 있기 때문에
이를 Single Source of Truth 라고 부릅니다. 
(그리고 이는 Flux와의 주요 차이입니다. Flux에서는 여러개의 store를 사용합니다.)

store의 데이터 구조는 개발자 하기 나름입니다. 보통 매우 nested 된 구조로 이뤄져 있습니다.
즉, JavaScript 객체로서 , {{{}{},{}} 이런식으로 잘 정리되어있다는 의미입니다.


- 둘 , State is read-only (State는 읽기 전용이다) -

Redux 매뉴얼을 보면 ,"The only way to mutate the state is to emit an action,an object
describing what happend. " 
(번역: state 를 변경하는 유일한 방법은 어떤일이 발생햇는지 나타내주는 action 객체를 
전달하는것이다) 라고 적혀 있습니다.

즉, 어플리케이션에서 state를 직접 변경 할 수는 없다는 의미입니다. state를 변경하기 위해서는,
action이 dispatch 되어야 합니다.(dispatch는 '보낸다'는 뜻 입니다.) action 은, 어떤 변화가
일어나야 할 지 알려주는 객체입니다.

- 셋, Changes are made with Pure Functions(변화는 순수 함수로 만들어져야 한다) -

두번째 원칙에 설명된것처럼 Redux에선 어플리케이션에서 state를 직접 변경하는 것을
허용하지 않습니다.그 대신에 action 을 dispatch하여 상태값을 변경한다고 했죠? 이 과정에서
받아온 action 객체를 처리하는 함수를 Reducer 라고 부릅니다. action은 어떤 변화를 일어나야 할 지
알려주는 객체라면, Reducer는 그 정보를 받고 애플리케이션의 상태를 어떻게 바꿀지 정의한다고 
볼 수 있습니다.

Reducer는 '순수 함수'로만 작성되야합니다. 함수가 순수하다니 ,, 좀 헷갈리죠?
아래 불렛포인트를 보시면 이해가 가실겁니다.

- 외부 네트워크 혹은 데이터베이스에 접근하지 않아야한다.

- return 값은 오진 parameter 갑에만 의존되어야 한다.

- 인수는 변경되지 않아야 한다.

- 같은 인수로 실행된 함수는 언제나 같은 결과를 반환해야한다.

- 순수하지 않은 API 호출을 하지 말아야 한다. (Date 및 Math의 함수 등)







https://velopert.com/814

[The EASY WAY]

NPM을 통항 설치를 하는게 번거롭고 , 공부만 하는게 목적이라면 다음 JSfinddle을 사용하세요.

https://jsfiddle.net/velopert/8tmek6yv/1/

브라우저에서 React.js 프로젝트를 작성 할 수 있습니다.
JavaScript를 한 파일에 작성해야하고 아직 ES6의 Syntax가 제대로 지원되지 않는 단점이 있지만,
공부 할 때는 매우 편하답니다.


[Global Package 설치]

작업환경 설치를 위하여 몇가지 글로벌 패키지가 설치 되어야 합니다.
설치할 패키지들은 다음과 같습니다:

1. babel - 아직 ECMAScript6를 지원하지 않는 환경에서 ECMAScript6 Syntex를 사용 할 수 있게 해줍니다.

2. webpack - 모듈 번들러로서 , Browserify 처럼 브라우저 위에서 import(require)을 할 수 있게 
  	    해주고 자바 스크립트 파일들을 하나로 합쳐줍니다.

3.webpack-dev-server : webpack에서 지원하는 간단한 개발서버로서 별도의 서버를 구축하지
		       않고도 웹서버를 열 수 있으며 hot-loader를 통하여 코드가 수정될 떄마다
		       자동으로 리로드 되게 할 수 있습니다.

npm install -g babel webpack webpack-dev-server


[프로젝트 생성]

react-tutoriald 이라는 루트 폴더를 생성 후 npm init 명령어를 사용하여 Nodejs 프로젝트를 생성하세요.

mkdir react-tutorial && cd react-tutorial
npm init


[Dependncy 및 Plugin 설치]

우리가 React를 사용 할 것이므로, 설치해줘야 합니다. -save 옵션을 통하여
package.json 에 의존 패키지들을 추가 할 수 있습니다.

npm install --save react react-dom

둘째로 , babel에서 사용 될 플러그인을 설치해야 합니다. 해당 모듈들은 개발환경에서만 사용되므로
-save-dev 옵션을 설졍해주세요.

npm install --save-dev babel-core babel-loader babel-preset-react babel-preset-es2015 webpack webpack-dev-server

-----

webpack 과 webpack-dev-server 가 글로벌로 이미 설치가 되어있는데 , 로컬 모듈로 설치된 이유는
webpack 의 livereload 와 비슷한 기능인 -hot 옵션을 사용하기 위합니다. 사실 상 , webpack 모듈을
글로벌 패키지로서 꼭 설치 할 필요는 없습니다. 이를 설치한 이유는 커맨드라인에서 webpack-dev-server을
바로 실행하기 위함인데, 로컬에만 설치하고 나중에 webpack을 설치할 떄 
는 ./node_modules/bin/webpack-dev-server -hot 이런식으로 실행 할 수 있습니다.

-----

현재 설치 된 의존 모듈은 다음과 같습니다. 버전 체크해주세요. 

 "dependencies": {
    "react": "^15.6.1",
    "react-dom": "^15.6.1"
  },
  "devDependencies": {
    "babel-core": "^6.26.0",
    "babel-loader": "^7.1.2",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-react": "^6.24.1",
    "webpack": "^3.5.6",
    "webpack-dev-server": "^2.7.1"
  }


[디렉토리 구조 이해 및 파일 생성]

react-tutorial
├── package.json         
├── public            # 서버 public path
│   └── index.html    # 메인 페이지
├── src               # React.js 프로젝트 루트
│   ├── components    # 컴포넌트 폴더
│   │   └── App.js    # App 컴포넌트
│   └── index.js      # Webpack Entry point
└── webpack.config.js # Webpack 설정파일


Webpack entry point는 , Webpack 모듈에서 가장 처음으로 읽어들일 파일입니다.
이 파일에서 부터 시작해서, 해당 파일에서 import 한 다른 모듈들을 불러옵니다.


[컴파일러 , 서버 및 로더 설정]


- webpack 설정하기 [webpack.config.js] -

ECMAScript6를 컴파일해주고 개발서버를 열어주는 webpack의 설정파일 webpack.config.js을 수정하세요.


====================================================================


module.exports = {
    entry: './src/index.js',

    output: {
        path: __dirname + '/public/',
        filename: 'bundle.js'
    },

    devServer: {
        inline: true,
        port: 7777,
        contentBase: __dirname + '/public/'
    },

    module: {
            loaders: [
                {
                    test: /\.js$/,
                    loader: 'babel-loader',
                    exclude: /node_modules/,
                    query: {
                        cacheDirectory: true,
                        presets: ['es2015', 'react']
                    }
                }
            ]
        }
};

====================================================================

webpack의 역할은, entry부터 시작하여 필요한 모듈들을 다 불러온 후, 한 파일로 합쳐
bundle.js에 저장합니다.

추가적으로는, 모듈을 통하여 ES6 문법으로 작성된 코드를 ES5 형태로 변환도 해줍니다.

개발 서버의 포트는 7777로 설정되었습니다.

개발 서버는 파일이 변동 될 때마다 다시 컴파일하고, 연결되어있는 브라우저를 새로고침
해주는 기능을 가지고 있습니다.


- package.json -
npm start 명령어를 콘성에서 입력했을 때, webpack-dev-server 가 실행 될 수 있게 
package.json 의 "scripts 블록을 수정하세요.

  "scripts": {
    "start": "webpack-dev-server --hot --host 0.0.0.0"
  },

만약에 localhost가 아닌 외부 서버에서 dev-server 실행 시 , -host 옵션을 추가하지 않으면
접근이 안됩니다.

localhost인 경우에는 생략하시면 됩니다.


[HTML 및 js 수정]

- index.html -

이 파일은 평범한 HTML 파일 입니다 .div id="app" 을 React 프로젝트의 
root element로 지정하고 index.js 스크립트를 로드해주세요. 이 파일은 webpack에서 bundle 된 
파일로서 , react 라이브러리 및 기타 자바스크립트 파일들이 하나로 합쳐진 파일입니다.

====================================================================


<!DOCTYPE html>
<html>

   <head>
      <meta charset="UTF-8">
      <title>React App</title>
   </head>

   <body>
      <div id="root"></div>
      <script src="bundle.js"></script>
   </body>

</html>

====================================================================


- src/components/App.js -

우리가 만들 첫 React 컴포넌트입니다. 
* 파일 및 컴포넌트의 첫 문자를 대문자로 하는건 React의 naming conention 입니다.

====================================================================

import React from 'react';

class App extends React.Component {
    render(){

        return (
                <h1>Hello React Skeleton</h1>
        );
    }
}

export default App;

====================================================================

1번에서 사용된 import JavaScript ES6에 새로 도입된 키워드로서, require('...')
의 역할을 합니다.

12번에서 사용된 export는 JavaScriptES6에 새로 도입된 키워드로서,
module.export = App 와 같습니다.

컴포넌트에 대한설명은 다음 강좌에서 자세히 알아보도록 하겠습니다.


- src/index.js -


====================================================================

import React from 'react';
import ReactDOM from 'react-dom';
import App from './components/App';

const rootElement = document.getElementById('root');
ReactDOM.render(<App />, rootElement);

====================================================================

App 컴포넌트를 불러와서 root element에 렌더링하는 부분입니다.


[webpack-dev-server 구동하기]

npm start

지금까지 같은 모듈 버전에 오타가 없이 따라와줬다면 에러 없이 서버가 구동 될 것입니다.

브라우저에서 링크를 띄운 상태에서 App.js를 수정해보세요. 브라우저에서 수동으로 F5를
누르지 않아도 자동으로 새로고침됩니다.















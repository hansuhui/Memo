
- 속성과 메소드 -

각 Vue 인스턴스는 data 객체에 있는 모든 속성을 프록시 처리합니다.

// 데이터 객체
var data = {a: 1}

//var vm = new Vue({
   data : data
})


// 같은 객체를 참조합니다!
vm.a === data.a // true


//속성 설정은 원본 데이터에도 영향을 미칩니다.
vm.a = 2
data.a  // 2

vm.a = 3
data.a  // 3


데이터가 변경되면 화면은 다시 렌더링됩니다. data의 속성은 인스턴스가 생성될때 있었다면 
반응형입니다. 즉 당므과 같이 새 속성을 추가합니다.
vm.b = "hi"

b 가 변경되도 화면은 갱신되지 않습니다. 반응형 속성이 필요하면 나중ㄷ에 이 속성이 필요한 것을 알고,
값을 지정하지 않는채로 초기화만 하면 됩니다.

data : {
   newTodoText : '',
   visitCount : 0 ,
   hideCompletedTodos : false ,
   todos : [],
   error : null
}

이것 상황의 유일한 예외는 Object.fressze() 를 사용하는 경우입니다.
이는 기존 속성이 변경되는 것을 막아 반응성 시스템이 추적할 수 없다는 것을 의미합니다.

var obj = {
  foo : 'bar'
}

Object.freeze(obj)

new Vue({
  el: "#app",
  data () {
     return {obj}
  }
})


<div id="app">
  <p>{{ obj.foo }}</p>
  <!-- obj.foo는 더이상 변하지 않습니다! -->
  <button @click="obj.foo = 'baz'">Change it</button>
</div>

Vue 인스턴스는 데이터 속성 이외에도 유용한 인스턴스 속성성 및 메소드를 제공합니다.
다른 사용자 정의 속성과 구분하기 위해 $ 접두어를 붙였습니다.

예: 

var data = {a:1}

var vm = new Vue({
   el: "#example",
   data : data
})

vm.$data === data // true
vm.$el === document.getElementById('example') //true

// $watch 는 인스턴스 메소드 입니다.

vm.$watch('a',function(newVal , oldVal){
  // 'vm.a 가 변경되면 호출 됩니다.'
})


나중에 API reference 에서 인스턴스 속성과 메소드 전체 목록을 살펴보세요.
















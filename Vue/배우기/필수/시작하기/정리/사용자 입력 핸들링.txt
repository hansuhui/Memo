- 사용자 입력 핸들링 -

사용자가 앱과 상호 작용할 수 있게 하기 위해 우리는 v-on 디렉티브를 사용하여 Vue 인스턴스에
메소드를 호출하는 이벤트 리스너를 첨부 할 수 있습니다 :

<div id="app-5">
   <p>{{message}}</p>
   <button v-on:click="reverseMessage">메시지 뒤집기</button>
</div>



var app5 = new Vue({
  el : "#app-5",
  data : {
     message : "안녕하세요! Vue.ps!"
  },
  methods : {
    reverseMessage : function (){
       this.message = this.message.split(' ').reverse().join(' ')
       this.$el.getElementsByTagName("p")[0].style.color ="red";
       //debugger;
     }
  }
})


이 메소드에서 우리는 단순히 DOM을 건드리지 않고 앱의 상태를 업데이트 합니다.
모든 DOM 조작은 Vue에 의해 처리되면 작성한 코드는 기본 로직에만 초점을 맞춥니다.

Vue는 또한 양식에 대한 입력과 앱 상태를 양방향으로 바인딩하는 v-model 디렉티브를 
제공합니다.

<div id="app-6">
   <p>{{ message }}</p>
   <input v-model="message">
</div>


var app6 = new Vue({
   el : "#app-6",
   data : {
      message : "Hello World!!"
   }
})

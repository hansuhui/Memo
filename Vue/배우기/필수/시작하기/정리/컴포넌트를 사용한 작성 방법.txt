- 컴포넌트를 사용한 작성 방법 -

컴포넌트 시스템은 Vue의 또 다른 중요한 개념입니다. 아는 작고 그 자체로 제 기능을 하며
재사용할 수 있는 컴포넌트로 구성된 대규모 응용 프로그램을 구출할 수 있게 해주는 추상적 
개념입니다. 생각해보면 거의 모든 유형의 응용 프로그램 인터페이스를 컴포넌트 트리로 추상화할 수 있습니다.

Vue에서 , 컴포넌트는 본질적으로 미리 정의된 옵션을 가진 Vue 인스턴스 입니다. Vue에서 컴포넌트를 
등록하는 방법은 간단합니다.

// todo-imtem 이름을 가진 컴포넌트를 정의합니다.

Vue.compoment('todo-item',{
   template : '<li>할일 항목 하나입니다.<li>'
})


이제 다른 컴포넌트의 템플릿에서 이 컴포넌트를 사용할 수 있습니다.

<ol>
  <!-- todo-item 컴포넌트의 인스턴스 만들기 -->
  <todo-item></todo-item>
</ol>

그러나 이는 모든 할일 인스턴스에 똑같은 내용을 렌더링할 것입니다. 이래서는 무언가가 부족합니다.
부모 영여의 데이터를 자식 컴포넌트에 집어넣을수 있어야 겠습니다. prop을 전달 받을 수 있도록 할 일
컴포넌트의 정의를 수정해봅시다.


Vue.compoment('todo-item',{
   // 이제 todo-item 컴포넌트는 "prop" 이라고 하는
   // 사용자 정의 속성 같은 것을 입력 받을 수 있습니다.
   // 이 prop은 todo라는 이름으로 정의했습니다.
   props : ['todo'] ,
   template : '<li>{{todo.text}}<li>'
})


이제 이 todo를 v-bind 를 사용하여 각각의 반복되는 컴포넌트에 전달할 수 있습니다.

<div id="app-7">
  <ol>
	<!-- 
	  이제 각 todo-item 에 todo 객체를 제공합니다.
	  화면에 나오므로, 각 항목의 컨텐츠는 동적으로 바뀔 수 있습니다. 
	  또한 각 구성 요소에 "키"를 제공해야합니다 (나중에 설명 됨).
	 -->
	<todo-item
	  v-for="item in groceryList"
	  v-bind:todo="item"
	  v-bind:key="item.id">
	</todo-item>
  </ol>
</div>


Vue.component('todo-item', {
  props: ['todo'],
  template: '<li>{{ todo.text }}</li>'
})

var app7 = new Vue({
  el: '#app-7',
  data: {
	groceryList: [
	  { id: 0, text: 'Vegetables' },
	  { id: 1, text: 'Cheese' },
	  { id: 2, text: 'Whatever else humans are supposed to eat' }
	]
  }
})

이것은 인위적으로 만든 예시이지만, 우리는 앱을 두 개의 더 작은 단위로 나눌 수 있었고,
자식을 props 인터페이스를 통하여 보무로부터 합리적인 수준으로 분리할 수 있었습니다.
이제 앞으로는 부모 앱에 영향을 주지 않으면서 <todo-item> 컴포넌트를 더 복잡한 템플릿과
로직으로 더욱 향상 시킬 수 있을 것입니다.


대규모 응용 프로그램에서는 개발 과정을 관리할 수 있는 수준 하에 두기 위해 전체 앱을 컴포논트로 나누는
것이 필수적이빈다. 나중에 이 가이드에서 컴포넌트에 대해 더 많은 이야기를 나누겠습니다.
하지만 여기서는 컴포넌트를 사용한 앱의 모습이 어덯게 구성될지에 대한(상상의) 예를 제시하겠습니다.

<div id="app">
   <app-nav></app-nav>
   <app-view>
      <app-sidebar></app-sidebar>
      <app-content></app-content>
   </app-view>
</div>

# 사용자 정의 엘리먼트와의 관계

Vue 컴포넌트는 Web Components Spec의 일부인 사용지 지정 엘리먼트와 매우 유사하다는 것을 
눈치 챘을 수 있습니다. Vue의 컴포넌트 구문은 스펙 이후 느슨하게 모델링 되었기 때문입니다.
예를 들어 Vue 컴포넌트는 Slot API와 is 특수 속성을 구현합니다. 그러나 몇가지
중요한 차이가 있습니다.

1. Web Components Spec은 여전히 초안이며 모든 브라우저에서 기본적으로 구현되지 않습니다.
   이에 비해 Vue 컴포넌트는 지원되는 모든 브라우저(IE 9이상)에서 폴리필을 필요로 하지 않으며
   일관되게 작동합니다. 필요한 경우 Vue 컴포넌트는 기본 사용자 정의 엘리먼트 내에 래핑할 수 있습니다.

2. Vue 컴포넌트는 일반 사용자 정의 엘리먼트에서 사용할 수 없는 중요한 기능을 제공합니다.
   특히 컴포넌트 데이터 흐름, 사용자 지정 이벤트 통신 및 빌드 도구 통합이 중요합니다.

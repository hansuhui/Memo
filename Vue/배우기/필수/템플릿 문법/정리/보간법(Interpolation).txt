- 보간법(Interpolation) -


# 문자열

데이터 바인딩의 가장 기본 형태는 "Mustache" 구문(이중 중괄호)을 사용한
텍스트 보간입니다.


<span> 메시지 : {{ msg }}</span>

Mushache 태그는 해당 데이터 객체의 msg 속성 값으로 대체됩니다. 또한 데이터 객체의 
msg 속성이 변경될 떄 마다 갱신됩니다.

v-once 디렉티브를 사용하여 데이터 변경 시 업데이트 되지 않는 일회성 보간을 
수행할 수 있지만, 같은 노드의 바인딩에도 영향을 미친다는 점을 유의해야합니다.

<span v-once> 메시지 : {{ msg }}</span>


# 원시 HTML

이중 중괄호(mustaches)는 HTML이 아닌 일반 텍스트로 데이터를 해석합니다.
실제 HTML 출력하려면 v-html 디렉티브를 사용해야 합니다.

<p>Using mustaches: {{ rawHtml }}</p>
<p>Using v-html directive: <span v-html="rawHtml"></span></p>

Using mustaches : <span style='color:red'> This should be red.</span>

span 의 내용은 rawHtml로 대체됩니다. 이 때 데이터 바인딩은 무시됩니다. Vue는 문자열 기반
템플릿 엔진이 아니기 댸문에 v-html 을 이용해 템플릿을 사용할 수 없습니다.
이와 달리 컴포넌트는 UI 재사용 및 구성을 위한 기본 단위로 사용하는 것을 추천합니다.

! 웹사이트에서 임의의 HTML 을 동적으로 렌더링하려면 XSS 취약점으로 쉽게 이어질 수 있으므로 
  매우 위험할 가능성이 있습니다. 신뢰할 수 있는 콘텐츠에서는 HTML 보건만 사용하고 
  사용자가 제공한 콘텐츠에서는 절대 사용하면 안됩니다.

Mustaches는 HTML 속성에서 사용할 수 없습니다. 대신 v-bind 디렉티브를 사용하세요 :

<div v-bind:id="dynamicId"></div>

boolean 속성을 사용할 떄 단순희 true 인 경우 v-bind 는 조금 다르게 작동합니다.

<button v-bind:disabled="isButtonDisabled">Button</button>


isButtonDisabled가 null , undefined 또는 flase의 값을 가지면 disabled 속성은
렌더링 된 <button> 엘리먼트에 포함되지 않습니다.


# JavaScript 표현식 사용

지금까지 템플릿의 간단한 속성 키에만 바인딩 했습니다. 그러나 실제로 Vue.js는 모든 데이터
바인딩 내에서 JavaScript 표현식의 모든 기능을 지원합니다.

{{ number + 1 }}

{{ ok ? 'YES' : 'NO' }}

{{ message.split('').reverse().join('') }}

<div v-bind:id="'list-'+id"></div>

이 표현식은 Vuew 인스턴스 데이터 범위 내에서 JavaScript로 계산됩니다. 한가지 제한사항은
각 바인딩에 하나의 단일 표현식만 포함될 수 있으므로 아래처럼 작성하면 안됩니다.

<!-- 아래는 구문입니다, 표현식이 아닙니다. -->
{{ var a = 1 }}

<!-- 조건문은 작동하지 않습니다. 삼항 연산자를 사용해야 합니다. -->
{{ if (ok) { return message } }}

! 템플릿 표현식은 샌드박스 처리되며 Math 와 Dte 같은 전역으로 사용 가능한 것에만 접근할 수 있습니다.
템플릿 표현식에서 사용자 정의 전역에 액세스 하지 마십시오.


- 이벤트 수식어 -

이벤트 핸들러 내부에서 event.preventDefault() 또는 event.stopPropagation()를 호출하는 것은
매우 보편적인 일입니다. 메소드 내에서 쉽게 이 작업을 할 수 있지만, dOM 이벤트 세부 사항을 처리하는 
대신 데이터 로직에 대한 메서드만 사용할 수 있으면 더 좋을 것입니다.

이 문제를 해결하기 위해, Vue는 v-on 이벤트에 이벤트 수식어를 제공합니다.
수식어는 점으로 표시된 접미사 입니다.

- .stop

- .prevent

- .capture

- .self

- .once


<!-- 클릭 이벤트 전파가 중단됩니다 -->
<a v-on:click.stop="doThis"></a>

<!-- 제출 이벤트가 페이지를 다시 로드 하지 않습니다 -->
<form v-on:submit.prevent="onSubmit"></form>

<!-- 수식어는 체이닝 가능합니다 -->
<a v-on:click.stop.prevent="doThat"></a>

<!-- 단순히 수식어만 사용할 수 있습니다 -->
<form v-on:submit.prevent></form>

<!-- 이벤트 리스너를 추가할 때 캡처모드를 사용합니다 -->
<!-- 즉, 내부 엘리먼트를 대상으로 하는 이벤트가 해당 엘리먼트에서 처리되기 전에 여기서 처리합니다. -->
<div v-on:click.capture="doThis">...</div>


<!-- event.target이 엘리먼트 자체인 경우에만 트리거를 처리합니다 -->
<!-- 자식 엘리먼트에서는 안됩니다 -->
<div v-on:click.self="doThat">...</div>


! 관련 코드가 동일한 순서로 생성되므로 수식어를 사용할 때 순서를 지정하세요.
  다시말해 @click.prevent.self 를 사용하면 모든 클릭을 막을 수 있으며
  @click.self.prevent 는 엘리먼트 자체에 대한 클릭만 방지합니다.


<!-- 클릭 이벤트는 최대 한번만 트리거 됩니다. -->
<a v-on:click.once="doThis"></a>

네이티브 DOM 이벤트에 독점적인 다른 수식어와 달리, .once 수식어는 컴포넌트 이벤트에서도
사용할 수 있습니다. 아직 컴포넌트에 대해 읽지 않았더라도 지금 당장은 걱정하지 마십시오.

<!-- 스크롤의 기본 이벤트를 취소할 수 없습니다. -->
<div v-on:scroll.passive="onScroll">...</div>

추가로 , Vue는 .passive 수식어를 제공합니다. 특히 모바일 환경에서 성능향상에 도움이 됩니다.
예를 들어 , 브라우저는 핸들러가 event.preventDefault() 를 호출할지 알지 못하므로 
프로세스가 완료된 후 스크롤 합니다. .passive 수식어는 이 이벤트가 기본 동작을 멈추지
않는다는 것을 브라우저에 알릴 수 있습니다.

! .passive 와 .prevent 를 함께 사용하지 마세요. 패시브 핸들러는 기본 이벤트를 막지 않습니다.



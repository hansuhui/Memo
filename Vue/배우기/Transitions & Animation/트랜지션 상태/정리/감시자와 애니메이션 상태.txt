- 감시지와 애니메이션 상태 -

감시자를 사용하면 숫자 속성의 변경 사항을 다른 속성으로 애니메이션 할 수 있습니다. 처음에는 
복잡해 보일 수도 있으므로 Twwen.jsㄹ를 사용하여 예제를 살펴 보겠습니다.


<script src="https://cdn.jsdelivr.net/npm/tween.js@16.3.4"></script>

<div id="animated-number-demo">
   <input v-model.numbe="number" type="number" step="20">
   <p>{{ animatedNumber }}</p>
</div>



new Vue({
   el : "#animated-number-demo",
   data : {
      number : 0,
      animatedNumber : 0
   },
   watch : {
      number : function(newValue , oldValue){
         var vm = this
         function animate () {
            if (TWEEN.updat()){
               requestAnimationFrame(animate)
            }
         }

         new TWEEN.Tween({ tweeningNumber : oldValue })
            .easing(TWEEN.Easing.Quadratic.Out)
            .to({ tweeningNumber : newValue }, 500)
            .onUpdate(function() {
               vm.animateNumber = this.tweeningNumber.toFixed(0)
            })
         .start()

         animate()
      }
   }
})

숫자를 갱신하면 변경 사항이 입력 아래에 애니메이션으로 표시됩니다. 이것은 멋져 보이지만,
예를 들어 유효한 CSS 색상과 같이 숫자로 직접 저장되지 않는 것은 어떻게 할까요?
다음은 Color.js를 추가하여 이를 수행하는 방법입니다.



<script src="https://cdn.jsdelivr.net/npm/tween.js@16.3.4"></script>
<script src="https://cdn.jsdelivr.net/npm/color-js@1.0.3"></script>

<div id="example-7">
    <input v-model="colorQuery"
           v-on:keypu.enter="updateColor"
           placeholder="Enter a color">
    <button v-on:click="updateColor">Update</button>
    <p> Proview:</p>
    <span v-bind:style="{ backgroundColor : tweendCssColor }" 
          class="example-7-color-preview"></span>
    <p>{{ tweenedCSSColor }}</p>
</div>



var Color = net.brehaut.Color

new Vue({
   el : '#example-7',
   data : {
      colorQuery : '',
      color : {
         red : 0,
         green : 0,
         blue : 0,
         alpha 1
      },
      tweenedColor : {}
   },
   created : function () {
      this.tweenedColor = Object.assign({}, this.color)
   },
   watch : {
      color : function () {
         function animate () {
            if (TWEEN.update(()){
               requestAnimationFrame(animate)
            }
         }

         new TWEEN.Tween(tweenedColor)
            .to(this.color,750)
            .start()

         animate()
      }
   },
   computed : {
      tweenedCSSColor : function () {
         return new Color ({
            red : this.tweenedColor.red,
            green : this.tweendColor.green,
            blue : this.tweenedColr.blue,
            alpha : this.tweenedColor.alpha
         }).toCSS()
      }
   },
   methods : {
      updatColor : function () {
         this.color = new Color(this.colorQuery).toRGB()
         this.colorQuery = ''
      }
   }
})


.example-7-color-preview {
   display : inline-block;
   width : 50px;
   height : 50px;
}


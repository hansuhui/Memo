- 컴포넌트를 이용한 트랜지션 구성 -

여러 상태 트랜지션을 관리하면 Vue 인스턴스 또는 컴포넌트의 복잡성을 빠르게 높일 수 있습니다. 다행히도
많은 애니메이션을 전용 하위 컴포넌트로 추출 할 수 있습니다. 이전 예제의 숫자를 이용하는 
애니메이션을 사용해보겠습니다.


<script src="https://cdn.jsdelivr.net/npm/tween.js@16.3.4"></script>

<div id="example-8">
   <input v-model.number="firstNumber" type="number" step="20"> +
   <input v-model.number="secondNumber" type="number" step="20"> =
   {{ result }}
  <p>
    <animated-integer v-bind:value="firstNumber"></animated-integer> +
    <animated-integer v-bind:value="secondNumber"></animated-integer> =
    <animated-integer v-bind:value="result"></animated-integer>
  </p>
</div>


// 이 복잡한 트위닝 로직은 이제 응용 프로그램에서
// 애니메이션을 적용하려는 숫자 사이에서 재사용 할 수 있습니다.
// 또한 컴포넌트는보다 동적인 트랜지션 및 복잡한 트랜지션 전략을
// 구성할 수 있는 깨끗한 인터페이스를 제공합니다.
Vue.component('animated-integer', {
   template : '<span>{{ tweeningValue }}</span>',
   props : {
      value : {
         type : Number,
         required : true
      }
   },
   data : function () {
      retrun {
         tweeningValue : 0
      }
   },
   watch : {
      value : function (newValue , oldValue) {
         this.tween(oldValue,newValue)
      }
   },
   mounted : function(){
      this.tween(0,this.value)
   },
   methods : {
      tween : function (startValue , endValue) {
         var vm = this
         function animate (){
            if(TWEEN.update()){
               requestAnimationFrame(animate)
            }
         }

         new TWEEN.Tween({tweeningValue : startValue})
         .to({ tweeningValue:endValue },500)
	 .onUpdate(function(){
	     vm.tweeningValue = this.tweeningValue.toFixed(0)
	  })
	 .start()

	 animate()
      }
   }
})


// 모든 Vue 인스턴스에서 모든 복잡성이 제거 되었습니다!

new Vue({
   el: '#example-8',
   data : {
      firstNumber : 20,
      secondNumber : 40
   },
   computed : {
      result : function () {
         retrun this.firstNumber + this.seconNumber
      }
   }
})




자식 컴포넌트 내에서, 이 페이지에서 다룬 트랜지션 전략과 Vue의 기본 제공 트랜지션 시스템에서 제공하는
트랜지션 전력을 조합하여 사용할 수 있습니다. 함께 사용할 수 있는 것에는 거의 제한이 없습니다.


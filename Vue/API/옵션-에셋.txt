[옵션/에셋] 


# directives

- 타입: Object

- 상세:

  Vue 인스턴스테서 사용할 수있도록 만들어진 디렉티브의 해시

- 참고 : 사용자 정의 디렉티브


# filters 

- 타입: Object

- 상세:

  Vue 인스턴스에서 사용할 수 있도록 만들어진 필터의 해시

- 참고 : Vue.filter



# components

- 타입: Object

- 상세:

  Vue 인스턴스에서 사용할 수 있도록 만들어진 컴포넌트의 해시

- 참고 : 컴포넌트



# parent

- 타입: Vue instance

- 상세:

  작성 할 인스턴스의 상위 인스턴스를 지정해야 합니다. 부모-자식 관계를 설정합니다.
  부모는 자식에 대해 this.$parent 로 접근할 수 있고 자식은 보무의 $children 배열로 추가됩니다.

! $parent 와 $children 은 적당히 사용해야 합니다. 대부분 escape-hatch로 사용합니다.
  부모와 자식 간 의사소통은 props와 이벤트 사용을 권장합니다.


# mixins

- 타입: Array<Object>

- 상세:

  mixins 옵션은 mixin 객체 배열을 받아들입니다. 이러한 mixin 객체는 일반 
  인스턴스 객체와 마찬가지로 인스턴스 옵션을 포함할 수 있으며, Vue.extend()에서
  같은 옵션 병합 로직을 사용하여 최종 옵션과 병합됩니다. 예:mixin에 생성된 훅이 포함되어 있고
  컴포넌트 자체에도 하나가 있으면 두 함수가 모두 호출됩니다.

  Mixin 훅은 제공된 순서대로 호출되며 컴포넌트의 훅보다 먼저 호출됩니다

- 예제:

var mixin = {
  created: function () { console.log(1) }
}
var vm = new Vue({
  created: function () { console.log(2) },
  mixins: [mixin]
})
// => 1
// => 2


- 참고 : Mixins


# extends 

- 타입: Object | Function

- 상세:

  vue.extend 를 사용하지 않고 선언적으로 다른 컴포넌트를 확장할 수 있습니다. 
  (일반 옵션 객체 또는 생성자 일 수 있습니다.) 이것은 주로 싱글 파일 
  컴포넌트 사이를 쉽게 확장할 수 있도록 하기 위함입니다.

  이것은 mixins 와 유사합니다. 차이점은 컴포넌트의 자체 옵션이 확장되는 원본 컴포넌트보다
  우선순위가 높다는 것입니다. 


- 예제:


var CompA = { ... }

// Vue.extend를 호출하지 않고도 CompA를 확장할 수 있습니다.
var CompB = {
  extends: CompA,
  ...
}


# provide / inject

2.2.0에서 추가됨

- 타입: 
 
  provide: Object | () => Object
  inject: Array<string> | { [key: string]: string | Symbol | Object}


- 상세:

! provide와 inject는 주로 고급 플러그인/컴포넌트 라이브러리를 위해 제공됩니다. 
  일반 애플리케이션 코드에서는 사용하지 않는 것이 좋습니다.

  이 옵션 쌍은 함께 사용하여 상위 컴포넌트가 컴포넌트 계층 구조의 깊이에 관계없이
  모든 하위 항목에 대한 종석을 주입하는 역할을 하도록 허용합니다. React에 익숙하다면
  이것은 React의 컨텍스트 기능과 매우 유사합니다.

  provide 옵션은 객체 또는 객체를 반환하는 함수여야 합니다. 이 객체에는 하위 항목에
  삽입할 수 있는 속성이 포함되어 있습니다. ES2015 심볼을 이 객체의 키로 사용할 수
  있지만 Symbol 과 Reflect.ownKeys를 기본적으로 지원하는 환경에서만 가능합니다.

  inject 옵션은 문자열의 배열이거나 키가 로컬 바인딩 이름을 나타내는 객체이고 사용
  가능한 주입에서 검색할 키 (문자열 또는 기호)값이어야합니다.

  주의 : provide와 inject 바인딩은 반응형이 아닙니다. 이는 의도적인 것입니다.
        그러나 감시중인 객체를 전달하면 해당 객체의 속성은 계속 반응형입니다.

- 예제:

var Provider = {
  provide: {
    foo : 'bar'
  },
  // ...
}

var Child = {
   inject: ['foo'],
   created () {
      console.log(this.foo) // => 'bar'
   }
   // ...
}

ES2015의 Symbol을 사용하여 provide 함수와 inject 객체를 사용하세요 :

const s = Symbol()

const Provider = {
  provide () {
    return {
      [s]: 'foo'
    }
  }
}

const Child = {
  inject: { s },
  // ...
}


  다음 두 예제는 Vue 2.2.1 버전 이후에서만 작동합니다 이번 버전에서는 
  props 와 data를 초기화한 후 사용할 수 있습니다.

주입한 값을 속성의 기본값으로 사용


const Child = {
  inject: ['foo'],
  props: {
    bar: {
      default () {
        return this.foo
      }
    }
  }
}


주입한 값을 data로 사용

const Child = {
  inject: ['foo'],
  data () {
    return {
      bar: this.foo
    }
  }
}


2.5.0+에서 주입은 기본 값을 옵션으로 제공할 수 있습니다.

const Child = {
  inject: {
    foo: { default: 'foo' }
  }
}


다른 이름의 속성에서 주입해야 하는 경우 from을 사용하여 소스 속성을 나타냅니다.

const Child = {
  inject: {
    foo: {
      from: 'bar',
      default: 'foo'
    }
  }
}


prop의 기본값과 마찬가지로 원시형이 아닌 값에 대해서는 팩토리 함수를 사용해야합니다.


const Child = {
  inject: {
    foo: {
      from: 'bar',
      default: () => [1, 2, 3]
    }
  }
}


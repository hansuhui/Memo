[옵션/데이터]


# data 

- 타입: Object | Function

- 제한: 컴포넌트에서 사용될 떄만 함수를 승인합니다.

- 상세 :

  Vue 인스턴스의 데이터 객체입니다. Vue는 속성을 getter/setter로 재귀적으로 변환해 "반응형"으로
  만듭니다. 객체는 반드시 기본 객체이어야 합니다: 브라우저 API 객체 및 프로토타입 속성과 같은 
  기본 객체는 무시됩니다. 데이터는 데이터일 뿐이며 객체 자체의 상태를 유지하는 동작은 
  관찰하지 않는 것이 좋습니다.

  일단 관찰되어지면, 루트 데이터 객체에 반응형 속성을 추가할 수 없습니다. 따라서 인스턴스 생성
  이전에 모든 루트 수준의 반응형 속성을 미리 선언해야 합니다

  인스턴스가 생성된 이후 원래 데이터 객체는 vm.$data로 접근할 수 있습니다. Vue 인스턴스는
  데이터 객체에 있는 모든 속성을 프록시하므로 vm.a는 vm.$data.a 와 동일합니다.

  ~ 또는 $ 로 시작하는 속성은 Vue의 내부 속성 및 API 메소드와 충돌할 수 있으므로 
  Vue 인스턴스에서 프록시 되지 않습니다. vm.$data._property 로 접근해야 합니다.

  컴포넌트를 정의할 때 data는 데이터를 반환하는 함수로 선언해야 합니다. data 를 위해
  일반 객체를 사용하면 생성된 모든 인스턴스에서 동일한 객체가 참조로 공유됩니다.
  data 함수를 제공함으로써 새로운 인스턴스가 생성될 때마다 호출하여 초기 
  데이터의 새 복사본을 반환하 수 있습니다.

  필요한 경우, vm.$data 를 JSON.parse(JSON.stringify(...)) 를 통해 전달함으로써
  원복 객체의 복사복을 얻을 수 있습니다


- 예제 :

var data = { a: 1 }

// 직접 객체 생성
var vm = new Vue({
  data: data
})
vm.a // => 1
vm.$data === data // => true

// Vue.extend()에서 반드시 함수를 사용해야 합니다.
var Component = Vue.extend({
  data: function () {
    return { a: 1 }
  }
})



! 화살표 함수를 data 에서 사용하면 안됩니다. 
  (예를 들어, data: () => { return { a: this.myProp } } )
  화살표 함수가 부모 컨텍스트를 바인딩하기 때문에 this는 예상과 달리 
  Vue 인스턴스가 아니며, this.myProp는 정의되지 않습니다.

- 참고 : 반응형에 대해 깊이 알기


# props

- 타입 : Array<string> | Object

- 상세 :

  부모 컴포넌트의 데이터를 받을 수 있게 노출된 속성의 리스트/해시 입니다.
  단순한 배열 기반 구문과 사용자 지정 유효성 검사 및 기본값과 같은 고급 구성을
  허용하는 Object 기반 구문이 있습니다.

- 예제 :

// 단순한 구문
Vue.compoennt('props-demo-simple',{ 
  props: ['size', 'myMessage']
})

// 유효성 검사를 포함한 객체 구문
Vue.componet('props-demo-advanced', {
  props : {
    // 타입 체크만 합니다.
    height : Number,
    // 타입 체크과 유효성 검사를 합니다.
    age : {
      type: Number,
      default: 0,
      required: true,
      validatior : function (value) {
        return value >= 0
      }
    }    
  }
})


- 참고 : Props



# propsData

- 타입 : { [key: string]  any}

- 제한: new를 이용한 인스턴스 생성때만 사용됩니다.

-상세: 

  인스턴스를 생성하는 동안 속성을 전달합니다.
  이것은 단위 테스트를 쉽게 하기 위한 것입니다.

- 예제:

var Comp = Vue.extend({
  props: ['msg'],
  template : '<div>{{ msg }}</div>'
})


var vm = new Comp({
  propsData: {
    msg: 'hello'
  }
})


# computed 

- 타입:{ [key: string]: Function | { get: Function, set: Function}}

- 상세:

  Vue 인스턴스에 추가되는 계산된 속성입니다. 모든 getter와 setter는 자동으로 
  this 컨텍스트를 Vue 인스턴스에 바인딩 합니다.

! 계산된 속성을 정의 할 때 화살표 함수를 사용하면 안됩니다. 
  화살표 함수가 부모 컨텍스트를 바인딩하기 때문에 this는 Vue 인스턴스가 아니며 
  this.a는 정의되지 않습니다.


  계산된 속성은 캐시 되면 의존하고 있는 반응형 속성이 변경되는 경우 다시 평가됩니다.
  특정한 의존성이 인스턴스의 범위을 벗어나는 경우(반응형이지 않은 경우)에 계산된 속성은
  갱신되지 않습니다. 그러나 여전히 반응형 속성을 갖지 않고 있기 떄문에 이를수정하는 경우
  DOM 갱신을 발생시키지 않습니다.

  대부분의 상황에서 cache: false 를 사용하는 것은 이상적인 방법이 아닙니다.
  가능할 때마다 외부 데이터를 반응형 시스템 안으로 가져오는 것이 휠씬 좋습니다.
  예를 들어, 계산된 속성이 원도우 크기에 의존하는 경우 이 정보를 data 에 저장한 다음
  resize 이벤트를 사용하여 데이테를 최신 상태로 유지할 수 있습니다. 이것 또한 반응형입니다.

- 예제:

var vm = new Vue({
  data: { a: 1},
  computed: { 
    //get만 가능합니다.
    aDouble: function () {
      return this.a  * 2
    },
    // get과 set 입니다.
    aPlus: {
      get: function () {
        return this.a + 1
      },
      set: function (v) { 
        return this.a  = v - 1
      }
    }
  }
})
vm.aPlus   // => 2
vm.aPlus = 3
vm.a       // => 2
vm.aDouble // => 4


- 참고 : 계산된 속성

# methods 

- 타입: { [key : string]: Function}

- 상세:

  Vue 인스턴스에 추가할 메소드입니다. VM 인스턴스를 토애 직접 접근하거나 디렉티브
  표현식에서 사용할수 있습니다. 모든 메소드는 자동으로 this 컨텍스트를 
  Vue 인스턴스에 바인딩합니다.

! 화살표 함수를 메소드를 정의하는데 사용하면 안됩니다.
  화살표 함수가 부모 컨텍스트를 바인딩하기 떄문에 this는 Vue 인스턴스가 아니며 
  this.a는 정의되지 않습니다.

- 예제:


var vm = new Vue({
  data: { a: 1 },
  methods: {
    plus: function () {
      this.a++
    }
  }
})
vm.plus()
vm.a // 2

- 참고 : 메소드와 이벤트 핸들링


# watch

- 타입: { [key: string]: string | Function | Object | Array}

- 상세: 

  키가 표시되는 표현식이고 값이 콜백입니다. 값은 메서드 이름이 문자열이거나 
  추가 옵션이 포함된 Object가 될 수도 있습니다. Vue인스턴스는 인스턴스 생성지 객체의
  각 항목에 대해 $watch() 호출합니다.

- 예제:

var vm = new Vue({
  data: {
    a: 1,
    b: 2,
    c: 3,
    d: 4,
    e: {
      f: {
        g: 5
      }
    }
  },
  watch: {
    a: function (val, oldVal) {
      console.log('new: %s, old: %s', val, oldVal)
    },
    // 문자열 메소드 이름
    b: 'someMethod',
    // 깊은 감시자
    c: {
      handler: function (val, oldVal) { /* ... */ },
      deep: true
    },
    // 콜백은 관찰이 시작된 직후 호출됩니다.
    d: {
      handler: function (val, oldVal) { /* ... */ },
      immediate: true
    },
    e: [
      function handle1 (val, oldVal) { /* ... */ },
      function handle2 (val, oldVal) { /* ... */ }
    ],
    // watch vm.e.f's value: {g: 5}
    'e.f': function (val, oldVal) { /* ... */ }
  }
})
vm.a = 2 // => new: 2, old: 1


! 화살표 함수를 감시자에 사용하면 안됩니다. 
 (예를 들어, searchQuery: newValue => this.updateAutocomplete(newValue)) 
  화살표 함수가 부모 컨텍스트를 바인딩하기 때문에 this는 Vue 인스턴스가 아니며 
  this.updateAutocomplete는 정의되지 않습니다.

- 참고 : 인스턴스 메소드 - vm.$watch


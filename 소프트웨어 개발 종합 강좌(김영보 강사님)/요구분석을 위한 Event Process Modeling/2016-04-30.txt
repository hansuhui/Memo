- 관리자가 되더라도 요구분석에서 순을 넣지 말것!

- 소프트웨어 개발을 프로그램 중심으로 접근하지 마세요

- 지속적으로 나 만의 요구분석 방법을 확립하세요
논리가 확고하면 응용은 어렵지 않습니다.

==================[EP 모델링 개요]==================

[EP 모델링 소개]

프로그램 개발 > 시스템 설계 > 요구 분석    (중요성 인식!!!!)

!!!시스템 개발의 성공과 실패는 요구사항의 명확함에 따라 좌우!!!


Event Process Modeling 이란?

- 요구분석 방법(론)

- Event Process 방법으로 요구사항 정의

- 약칭 : EP Modeling


점증적으로 명확하게 요구 사항을 정의 >
요구분석을 수행하는 프로세스 측면 >(요구사항)
요구분석 단계

----

논리와 근거를 갖춘 형태로 요구사항을 정의 >
요구사항을 정의하는 방법 측면 >(요구사항)
요구사항 정의 방법


------------

마라톤을 하기 위해 건각들이 출발선에 서있다.

- 이벤트
- 출발 신호를 듣고 건각들이 달려 나간다
  출발 신호는 건각들이 달려 나가게 하는 원인 제공
  출발 신호 > 이벤트


- 프로세스
- 건각들이 결승점을 향해 한발씩 뛰어가고 있다.
  한발씩 뛰는 것 > 프로세스
   프로세스를 연속적으로 수행하여 목적(목표) 달성
   프로세스는 임의로 시작할 수 없다 > 이벤트가 필요

'시작이 있어야 과정이 있고 끝이 있다.

-------------

-이벤트 프로세스-

액터 행동 > 이벤트 발생 > 원인 재공 > 프로세스 수행
> 이벤트 밸생 > 원인 제공 > 다시 액터 행동

'행동에 대한 또 다른 행동 발생


논리와 근거를 갖춘 형태로 요구사항을 시나리오로 정의



[EP 모델링 목표]

- 사용자
  정보기술 지식이 없다
  시스템 처리를 통해 문제점을 해결하려고 한다.
  요구사항이 시스템에 미치는 영향을 알지 못한다.
  시스템이 워하는 형식으로 요구사항을 제시하지 못한다.

'사용자를 이해 시켜야 한다.

- 개발자
  사용자가 요구사항을 자주 변경하여 개발이 지연된다.
  변경 요구사항을 시스템에 반영해야 한다.

'요구사항이 확실하지 않으면 개발이 더 느리고 품질이 떨어진다.

- 요구사항 변경 예방 전략을 갖고 요구분석 수행

'요구분석자가 해야할 일!!(논리와 근거를 가지고!!)

-------------

- EP 모델링 기본 목표
 요구사항 이해

 요구사항 정의

 요구사항 분석

 요구사항 확정

 긍극적으로 요구사항 병경 예방!!!

'사용자가 처음 요구한것을 변경하지 못하게 하는것!!


-------------



- 현행 비즈니스 프로세스 및 문제점 이해

- 시스템 개발은 사용자의 요구사항을 시스템으로 구축하는것
  요구사항을 정확하게 이해하는 것은 시스템 개발의 기본

- 사용자는 문제점을 해결하기 위해 요구사항을 제시
  현행 비즈니스 프로세스 이해 필요
  요구사항의 근본적인 원인과 목적을 이해하기 위한것
  요구사항을 명확하게 분석할 수 있다.

- 사용자가 문제점을 전부 제시하지 못한다.
  분석가가 문제점을 추출해야 한다.
   현행 비즈니스 프로세스를 이해햐아 한다.

'사용자는 알지 못하는게 많다. 그러니
'분석가가 프로세스를 이해해서 사용자에게 알리고
'바로 잡아서 요구분석을 해야한다.

'분석단계에서 바로 잡지 못하면
'나중에 개발 단계에서 문제가 발생한다.!!

-------------

요구사항을 파악하기 전에 현행 비지니스 프로세스 조사를
선행하여 현행 비즈니스 프로세스를 이해해야 한다.

'현재에 문제점이 있어서 프로그램으로 개발하는것이다.
'그러니 현재 어떻게 돌아가는지 알아야 한다!!!

-------------

요구사항을 완전하게 이해하지 못하면 요구사항 변경이 발생한다.

'사용자는 IT를 모른다 그러니 분석가가 그것을 전재에 두지 않고
'요구분석을 하게 되면 나중에 문제가 생길수 밖에 없다.
'사용자에게 설명 후 문서로 근거를 남겨야 한다.


-------------

- 사용자 요구사항이 시스템 개발 기준

- 사용자는 요구사항을 명확하게 제시해야 한다
  요구사항을 포괄적으로 제시한다
  사용자는 요구사항의 명확함 자체를 모른다

- 처음부터 사용자가 요구사항을 명확하게 제시하지 못한다는
  생각을 갖고 접근

'사용자는 자신이 어떤걸 명확하게 원하는지 알지 못한다.
'시스템을 알지 못하므로 두리뭉술하게 요구할 수 밖게 없다.
'분석가는 그것을 파악해서 요구사항을 명확하게 만들어야 한다.

-------------

- 사용자의 요구사항에는 틀림없이 목표가 있다.

- 사용자는 시스템 처리를 통해 목표를 달성하려고 한다.
  사용자는 요구사항 목표를 포괄적으로 제시한다.
  요구사항 목표를 달성하기 위해 할 것을 제시하지 못한다.

- 요구사항 목표를 달성하기 위해 무엇[What]을 할것인가를 정의
  어떻게[How]할 것인가는 정의하지 않는다.

-------------

- 개발된 시스템은 사용자가 사용

- 사용자가 주체가 되어 시스템을 수행해야 한다.
  사용자가 시스템을 따라가서는 안된다.  

- 사용자 행동 중심으로 요구사항을 정의
  시스템은 사용자의 행동을 받아서 처리

'사용자가 시스템을 따라 오게하는것이 아니다(사용자가 불편함)
'시스템이 사용자를 따라가야 한다.!!(사용자 맞춤-사용자 중심의 UI)

-------------

- 요구사항 전제조건

사용자가 무엇을 할 것인가 > 사용자 행동 < 데이터 입력

시스템이 무엇을 할 것인가 > 시스템 처리 < 데이터 처리, 저장

시스템 처리를 통해서 요구항 목표 달성

'사용자의 행동을 분석한후 시스템을 개발!!(사용자 입장에서 개발)
'ex) 사용자의 편의을 위해 검색시 서제스트 처리(아래 자동완성리스트 네이버 마냥)

-------------

- 요구사항을 정의하기 위해 요구사항을 분석한다

- 요구사항 정의와 분석은 동일한 개념이다.

- 요구 사항을 정의한다는 본연의 목적은 같다

- 수행 주체, 수행 관점 , 접근 방법 , 수행 범위가 다르다

- 요구사항 정의와 분석을 분리하여 수행

-------------

요구사항 정의 > 사용자 관점에서 요구사항 정의(사용자 행동 줌심)

요구사항 분석 > 시스템 처리 관점에서 요구사항을 정의 (시스템 처리 중심)


'사용자의 편의를 위해서 어떤식으로 개발을 할것인지를 생각한다!!
'분석가는 사용자의 행동 중심으로 어떻게 개발할지를 생각해야 한다!!

-------------

- 시스템 처리 관점에서 요구사항을 정의

- 사용자 고나점의 요구사항 정의는 시스템 처리가 피동적으로 된다.
  이것은 단편적인 관점에서 요구사항을 정의하는 것
    시스템이 주체가 되어 사용자가 행동하는 관점도 필요
    시스템 처리 중심으로 요구사항 정의가 필요
    시스템 처리 관점에서 요구사항을 정의하는 것

- 요구사항을 완전하게 정의하기 위한 것
    
-------------
- 시스템 처리 관점은 정보기술을 동반

- 요구사항에 필요한 정보기술 분석
  무엇(what)도 중요하지만 , 어떻게(How)도 중요
  어떻게 정보기술을 접목할 것인가를 분석

- 효울적이고 합리적으로 요구사항을 정의하기 위한 것

- 완전하게 요구사항을 정의하기 위한 것

-------------

- 요구사항을 전부 제시하고 정의 하였다

- 향후 시스템 모습을 확정하였다

- 더 이상 요구사항의 추가/변경이 없다

- 사용자의 목소리가 언제라도 반영하는 환경에서 벗어날 수 있다

- 목적 > 요구사항 추가/변경 예방

'사용자가 요구사항을 확정하지 않으면 개발을 시작하지 말아라!!!
'그렇게 되기 위해선 사용자에게 모든 요구분석 사항을 이해시켜야한다.!!

-------------

- 사용자가 문서를 보고 요구사항을 확정할 수 없다.

- 문서에 작성된 요구사항 > 개념적 , 추상적 형태
  문서가 갖는 한계
  사용자는 요구사항에 대해 확신을 갖지 못한다.
  그런데, 사용자가 확신을 가져야 요구사항을 확정할 수 있다.
  요구사항을 형상화 , 구체화

- 프로토타입(Prototype) 작성

- 분석가 , 사용자는 반복하여 검토 및 수정

'사용자가 요구에 확신을 갖도록 하면 요구사항을 확정할수 잇다!!

-------------

- 프로토타입을 확정하였는데 , 요구사항 변경 발생

- 분석가와 사용자의 의사와 관계없이 발생
  프로젝트 기간에는 거의 발생하지 않는다.
  요구사항 변경관리 차원에서 조정

- 요구사항 변경 발생 요인
  프로토타입을 면밀하게 작성하지 않았다.
  프로토타입을 철저하게 검토하지 않았다.
  일부 사용자의 요구사항만 반영하였다.(신경써야할것!!)

-------------

- 요구사항을 확정하더라도 변경할 수 있다.

- 요구사항 변경관리 통제를 받는다
  귀책 사유가 사용자에게 있고, 책임 발생
  개발자는 요구사항 변경에 따른 보상을 받을 수 있다.
    그래도, 요구사항 변경은 싫다

- 개발자가 시스템 개발 분위기를 만들어야 한다

- 명확하게 요구사항을 정의하고
  면밀하게 프로토타입을 작성하여
  사용자가 프로토타입을 확정할 때 까지 반복 검토


'갑에 끌려다니면 안된다.
'기술에 대해선 내가 갑이여야 한다.

--------------------------------------------

[EP 모델링 단계]

Event Process Modeling 5단계

요구사항 이해 [비즈니스 현행 모델링]  (뿌리)

요구사항 정의 [비즈니스 목표 모델링] (줄기)
요구사항 정의 [유스케이스 모델링]    (가지)

요구사항 분석 [시스템 모델링] (잎)

요구사항 확정 [프로토타입 모델링] (숲,조경)

-------------

- 현행 비즈니스 프로세스 조사/분석
  현행 비즈니스 프로세스 이해 , 현행 문제점 추출

- 현행 비즈니스 시나리오 정의

- 시스템 개발 목적 이행

-------------

- 현행 비즈니스 프로세스 조사,분석
  현행 비즈니스 프로세스를 파악할 수 있다.
  자연스럽게 현행 문제점을 도출할 수 있다.
  요구사항이 제시된 근본적인 원인을 이해할 수 있다.

- 사용자의 시스템 개발 목적을 정확하게 이해할 수 있다.

- 주의사항
  유사 업무에 경험이 있다고 짐작하여 판단하지 않는다.
  프로젝트마다 다르다.

'경험이 있다고 절대로 아는척 하지마라!!
'사용자의 말을 전부 들어야 한다.

-------------

- 문제점에 대한 해결방안 수립
  비즈니스 목표 모델링에서 수행
  전체적인 관점에서 해결방안 수립 필요
  현행 비즈니스 프로세스 이해와 문제점 추출에 소홀하게 된다.

- 요구사항을 정의하지 않는다.

- 요구사항이 거론되더라도 메모 형태로 간단하게 작성
  현행 비즈니스 프로세스 이해를 바탕으로 정의
  현재, 현행 비즈니스 프로세스 조사가 끝나지 않았다.

 예제는 책 18~19p

-------------

요구사항 추출정의 , 문제점 해결 방안 수립 >

목표 비즈니스 시나리오 정의(비즈니스 프로세스 관점) >

시스템 개발 범위 선정 > 요구사항 목표 달성

'시스템은 사용자 중심으로 가야한다.

-------------

- 목표 비즈니스 프로세스 수립

- 요구사항 정의 관점에서 수립
  BPR 관점에서 수립하지 않는다
  BPR: Business Process Reengineering

- 비즈니스 프로세스 단위로 정의

- 온라인 및 오프라인 비즈니스 프로세스 정의
  오프라인 비즈니스 프로세스를 요구사항으로 간주  

-------------

- 요구사항 목표를 달성하는 비즈니스 시나리오 정의

- 요구사항 목표는 다수의 비즈니스 프로세스로 달성할 수 있다
  비즈니스 프로세스는 흐름을 가지고 있다
  흐름이란 실행순서를 의미 > 비즈니스 시나리오

- 온라인과 오프라인 비즈니스 포로세스가 조화를 이룬 비즈니스 시나리오 정의
  비즈니스 프로세스를 누락하면 흐름 단절
  불안정한 비즈니스 시나리오가 된다.

- 비즈니스 프로세스 관점에서 요구사항 정의

'분석가가 노력해서 잘할수록
'성공하는 프로젝트가 나온다!! (고객이 만족해서 다시 찾는 프로젝트)

-------------

- 해결방안을 수립하여 목표 비즈니스 프로세스에 반영

- 문제점에 대한 해결방안은 시스템 처리를 동반
  시스템 처리를 동반하지 않는 문제점은 요구사항 범위가 아님
   EP 모델링의 문제점 해결방안 수립 기준

- 오프라인 비즈니스 프로세스의 문제점 해결은 BPR 범주
  요구사항에서 제외하는 것은 아니다
   문제점 해결 방안을 수립하지 않는 것 뿐
   문제점을 해결한 결과는 요구사항에 반영

-------------

- 개발자 입장에서 보면 시스템 개발 범위도 중요

- 비즈니스 시나리오 전체가 시스템 개발 범위는 아니다.
  시스템 처리를 동반해야 시스템 개발 범위가 된다.

- 온라인 비즈니스 프로세스가 전부 시스템 개발 범위는 아니다.
  프로젝트 관계자가 결정한 것이 시스템 개발범위(중요!!)

예제 22~23p


---------------------------------------

[유스케이스 모델링]

- 요구 사항 목표를 달성하는 시나리오 정의

- 온라인 비즈니스 프로세스가 대상
  오프라인 비즈니스 프로세스는 제외

- 액터와 시스템이 행동하는 일련의 흐름 정의 > 시나리오
  액터와 시스템이 할 것을 정의
  사용자 관점(중심)에서 정의

-------------

- 유스케이스 작성 방법
  일반적으로 알려진 방법과 EP 모델링 방법에 차이 있음

- EP 모델링 방법
  목표 비즈니스 시나리오 정의
   요구사항 목표가 같은 비즈니스 프로세스 추출
   유스케이스로 선정
  유스케이스 시나리오 작성

- 시스템 전체 흐름을 수립한 후 개별 단위로 상세하게 접근

-------------

- 전문 기술을 포함하지 않게 시나리오 작성

- 대부분의 분석가가 시술자 출신이므로 기술적으로 접근
  기술적 접근은 무엇 보다 어떻게에 중점을 둔것
  사용자는 방법에는 관심이 없고, 목표 달성에 관심이 있다.

- 시용자가 시나리오를 검토하여 요구사항 반영 여부를 확인한다
  사용자는 정보기술에 대한 지식이 없다
  전문 기술을 포함하면 사용자가 확인할 수 없다
  전문 기술을 포함하지 않은 시나리오로 작성
  이것이 사용자 관점에서 시나리오를 정의하는것
  기술적인 접근은 시스템 모델링에서 한다

-------------

- EP 모델링에서 유스케이스 작성은 쉽다

- 현행 비즈니스 프로세스와 문제점을 이해하고 있다.

- 목표 비즈니스 프로세스를 수립하였다.
  각각의 비즈니스 프로세스 기능과 목표 이해
  액터와 시스템 역할에 대한 개념 파악 완료

- 유스케이스 시나리오를 개략적으로 파악
  상세하게 유스케이스 모델을 작성하면 된다.

- 전체 비즈니스 시나리오를 수립하는 것이 어렵다.

시나리오 예제 26p

--------------------------

[시스템 모델]

- 요구사항을 분석하여 시스템 처리 시나리오 정의

- 유스케이스 시나리오를 기준으로 작성
  유스케이스 시나리오를 확장하는 개념
  유스케이스 시나리오의 시스템 처리를 상세하게 작성

- 시스템 처리 관점에서 정의
  시스템 처리 중심으로 작성
  시스템 처리 방법(How)을 포함

- 완전하게 요구사항을 정의하기 위한 것

-------------

- 요구사항은 요구분석 단계에서 완전하게 정의

- 완전하게 요구사항을 정의하지 않으면
  요구분석 단계 이후에서 요구사항을 정의해야 한다
   요구분석 단계를 밟아 처리하기 어렵다
   즉흥적으로 요구사항을 정의하게 된다

- 시스템 개발이 지연되고 , 시스템이 흔들리게 된다.

-------------

- 시스템 모델링 단계에서 데이터 모델링 병행 수행

- 엔티티를 정의하는 개념 데이터 모델링 수행

- 시스템 처리는 데이터 처리를 동반
   시스템 처리 데이터를 데이터 모델에 반영

- 데이터 모델링 과정에서 데이터 발생
  엔티티 데이터를 시스템 모델에 반영

- 시스템 모델과 데이터 모델은 상호 보완 관계

-------------

- 시스템 모델링과 시스템 설계의 시스템 처리는 다르다

- 시스엠 설계에서 수행할 것을 일부 수행할 수도 있다

- 시스템 설계 > 어떻게 요구사항을 구현할 것인가
  정의된 요구사항을 기준으로 시스템 설계 수행

- 시스템 모델링 > 어떻게 정보기술을 적용할 것인가
  요구사항 목표를 달성하기 위한 방법 정의

- 목적, 용도 , 범위가 다르다

예제 29~30p

--------------------------
[포로토타입 모델링]

-요구사항을 형상화 , 구체화하기 위해 프로토타입 작성

- 문서로 작성된 요구사항으로는 사용자가 확신을 갖지 못한다
  사용자가 확신을 가져야 요구사항을 확정할 수 있다.
  사용자가 확신을 갖도록 요구사항을 형상화, 구체화한다
  요구사항을 형상화, 구체화한 것 > 프로토 타입

- 프로토타입을 반복하여 검토 및 수정
  요구사항이 자연스럽게 확정된다.

'완벽한 상태에서 프로타입을 확정시켜야 한다.
'사용자의 요구사항을 최대한 만족시켜준다

-------------

- 요구사항을 확정하기 위해서는 확정 기준이 있어야 한다

- 확정 기준을 만족해야 요구사항을 확정한 것

- 사용자 측면
  프로토타입에 더 이상 추가/변경할 것이 없다

- 분석자 측면 
  요구분석 단계에서 작성한 산출물로 시스템 설계를 할 수 있다.
  사용자의 부가적인 설명 없이 시스템 설계를 할 수 있다.

-------------

- 프로토타입을 작성하기 위해서는 작성 기준 필요

- 일반적인 기준
  시스템 개념을 파악하기 위해 작성
  개략적으로 화면 및 보고서를 작성

- EP 모델링 기준
  디자이너가 참여하여 완전한 형태로 유저 인터페이스 작성
  시스템 설계 단계에서 메뉴/화면/보고서를 설계하지 않는다
  확정된 프로토타입을 시스템에서 그대로 사용

-------------

-EP 모델링 단계를 통해 프로토타입 작성 준비
 비즈니스 현행 모델링, 비즈니스 목표 모델링 > 비즈니스 시나리오
  유스케이스 모델링 > 유스케이스 시나리오
  시스템 모델링 > 시스템 처리 시나리오
  프로토타입 모델링 > 프로토타입 모델

- 시스템 처리 시나리오,화면/보고서 항목,데이터 모델 정의
 
- 완전한 형태의 프로토타입을 작성할 수 있다.
  향후 시스템 모습 확정
  요구사항 변경 예방

-------------

- 프로토타입 모델은 시스템 모습을 스케치하는 것

- 프로토타입 모델은 프로토타입 작성자를 위한 것
  프로토타입 이미지와 항목 편집 방법을 작성
  일회용이므로 면밀하게 작성하지 않는다.

- 분석가가 프로토타입을 작성하더라도 프로토타입 모델을 작성
  분석가가 구상하고 있는 시스템 모습을 스케지하는 것
  시스템 모습을 검증하고 확인 하는 기회

-------------

- 프로토타입을 검토하면 반드시 변경 발생
  변경이 발생하지 않는 것이 이상한 것

- 항목 변경 발생
  유스케이스 모델, 시스템 모델 , 데이터 모델에 반영

- 시나리오 변경 발생
  변경 정도에 따라 반영해야 할 모델 결정

- 각 단계를 거치면서 검토와 확인을 하였으므로
  비즈니스 시나리오가 크게 변경되지 않는다
  비즈니스 시나리오 이외 변경은
  기반이 튼튼하므로 반영이 어렵지 않다

예제 34p

-------------

- 장점
  요구사항 변화에 능동적으로 대처할 수 있다
  프로젝트 위험을 줄이고, 품질을 확보할 수 있다

- 적용의 어려움
  기간이 한정된 프로젝트는 적용에 어려움이 있다
    요구사항을 계속 시스템에 반영하면 프로젝트가 지연된다
  사용자가 책임감이 결여된 결정을 하건 , 뒤로 미룰 수 있다.
  반복 과정은 사용자와 개발자를 지치게 할 가능성이 있다.
  반복 기준 설정의 어려움이 있다.
   형식적으로 수행할 가능성이 있다.

-------------

- 적용의 어려움에 대한 대안

- 완전한 형태의 프로토타입 작성
  반복적으로 프로토타입을 검토/수정하여 확정

- 그래도,요구사항 변경이 발생할 수 있다.
  항목의 범주에 속하는 요구사항 변경이다.
  비즈니스 시나리오에 속하는 요구사항은 제외시킨다
   그렇지 않으면 시스템 개발이 지연된다.
   하지만, 비즈니스 시나리오 변경 요구는 극히 드물다

-------------

- 각  단계가 완료될 때 마다 사용자 확인

- 확인하는 것은 책임을 부과하는 것이 아니다
  책임의 선을 긋는 시점은 프로토타입을 확정하는 시점
  이전까지는 요구사항을 정의하고 분석하는 단계

- 각 단계에서 작성된 산출물을 사용자가 확인

- 프로토타입을 확정하지 않으면 다음 단계 진행 금지!!
  프로토타입을 확정할 때까지 검토와 수정 반복

- 분석가, 사용자 모두가 Win-Win하는 방법

-------------

- EP 모델링 단계의 통합 수행은 권장 사항이 아니다
  단계별 진행이 원칙

- EP 모델링 방법은 일반적인 방법보다 요구분석 비율/기간이 길다

- 하지만 , 시스템 개발 기간은 단축된다.
  요구사항 확정 , 요구사항 변경예방 , 시스템분석/설계 기간 단축
  설계자/개발자가 본연의 임수 수행 , 시스템 품질 확보 , 개발 위험 감소

-------------

- 개발 기간을 고려한다면, 설계자를 늘린다

- 시스템 설계를 할 수 있도록 준비되어 있다.
  비즈니스 현행/목표 모델, 유스케이스 모델 , 시스템 모델 > 문서 작성
  데이터모델 > 설계 완료
  요구사항 확정, 프로토타입 작성 완료

- 설계자를 증원하더라도 개발 생선성이 향상되지 않는 이유
  요구사항을 명확하게 정의하지 않았고, 확정하지 않았다.
  요구사항 정의/분석 결과를 문서로 작서하지 않았다
   분석가의 머리 속에 요구사항이 있다.
  개념적으로 프로토타입 작성
    시스템 설계 단계에서 상세하게 요구사항 정의 필요

-------------

- 단계를 통합하여 수행할 수도 있다

- 프로젝트 규모, 기간,인우너 업무 숙지도 등을 고려

- 각 단계에서 수행할 것을 생략하는 것은 아니다
  각 단계에서 수행할 것을 동시에 수행

- 비즈니스 [현행,목표] 모델링 단계 통합 가능

- 유스케이스 모델링과 시스템 모델링 통합 가능

- 다른 단계는 특성이 있으므로 통합 불가능

-------------

- 단계를 통합하여 수행하면 충실도가 떨어진다
  한번에 두가지 일을 하면 한쪽이 소홀해진다

- 요구사항 변경 가능성이 높아지고, 시스템 품질 저하

- 작은 프로젝트가 더욱 위험
  개발자 개인의 능력에 따라 프로젝트 성공,품질 좌우
  단기간이므로 조금만 지연되면 만회할 시간이 없다
  요구분석/시스템 설계 보다 프로그램 개발에 중점을 둔다

- 사용자가 적극적으로 참여하여 각 단계를 신속하게 수행


--------------------------

[요구분석의 근복적인 목표]

- 목표는 가시적으로 측정할 수 있는 기준이 있다.

- 측정 기준으로 목표 달성 여부를 판단

- 요구분석 목표는 요구사항을 정의하고 분석하는 것
  요구사항 정의와 분석을 완료하면, 요구분석 목표를 달성한 것
   요구사항 정의와 분석 완료 의미가 너무 추상적
   이것으로 목표 달성 여부를 가시적으로 측정할 수 없다

- 요구사항 정의와 분석 완료가 요구분석을 수행하고
  주관적으로 판단하여 요구분석을 완료했다

-------------

- 요구분석 완료 측정 기준도 없이 요구분석을 수행했다.

- 상세하게 한 것도 , 개략적으로 한 것도 요구분석을 수행한 것

- 문제점
  부족한 사항이  요구분석 단계 이후에 도출된다

- 잣대를 대고 엄밀하게 완료 여부를 판단하지 않았기 때문

- 완료기준 측면에서 보면 요구사항 추가/변경이 발생한 것이 아니다
  기준 없이 판단한 것이므로 요구분석을 완료한 것이 아니다
  요구사항 추가/변경 발생이라고 하는 시점까지도 요구분석 진행중
  요구사항이 추가/변경 되었다고 할 수 없다

-------------

- 사용자의 요구사항은 끝이 없다

- 개발된 시스템은 얼마 가지 않아 추가/변경 발생

- 즉, 시스템 개발은 끝이 없다
  요구사항을 확정하여 시스템 개발 범위를 확정해야 한다
  범위가 있어야 시스템 개발을 종료할 수 있다

- 요구사항을 확정하기 전까지만 사용자의 요구사항을 반영
  요구사항 확정 후 , 사용자의 요구사항 제시 권한은 소멸

- 요구사항을 확정하더라도 요구사항 변경이 발생할 수 있다.
  개발자가 수용여부를 결정할 수 있도록 체제를 만들어야 한다

-------------

- 프로토타입 > 사용자가 요구사항을 확인하기 위해 작성
  검토와 수정을 반복하여 프로토타입을 확정
  프로토타입 확정 > 요구사항을 확정하는 것

- 사용자가 프로토타입을 확정해야 요구분석을 완료한 것
  EP 모델링의 요구분석 완료 기준

-------------

- 프로토타입을 확정할 때까지 지속적으로 요구사항 반영

- 사용자보다 분석가에게 더욱 부담을 준다
  사용자는 포괄적이고 추상적으로 요구사항을 제시
  요구사항을 상세하고 명확하게 작성해야 확정할 수 있다.

- 대부분의 사용자는 프로토타입을 확정하지 않으려고 한다
  확정을 피하지 못하도록 명분을 만들어야 한다
  논리와 근거를 갖춘 형태로 프로토타입을 작성

- 프로토타입을 확정해야 순탄하게 시스템 개발을 할 수 있다.
  사용자 , 개발자 모두 Win - Win

======================[EP 모델링과 시나리오]======================

- 이벤트와 프로세스는 서로 유기적인 관계
  이벤트는 프로세스 실행의 원인 제공
  프로세스는 이벤트 발생의 원인 제공

- 액터와 시스템은 일련의 흐름에 따라 프로세스 수행
  이를 시나리오(Scenario)라고 한다.

- EP 모델링은 요구사항을 목표를 달성하기 위한
  액터, 시스템,이벤트 ,프로세스로 구성된 시나리오를 정의하는 것

======================[EP 모델링 구성요소]======================

[액터]

- 프로세스를 주도적으로 수행하는 모든 것이 액터가 된다
  주문 담당자가 주문 사항을 등록한다 > 주문 담당자
  시스템이 전자 메일을 발송한다 > 시스템

- 액터는 목표/목적을 가지고 있다
  액터가 목표/목적을 갖고 프로세스를 수행하도록 정의

- 프로세스에 액터를 지정한다
  액터를 지정하면 프로세스 뜻이 명확해진다
   학교에 간다 > 내가 학교에 간다

- 액터가 누락되지 않도록 의도적으로 지정한다.

-------------

- 액터에 명칭 부여

- 액터를 구분하고, 프로세스 수행 주체를 명확하게 하기 위한 것

- 액터 명칭 부여 기준을 준수하여 명칭 부여
  액터가 주도적으로 프로세스 수행
  액터는 목적(목표)를 갖고 있다
  액터 명칭은 대표성을 갖는다

- 액터가 행동하는 범위와 목적/목표를 한정시켜 명칭 부여
  명확하게 액터의 행동 범위를 지정하기 위함
   사은품 담당자 , 사은품 관리자

'액터의 행동범위에 따라 권한이 달라진다.

-------------

- 액터에 명칭을 부여하면 역할 중심의 프로세스가 된다

- 작업자가 생산 수량을 입력한다 > 역할 중심의 프로세스
   팀장이 생산 수량을 입력한다
   과장이 생산 수량을 입력한다
   직급이 무시되고 생산 수량 입력 역할을 하는 액터가 된다.

- BPR 관점
  자연스럽게 BPR 관점의 비즈니스 모델링을 수행하게 된다
   역할 중심으로 비즈니스 프로세스를 정의하게 된다.

-------------

- 액터를 문장 처음에 위치시켜 문맥 체크
  어른이 장난감을 가지고 논다

- 전체 프로세스에서 액터 명칭을 다르게 사용할 것 체크
  구매자가 인터넷 쇼핑몰에서 상품을 구매한다
  고객이 인터넷 쇼핑몰에서 구매한 상품값을 지불한다
  구매자와 고객은 동일한 액터

- 액터로 시스템 권한 관리
  액터의 상세화 , 일반화 고려

- 유스케이스 다이어그램으로 쉽게 검증할 수 있다.

-------------

- 액터들을 대표하는 액터 정의

- 하위 레벨 액터는 상위 레벨 액터의 속성 공유
  고객이 구매한다
  구매한다는 인터넷 쇼핑몰 고객과 오프라인 매장 고객이 공유

관련 그림 48~49p

--------------------------

[이벤트와 프로세스]

- 프로세스는 사용하는 목적과 환경에 따라 의미, 범위가 다르다

- 고객이 주문한다 > 하나의 프로세스

- 업무 프로세스가 잘못되었다 > 다수 프로세스

- 명확하게 뜻을 전달하기 위해 의미와 범위를 한정시킨다.
  고객이 주문한다
  [고객 - 액터 - 주어]
  [주문한다 - 액터의 행동 표현 - 동사, 목적어]
  프로세스 범위

-------------

- 비즈니스 프로세스
  액터와 시스템이 행동하는 일련의 시나리오
   예) 고객이 고객정보를 입력한다
   다수의 프로세스를 포함
  비즈니스 모델링(현행,목표)에서 사용

- 프로세스 
  액터와 시스템의 행동 하나를 나타낸다
   예) 시스템은 고객정보 화면을 표시한다
  유스케이스 모델링, 시스템 모델링에서 사용

-------------

- 엑터나 시스템이 행동하게 되는 동기/원인을 제공
  고객이 전화를 건다 >(원인제공) 주문 담당자가 전화를 받는다 
  >(원인제공) 고객이 주문사항을 말한다
  프로세스 > 이벤트 (고객이 전화를 걸었기 때문에 주문 담당자가 전화를 받게 되었다)
  프로세스 > 이벤트 (주문 담당자가 전화를 받지 않았다면 고객이 주문사항을 말할 수 없다.)
  프로세스

'사용자 업무에 따른 이벤트 흐름을 체크한다.
'그리고 이벤트에 따른 프로세스 체크

-------------

- 비즈니스 프로세스 단위로 이벤트 발생

- 프로세스 단위로 이벤트 발생

- 프로세스 단위로 이벤트 발생

- 유저 인터페이스가 무조건 이벤트가 되는 것은 아니다


-------------

- 이벤트는 프로세스 수행의 근거 제공

- 이벤트가 발생하는데 프로세스가 없다
  프로세스 누락
  프로세스인 것을 이벤트로 지정

- 프로세스가 있는데 이벤트가 없다
  이벤트 누락
  이벤트인 것을 프로세스 지정

- 이벤트가 없는데 프로세스를 정의하는 것은
  프로세스를 수행하게 된 근거가 없다 > 불안정한 프로스스가 된다
  버스를 탔다 > 버스가 와서 버스를 탔다
   버스가 왔다. 버스를 탔다


--------------------------

[시나리오]

- 사용자가 시스템을 사용한다는 것은 사전에 약속한것
  화면은 어떻게 하면 표시된다
  데이터 입력은 어떻게 한다

- 약속한 시나리오를 준수하지 않으면 시스템을 사용할 수 없다
  인터넷 사용자는 사회 통념이 약속을 해준 것

- 요구사항 정의
  액터와 시스템이 행동할 것을 약속하는 것
   약속을 한다는 것은 시나리오를 정의하는 것
  시나리오를 잘못 작성하는 것은
    사용자와 약속을 잘못하는 것이 된다.

-------------

-시스템 시나리오 
 이벤트/프로세스 > 이벤트/프로세스 하나 하나가 모아져서 시나리오가 된다
 > 시나리오 기준으로 액터와 시스템이 행동한다 > 액터와 시스템이 연기력을 발휘할 수 없다.
 > 명확하고 완전하게 정의할 수 있다.

 사전에 약속된 시나리오를 벗어나면 소기의 목적을 달성할 수 없다.

-------------

- 요구사항 목표를 달성하기 위한 모든 프로세스 정의
  시나리오는 일련의 프로세스 흐름으로 구성

- 프로세스가 위치하는곳
  시작 이벤트 > 모델 시나리오 > 예외처리 > 이벤트 처리 > 시작 이벤트

- 시작 이벤트 , 모델 시나리오, 시작 이벤트 , 예외 처리의 프로세스는 
  요구사항 목표를 달성하도록 일련의 흐름으로 정의

-------------

- 시나리오 흐름은 모든 모델이 같다

- 시작 이벤트
  시나리오가 시작하게 되는 동기/원인 제공
  모델 시나리오 첫 라인에 위치한 프로세스가 시작

- 모델 시나리오
  모델의 메인 프로세스가 위치
  이벤트를 발생시켜 이벤트 처리 수행

- 이벤트 처리
  시작 이벤트 , 모델 시나리오 , 이벤트 처리에서 발생한 이벤트를
  처리하는 프로세스가 위치

- 예외처리
  예외를 처리하는 프로세스가 위치

예제 57~58p 

--------------------------

[모델 템플릿]

- EP 모델링 5단계에서 동일한 모델 템플릿 사용

- 각 단계에서 수행한 결과를 모델에 작성
  모델을 작성하는 문서 양식 > 모델 템플릿

- 하나의 모델 템플릿 작성 방법만 숙지
  작성하는 내용은 다르지만 , 작성 방법은 동일

- 앞 단계에서 작성한 내용을 승계하여 작성
  비즈니스 현행 모델 > 비즈니스 목표 모델
  유스케이스 모델 > 시스템 모델
  시스템 모델 > 프로토타입 모델 , 시스템 설계

-------------

- 모델 내용을 승계하여 연속성과 추적성 확보

- 연속성
  점증적으로 세분하여 요구사항 작성
  앞 단계에서 작성한 내용을 다음 단계에서 검증
  앞 단계 모델을 복사하여 사용
   동일한 내용은 다시 작성하지 않아도 된다
   내용이 누락되는 것을 방지

- 추적성
  각 모델에 요구사항이 반영된 것을 확인할 수 있다.
  요구사항을 쉽게 찾아갈 수 있도록 경로(Path) 제공

======================[시나리오 작성]======================

[프로세스 작성 방법]

- 시나리오 구성의 기본은 프로세스

- 시나리오 작성은 프로세스를 작성하는 것부터 시작

- 프로세스는 간단한 문장
  프로세스는 액터라 할 것을 정의
  주어 + 동사 형태가 가장 간단한 형태
   주어 + 목적어 + 동사 형태가 가장 많다.
   주어 또는 동사가 누락되어서는 안 된다.

- 수식어는 되도록 사용하지 않는다
  요구사항을 정확하게 정의하는데 걸림돌이 될 수 있다.

-------------

- 프로세스 작성 방법
  요구 사항 분할 > 액터 추출 > 액터 중심 프로세스로 정리
  주어 + 목적어 + 동사 형태

-------------

- 뜻이 명확하고 범위가 한정된 문장은 요구사항을 정확하게 만든다.

- 긴 문장은 다양한 뜻을 포함
  긴 문장을 간단하게 만든다.
   문장의 뜻이 명확해 진다.
   문장의 범위가 한정된다.

- 복합적인 뜻을 가진 프로세스
  이벤트가 미치는 영향이 명확하지 않다
  이벤트 또는 프로세스가 추가/변경될 가능성이 높다
  이벤트/프로세스를 추가하기 어렵다.

'요구사항을 분할하는것도 능력이다.

-------------

- 고객이 인터넷 쇼핑물에서 주문한 내욕을 확인한다
  고객이 인터넷 쇼핑물에서 주문한다.
  주문 담당자가 고객의 주문 내역을 확인한다.

- 주문 확인 메일을 발송한다.
  시스템이 주문 확인 메일을 발송한다.

- 프로세스를 수행하는 액터를 추출하여
  액터가 프로세스를 주도적으로 수행하도록 정의

-------------

- 액터를 프로세스 처음에 위치시킨다.

- 프로세스를 ~한다 와 같은 형태로 만든다.

- 수식어를 삭제하여 프로세스를 간결하게 만든다.

- 액터가 하나의 프로세스를 수행하도록 한다.

-------------

- 액터를 프로세스 처음에 위치시킨다.

- 액터가 프로세스를 능동적으로 수행하기 위한 것
  예) 고객이 상품을 주문한다.
  예) 상품을 주문하는 것은 고객이다.

- 액터가 프로세스를 주도적으로 수행하게 만든다.
  프로세스를 처리할 책임자를 명확하게 할 수 있다

- 시나리오 전체에서 액터의 위치 통일

-------------

- 프로세스를 ~한다 와 같은 형태로 만든다

- 프로세스를 간결하게 하기 위함

- 프로세스 뜻을 명확하게 만들기 위함

- 프로세스를 동사 형태로 작성하도록 유도
  프로세스는 액터가 행동하는 것을 정의하는 것

- ~하며 , ~ 하고 형태의 문장은 금물
  액터가 복수의 프로세스를 수행하게 되는 문제점 발생

-------------

- 수식어를 삭제하고 프로세스를 간결하게 만든다

- 수식어가 미치는 영향을 판단하여 수식어 삭제
  예) 고객이 친구가 좋아하는 상품을 주문한다
      고객이 상품을 주문한다
      친구가 좋아하는 수식어 삭제

-------------

-엑터가 하나의 프로세스를 수행하도록 정의

- 액터의 행동 범위를 한정시켜 프로세스 뜻을 명확하게 하기 위함
  예) 고객이 상품을 주문하고 , 대금을 지불한다
      고객이 상품을 주문한다.
      고객이 대금을 지불한다.

- 이벤트가 발생한 프로세스를 쉽게 구분

- 프로세스를 추가하기 쉽다.
  예) 대금을 지불하기 전에 고객이 포인트를 검색한다
      고객이 대금을 지불한다는 프로세스 앞에 추가

'프로스세는 과감하게 분리해야 한다.
--------------------------

[시나리오 연결]

이벤트 추출 - 연결 프로세스 추출 - 시나리오 순서 정리 
- 시나리오 검토 - 프로세스 작성 -이벤트 추출

시나리오에 속한 프로세스들이 관련성을 가지고 행동할 수 있도록
프로세스를 연결하여 시나리오 흐름 정의

-------------

- 프로세스는 스스로 동작할 수 없으므로 이벤트가 필요

- 다른 프로세스가 동작하게 되는 원인을 제공하는 프로세스 추출
  추출된 프로세스를 이벤트로 지정
  이벤트와 프로세스가 연결될 수 있도록 하기 위힌 것

- 프로세스와 프로세스는 연속하여 정의할 수 있다.
  이벤트와 이벤트는 연속하여 정의할 수 없다.

'프로세스와 프로세스는 이어질수 없고
'그 사이에 이벤트가 있어야 한다. 이벤트 > 프로세스 > 이벤트 >프로세스 ....

-------------

- 시나리오는 끊김 없이 요구사항 목표를 향해 가야 한다

- 프로세스와 프로세스를 연결하는 프로세스 추출
  끊어짐이 없는 시나리오를 만들기 위한 것
  끊어진 시나리오는 요구사항 목표를 달성할 수 없다

- 시나리오는 시작과 종료 프로세스를 가지고 있다.
  시작과 종료 사이에 다수의 프로세스가 존재
  프로세스를 연결할 수 없다면 종료 프로세스가 된다
  연결을 받지 못한다면 시작 프로세스가 된다.

-------------

- 실행 순서를 고려하여 이벤트아 프로세스를 정리

- 이벤트를 정의한다
  이벤트를 받아서 처리할 프로세스 정의
   프로세스 수행 결과는 이벤트를 발생시킨다
   이벤트를 받아서 수행할 프로세스 정의

- 시나리오에 작성한 순서대로 프로세스가 수행되는 것은 아니다.
  이벤트에 따라 수행할 프로세스가 결정된다.
   이 자체가 실행 순서

-------------

- 종료/취소 처리 프로세스는 정의하지 않아도 된다.

- 종료 처리의 묵시적인 약속
  정상적인 시나리오 종료는 종료 처리를 작성하지 않는다.
  특별한 처리가 필요한 경우에는 작성

- 취소 처리는 묵시적인 약속
  입력한 사항을 지우고 , 입력을 시작한 고셍서 다시 시작한다.

- 일반적으로 알려진 프로세스를 매번 작성하지 않기 위한 것임

-------------

- 작성한 시나리오를 사용자와 같이 검토

- 우선, 분선가가 먼저 검토 및 정리
   불안정한 시나리오는 사용자에게 불안감을 준다.

- 사용자와 분석가가 같이 시나리오를 검토
  사용자가 요구사항의 용도, 목적 등을 이해하게 된다
   사용자에게 요구사항을 자세하고 명확하게 설명한다
   사용자가 요구사항을 추가/변경한다
  매우 바람직한 모습
   이것이 시나리오를 검토하는 목적

--------------------------

[시나리오 작성시 고려 사항]

- 시나리오는 일정한 형식으로 통일된 형태로 작성

- 시나리오는 프로젝트 관계자가 본다
  일정한 형식을 갖추어야 다수의 사람이 보기 쉽다
   한가지 형태만 익히면 다른 시나리오도 쉽게 읽을 수 있다.

-------------
 
- 들여쓰기는 시나리오 가독성을 높여준다

- 액터와 시스템이 수행하는 프로세스를 구분
  액터가 수행하는 프로세스
   들여쓰기를 하지 않는다
  시스템이 수행하는 프로세스
    들여쓰기 한다
  시스템이 주체이면 들여쓰기를 하지 않는다

-------------

- 들여쓰기로 작성된 프로세스는 이전 라인에 종속된다.
  들여쓰기를 하지 않은 라인을 수행하지 않으면
   들여쓰기 한 프로세스도 수행되지 않는다

- 들여쓰기는 이전 라인을 보충하기 위해 작성
  프로세스를 작성할 수 있는 어떤 곳도 가능

- 추출할 주문내역 작성

-------------

- 모델 시나리오에 3개 이상의 항목을 작성하지 않는다.
  모델 시나리오에는 대표 명사를 기술하고,
  자세한 항목은 이벤트 처리에 기술

-------------

- 다수에서 하나를 선택하는 경우 , 들여쓰기 한다
  들여쓰기를 하지 않으면 선택을 연결하여 작성한다

- 사용자가 이해하기 쉬운 단어 사용

- 시스템은 고객이 주문한 주문내역을 추출한다
  주문 테이블을 SELECT하는 것을 의미한다.
   SELECT와 같은 정보기술 용어는 사용자가 이해하기 어렵다.

- 비즈니스 목표 모델링, 유스케이스 모델링
  사용자 관점에서 요구사항 정의
    사용자가 이해하기 쉬운 용어 사용
    정보기술 용어를 사용하면, 기술적으로 치우 칠 가능성 있음

- 시스템 모델링은 어쩔 수 없다
  분석가와 설계자를 위한 것

-------------

- 전후 관계 프로세스를 고려하여 액터 생략 가능

- 시나리오의 가독성을 고려하여 액터 생략 가능

- 조건 문장에 액터를 지정할 수 없다.

-------------

- 시나리오가 분기되지 않도록 한다

- 조건 처리는 시나리오의 직선 흐름을 막는다
  예, 아니오 조건을 처리할 수 있도록 프로세스를 정의
   이것은 직선 흐름이 아니라 분기 흐름

- 시나리오가 분기되지 않도록 한다
  모델 시나리오에 조건 프로세스를 정의하지 않는다.
  이벤트를 발생시켜 이벤트 처리에 정의

- 이벤트 처리에 예,아니오 조건 형태로 작성하지 않는다
  예외가 발생하는 조건만 기술










==========문자 클래스==========

패턴 문자 / 형태 / 개요
[]	 / "abcde".match(/[ab]/); / 문자 집합. 지정한 문자 단위로 매치
[패턴 문자] / "111".match(/[1+]/); / 패턴 문자를 일반 문자로 매치
[\b] / "2**".match(/[2\b]/); / 백스페이스 문자에 매치
[-]  / "321".match(/[0-9]/); //구간에 속한 값을 매치
[^]  / "abc".match(/[^a]/); 지정한 문자가 아닌 문자에 매치

-Character Class
class는 집합을 나타내는 정규 표현식 용어
문자 클래스 , 이스케이프(escape) 클래스 등이 있음


/^[a-zA-Z]+$/    영어만!!
/(-[a-z])/ig 
/(-[A-Z])/ig 



[백스페이스]

-패턴문자 : [\b]

-기능
백스페이스(backspace) 값으로 매치
"\u0008".match(/[\b]/);
백스페이스이므로 값이 표시되지 않음

[]를 사용하지 않은 \b는 63개 이외 문자에 매치

-역슬래시
역슬래시를 표시하려면 역슬래시를 2번 연속(\\) 작성
역슬래시를 두 개 표시하려면 4번 연속 작성




[패턴 문자를 문자화]

-패턴 문자: [패턴 문자]

-기능
[]안에 작성한 패턴 문자를 문자로 인식하여 매치
"111".match(/[1+]/);

1+는 전체를 매치하게 되어 [111]이 반환되지만
[1+]는 문자화 되어서 1 과 +로 따로 반환



[구간]

-패턴문자 : [최소-최대]

-기능
최소,최대 구간에 속한 값을 매치
"54321".match(/[0-5]/);

매치 대상에 0에서 5까지의 숫자가 하나라도 있으면 매치 성공
패턴이 아닌 매치 대상을 기준으로 매치된 문자를 반환

"-"의 왼쪽이 최솟값, 오른쪽이 최댓값
최소와 최대를 바꾸면 문법 에러 발생
[] 밖에 "-"을 작성하면 일반 문자
스펙에서 "-"를 dash로 표기
"-" 앞과 뒤에 값이 없으면 문자로 표기 됨
매치되면 매치된 것의 인덱스가 가장 빠른 값을 반환


[제외]

- 패턴 문자 : [^]

- 기능

[]안에 작성한 문자가 아닌 문자에 매치
"ABCD".match(/[^A]/);
매치 대상 ABCD에서 A가 아닌 첫 번째 문자 B에 매치

"12345".match(/[^1-3]/);
^에 이어 구간 지정 가능

[텍스트 추출]

-문자열에서 텍스트 추출
엘리먼트를 만드는 문자열 스크립트에서 텍스트 추출
<div id=""sports>축구</div>
정규 표현식으로 "축구"를 제외한 문자를 제외 시킴

-패텬을 생각해 보세요
replace()의 두번째 파라미터에 ""지정



[이스케이프 클래스]

\d / 숫자만 매치
\D / 숫자 이외의 문자 매치
\s / 보이지 않는 문자 매치
\S / 보이는 문자 매치
\w / 63개 문자만 매치
\W / 63개 이외 문자 매치
\uhhhh / 유니코드 값으로 매치
\xhh / 16진수 값으로 매치
\c / 제어 문자


-Escape Class
Escape는 역슬래시를 의미
역슬래쉬에 연속하여 작성한 것을 시퀸스(Sequence)라고 함

-이스케이프 시퀸스 기능
\^과 같이 역슬래시 다음의 패턴 문자를 일반 문자로 인식
\d, \D와 같이 역슬래시 다음의 숫자/문자를 패턴으로 인식


[패턴 문자의 문자화]

-패턴 문자 : \패턴문자

-기능
역슬래시 다음의 패턴 문자를 일반 문자로 인식
"B^AB".match(/\^/);



[숫자만 매치]

-패턴 문자 : \d

-기능
숫자만 매치.[0-9]와 같음
"A123".match(/\d/);

숫자만 매치하여 1을 반환


[숫자 이외 매치]

-패턴 문자 : \D

-기능
숫자 이외 문자 매치. [^0-9]와 같음


[보이지 않는 문자 매치]

-패턴 문자 : \s

-기능
보이지 않는 문자 매치

공백,탭,줄바꿈 등..


[보이는 문자 매치]

-패턴 문자 : \S

-기능
보이는 문자 매치



[63개 문자만 매치]

-패턴 문자 : \w

-기능 
63개 문자 매치
a-z ,A-Z, 0-9 ,_

[63개 이외 문자 매치]

-패턴 문자 :\W

-기능
63개 이외 문자 매치
a-z ,A-Z, 0-9 ,_ 이외 문자 매치



==============그룹화==============

[그룹화]

패턴 문자 /  형태 / 개요

()    /  "ABC".match(/(A)/); 매치 결과 캡처
\숫자 / "abef_cd".match(/ab(c|K)ef_\1\2/); / 백레퍼런스
RegExp.$숫자 / RegExp.$1 / 캡처 값 참조
(?:) / "abcdef".match(/ab(?:cd)ef/); / 캡처하지 않는 그룹
(?=) / "abcc".match(/ab(?=c)/);  / 전방 매치
(?!) / "abcedf".match(/ab(?!ef)/); / 전방 부정 매치

-그룹화
소괄호()사용
()안의 패턴을 하나의 그룹으로 매치하고
매치 결과를 저장
매치된 결과를 부분 문자열이라고 하고
저장하는 것을 캡처(capture)라고 함

[매치 결과 캡처]

-패턴 문자 :()

-기능 
()안에 패턴으로 매치하고 그 결과를 캡처
캡처된 값을 사용하여 () 밖의 패턴에 매치
예: (a|b)+는 a 또는 b에 매치하고 결과를 하나 이상에 매치
"ABC".match(/(A)/);

방향은??

"ABCDEF".match(/AB(C|P)(D|Q)EF/);
["ABCDEF","C","D"]



[undefined 설정 메커니즘]

-매치 및 설정 방법
패턴에서 소괄호() 수만큼
반환할 배열의 2번째 인덱스부터 undefined를 설정
패턴을 매치하여 값이 매치되면 인덱스에 값 설정
따라서 undefined가 매치된 값으로 대체 됨
소괄호()의 패턴이 매치되지 않으면 undefined가 유지 됨

반환할 배열의 첫 번째 인덱스 전체 매치 값을 설정


//인덱스가 base가 빨라서 ball은 매치가 되지 않음!!!
var result = /((ball)|(base))/.exec("baseball");
js.log(result);

반환 [base,base,undefined,base] = [최종,(()|())-외부,((여기)|()),(()|(여기))]


[서브 패턴]
-subpattern
소괄로()안에 작성한 패턴을 지칭
(^12|34$)에서 ^12|34$를 서브패턴이라고 함
^12와34$


[캡처 값 참조]

-()로 캡처된 값을 참조
1.백레퍼런스(\숫자)형태. Backrefernce
패턴 안에서 사용

2.RegExp.$ 숫자 형태
패턴 매치가 완료된 후에 사용 사능

3.value.replace(pattern,"$1"+ ","+"$2");


[백레퍼런스]

-패턴 문자 : \숫자

-기능
패턴 문자()로 캡처한 결과 값을 참조
"abcdef".match(/ab(c)(d)\1\2/);
()로 캡처한 순서를 \에 이어서 작성
\1은 첫 번째()로 캡처한 값을 참조
0은 Null을 반환하며 1부터 9까지 지정 가능

-표기 기능
"역참조 특수 문자"라고도 부름
스펙에서는 "십진 이스케이프"로 표기
일반적으로 백레퍼런스를 사용하고 있으며


[RegExp.$숫자]

-기능
패턴 문자 ()로 캡처한 결과 값을 참조
RegExp.$1;
$ 다음에 1부터 9까지 지정 가능



[백트래킹]

-backtracking
비슷한 사전적 의미 : 같은 코드를 따라 되돌아오다

-lastIndex
되돌아 오기 위해서는 돌아올 위치를 알아야 함
위치를 lastIndex에 저장

-클로저
돌아왔을 때 매치 대상을 알아야 하므로
매치 여부에 관계없이 매치 대상 저장 필요
저장하는 곳을 클로저라고 함
개념적이지만 정규 표현식 이해에 필요


[최대로 매치]

-목적
정규 표현식의 최대로 매치

(||)* 형식일떄!!!
"AABACA".match(/(AA|BA|AABA|B|A|C)*/);

매치에 성공할 때마다 클로저에 올리고 !!
다음 비교할때는 클로저에 있는걸과 다음 비교 결과를 합치고 
매치를 시도 한다!! 매치가 끝났을때 캡쳐 값은!!
마지막에 캡처된 값!!!

아 다 돌았는데 아직 비교할것이 남았다면 다시 처음부터 AA|BA|AABA|B|A|C
돈다 !! 캡처값 또한 마지막들어온 값!!


[캡처하지 않는 그룹]

-패턴 그룹 :(?:)

-기능

매치결과를 캡처하지 않음
캡처를 사용하면 캡처된 값도 반환되므로
매치 결과만 사용하려 할때 제외 처리 필요
이때 캡처하지 않는 그룹을 사용


"AABACA".match(/(?:AA|BA|CA|B|A|C)*/);
순수 매치된 값만 반환된다.


[전방 매치]

-패턴 문자 : (?=)
?=다음에 매치 기준 위치 작성

- Lookahead
"ABCC".match(/AB(?=C)/);
?=에 이어 작성한 문자를 매치하여 먼저 매치 기준 위치를 찾고
그 위치에서 앞으로 매치
전방 검색이라고도 부름

뒤로 매치하는 것을 후방 매치라고 하며
자바스크립트는 지우너하지 안음

-전방 매치와 관련된 스펙 용어
zero-width , positive, lookahead
예제를 통해 용어의 개념을 알아봅시다.


[전방 부정 매치]

-패턴 문자 : (?!)

-기능
"ABCDEF".match(/AB(?!ED)/);
전방에 찾은후 일치하면 null을
일치 하지 않으면 일치하는 값을 반환(AB)


[RegExp 오브젝트]

-RegExp 오브젝트
exec() , test() 메소드를 직접 호출할 수 있지만
인스턴스를 생성하여 호출할 수도 있음
한편, 반드시 인스턴스를 생성해야 하는 경우도 있음


[인스턴스 생성]
-RegExp 인스턴스 생성
new RegExp() , RegExp()로 인스턴스 생성

-파라미터 : 1:문자열 , 2:플래그


[문자열로 패턴을 쓸때]

var pattern = "(^[+-]?\\d+)(\\d{"+길이+"})";
var obj = new RegExp(pattern);
obj.test("조건");
obj.exec("조건");


[exec()]

-개요 
RegExp 인스턴스를 생성하고 exec() 호출
인스턴스를 생성할 때 패턴을 지정하였으며
파라미터에 매치 대상 지정

매치가 되면 배열 엘리먼트 하나만 반환
다수가 매치되더라도 처음 매치된 엘리먼트 반환

-사용 사래
패턴은 변하지 않고 매치 대상만 변할 때
exec()를 실행할 때마다 패턴을 지정하지 않아도 됨

var obj = new RegExp("시간");
var str = "마지막 시간";
var result = obj.exec(str);
alert(result);



[test()]
-개요
RegExp 인스턴스를 생성하고 test() 호출
인스튼스를 생성할 때 패턴을 지정하였으며
파라미터에 매치 대상 지정

매치가 되면 true를 반환하고 안되면 false를 반환
매치 여부를 체크할 때 사용






-------------Function 오브젝트-------------
Function
new Function() / 인스턴스 생성
Function() / 인스턴스 생성
프로퍼티
length / 함수의 파라미터 수
prototype
constructor / 생성자
toString() / 함수를 문자열로 반환
call() / 함수 호출
applay()  /함수 호출 : 배열을 파라미터로 사용
bind() / 새로운 오브젝트를 생성하고 생성한 오브젝트로 함수 실행



[new Function()]
-개요
새로운 Function 오브젝트를 생성하여 반환
파라미터를 작성한 수에 따라 인스턴스 생성 기준이 다름

-작성 기준
new Function()과 같이 파라미터를 지정하지 않으면
--실행할 코드가 없는 Function 오브젝트만 생성
파라미터를 두개 작성:
--마지막 파라미터에 함수에서 실행할 자바사크립트 코드 작성
--마지막 제외한 파라미터에 호출한 함수에서 받을 파라미터 작성

파라미터 하나 작성:
함수에서 실행할 자바스크립트 코드 작성
호출한 함수에서 받을 파라미가 없는 형태


[Function()]
-새로운 Function 오브젝트를 생성하여 반환
처리 방법과 파라미터 작성 방법은 new Function과 같음


[함수 생명 주기]

-개요
일반적으로 new Function()으로 함수인스턴스를 생성하지 않고
function 키워드를 사용하여 생성

function getBook(title){return title;}
var result = getBook("자바스크립트");

-인스턴스 생성
엔진이 function 키워드를 만나면
인스턴스 이름이 getBook인 인스턴스 생성
생성한 인스턴스를 글로벌 오브젝트에 설정
생성한 인스턴스를 설정할 오브젝트를 지정하지 않았기 때문
==생성한 인스턴스를 설정할 오브젝트를 지정하지 않았기 때문

-함수 호출
getBook("자바스크립트");
함수를 호출하면서 파라미터 값으로 "자바스크립트"를 넘겨 줌
getBook() 앞에 오브젝트를 지정하지 않으면 글로벌 오브젝트 사용


-함수 코드 실행
function getBook(title){return title;}
var result = getBook("자바스크립트");

엔진 컨트롤이 함수로 이동
파라미터 이름에 넘겨준 파라미터 값을 매핑
함수 블록 안의 자바스크립트 코드 실행
return 문이 있으면 반환 값을 갖고 함수를 호출한 곳으로 돌아 감
할당 연산자가 있으므로 반환된 값을 result 변수에 할당


[함수 선언문]

function / Function / function 키워드
식별자 / String / 함수 이름
파라미터 / Any / 파라미터 리스트 opt
함수 블록 / Object / {실행 가능 코드opt}
반환 / Function / Function Object


-함수 정의(Function Definition)
함수를 호출할 수 있도록 자바스크립트 문법에 맞게 함수를 작성하는 것
함수는 두개의 형태를 정의할 수 있음
--함수 선언문(Function Declaregion)
--함수 표현식(Function Expression)


-함수 선언문
function 키워드와 함수 이름은 필수 작성
파라미터, 블록 안의 자바스크립트는 선택
엔진이 function 키워드를 만나면 Function 오브젝트 생성
이때 함수 이름을 Function 인스턴스 이름으로 사용



[함수 표현식]

function / Function / function 키워드
식별자 / String / 함수 이름opt
파라미터 / Any / 파라미터 리스트 opt
함수 블록 / Object / {실행 가능 코드opt}
반환 / Function / Function Object


-개요
var name = function(){}
표현식 형태로 Function 오브젝트를 변수에 할당하는 형태
함수 이름이 옵션으로 작성하지 않아도 됨
-- 이때 변수 이름이 함수 이름이 됨


[toString()]

-개요
함수 코드를 문자열로 반환
구현 방법은 개발에게 위임
Object 오브젝트를 모든 빌트인 오브젝트에서 상속 받으므로
모든 오브젝트에 toString()이 존재하지만 오브젝트마다 기능이 다름



[call()]

function getTotal(one,two){
		return one+two;
};

-개요
getTotal.call(this,10,20)
getTotal() 함수를 호출하면 10과 20을 파라미터로 넘겨줌
첫 번째 파라미터에 호출된 함수에서 this로 참조할 오브젝트 지정
--일반적으로 this를 사용하지만 다른 오브젝트를 지정할 있음
--호출된 함수의 파라미터로 넘어가지 않고 두번째 넘어 감

논리 전개는 중급 과정에서 다룸



[apply()]

function getTotal(){
	var total = 0;
	
	for(var k=0;k < arguments.length;k++){
		total += arguments[k];
	}
	return total;
};

-개요
getTotal.apply(this.[10,20])
getTotal() 함수를 호출하면서 10과 20을 배열로 파라미터로 넘겨줌
call()과 함수를 호출하는 방법은 같지만
파라미터를 배열로 넘겨주어야 하는 것과
arguments를 넘겨줄 수 있는 점이 다름
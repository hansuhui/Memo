[every()]
every 메소드는 반환 값이 false가 될 때까지 콜백 함수를 실행합니다.

data위치의 배열을 하나씩 읽어가면서 첫 번째 파라미터의 콜백 함수를 호출하는 과정과
파라미터를 넘겨주는 방법은 앞에서 다루었언 forEach 메소드와 같습니다.
forEach는 전체를 반복하지만 every는 콜백함수에서 false를 넘기면 종료합니다.


20은 true 10에서 false가 들어가므로 반복을 끝낸다.
	[20,10,30].every(function(element, index ,list){
		js.log("value:" +element);
		return element > 15;
	});


[some()]

-개요
data 위치의 배열 엘리먼트를 하나씩 읽어가면서
반환값이 true가 될 떄까지 콜백 함수 호출
콜백 함수에 엘리먼트 값, 인덱스 , 전체 배열 순서로 넘겨 줌

콜백 함수에서 true를 반환하지 않으면 디폴트로 false를 반환

every()반대 개념이라고 생각하면 된다.


[filter()]

-개요
콜백 함수에서 true를 반환했을 때의 엘리먼트를 배열로 묶어 반환
콜백 함수에서 false를 반환하면 최종적으로 반환하지 않음
박복해서 읽는 것과 파라미터를 넘겨주는 것은 forEach()와 같음
조전에 맞는 엘리먼트를 추려낼 때 사용


[map()]

-개요
콜백 함수에서 반환한 값을 새로운 배열에 설정하여 반환
반복해서 읽는 것과 파라미터를 넘겨주는 것은 forEach()와 같음

[reduce()]

-개요
배열 끝까지 콜백 함수를 호출하고 콜백 함수에서 반환한 값을 반환
두 번째 파라미터를 작성하면 처리가 다름

-두 번째 파리미터를 작성하지 않은 경우
콜백 함수를 호출하면서 네 개의 파리미터 값을 넘겨 줌
직전 값(previous),현재 값(current), 인덱스 , 벼열 전체

처음 콜백 함수를 호출할 때:
--첫 번째 엘리먼트를 previous에 설정, 두번째 엘리먼트 값을 current에 설정
--인덱스에 1를 설정

두 번째 콜백 함수를 호출할 때:
콜백 함수에서 반환한 값을 previous에 설정, 세번째 얼레민터를 current에 설정

-두 번째 파리머트를 작성한 경우

콜백 함수를 호출하면서 네 개의 파리미터 값을 넘겨줌
직전 값(previous), 현재 값(current),인덱스 , 배열 전체

-처음 콜백 함수를 호출할 때 :
두 번째 파라미터 값을 previous에 설정하고
첫 번째 파리미터 값을 current에 설정
인덱스에 0을 설정

[reduceRight()]

-개요
배열 끝에서 앞으로 읽어가면서
콜백 함수를 호출하고 콜백 함수에서 반환한 값을 반환
이외의 처리 방법은 reduce()와 같음


[indexOf()]

-개요
파라미터 값과 일치하는 엘리먼트의 인덱스를 반환
왼쪽에서 오른쪽으로 검색
일치하는 엘리먼트가 있으면 더 이상 검색하지 않고 종료
일치하는 엘리먼트가 없으면 -1 반환
데이터 타입 까지 체크. 1 === "1"은 다름

두 번째 파리미터를 지정하면 지정한 인덱스부터 검색
지정하지 않으면 0으로 간주
음수 값을 지정하면 length 프로퍼티 값을 더해 인덱스로 사용
더한 값이 음수이면 0을 사용

String에 indexOf에 두번째 파라미터가 -이면 0부터 시작하지만
Array에 indexOf에 두 번째 파라미터가 -이면 length에서 빼고 계산해서 돌아간다.


[lastIndexOf()]

-개요
파라미터 값과 일치하는 엘리먼트의 인덱스를 반환
오른쪽에서 왼쪽으로 검색
다른것은  indexOf()와 같음


-------------[JSON 오브젝트]---------------

-JSON
JavaScript Object Notation. http://json.org
String , Number와 같은 빌트인 오브젝트
대부분의 자바스크립트 값 타입을 지원
다른 언어에서도 사용하므로 오나전하게 같지는 않음
new 연산자로 인스턴스 생성 불가

-JSON 주요 기능
데이터 송수신 상호간의 데이터 변환 기준
오브젝트가 아닌 텍스트 형태이므로 송수신 속도가 빠름

-JSON 문서(Document)
Creator : Douglas Crockford
국제 인터넷 표준화 기구(IFTF)에 RFC4627 문서도 등록
MIME(Multipurpose Internet Mail Extension) 타입 : application/json
파일 확장자 : json


[parse()]

-개요
JSON 형태의 문자열을 자바스크립트 값 타입으로 변환
인스턴스를 생성할 수 없으므로 함수 JSON.parse() 형태로 호출

-변환 기준
object 위치에 JSON 오브젝트 작성
첫 번째 파라미터에 변환할 데이터 지정
두 번째 파라미터에 변환을 오나료한 후 호출할 함수 작성

-숫자 값 제약
"123."을 "123.0"과 같이 소수점 아래에 숫자 작성
16진수 사용 불가. 10진수 사용
"0123"과 같이 첫 자리에 0사용 불가
"1.23e5"와 같이 지수 사용 불가


[stringify()]

-개요
자바스크립트 값을 JSON 형태의 문자열을 변환
인스턴스를 생성할 수 없으므로 함수.JSON.stringify() 형태로 호출

-변환기준
object 위치에 JSON 오브젝트 작성
첫 번째 파라미터에 변환할 값을 자바스크립트 형태로 작성
--일반적으로 [] 또는 {}를 작성하지만 String 등도 작성 가능
두 번째 파리미터는 예제 참조
세번째 파라미터에 사람이 보기 쉽도록 줄을 바꾸거나
--들여쓰기를 위한 구분자 작성.예제 참조



-------------Function 오브젝트-------------
Function
new Function() / 인스턴스 생성
Function() / 인스턴스 생성
프로퍼티
length / 함수의 파라미터 수
prototype
constructor / 생성자
toString() / 함수를 문자열로 반환
call() / 함수 호출
applay()  /함수 호출 : 배열을 파라미터로 사용
bind() / 새로운 오브젝트를 생성하고 생성한 오브젝트로 함수 실행



[new Function()]
-개요
새로운 Function 오브젝트를 생성하여 반환
파라미터를 작성한 수에 따라 인스턴스 생성 기준이 다름

-작성 기준
new Function()과 같이 파라미터를 지정하지 않으면
--실행할 코드가 없는 Function 오브젝트만 생성
파라미터를 두개 작성:
--마지막 파라미터에 함수에서 실행할 자바사크립트 코드 작성
--마지막 제외한 파라미터에 호출한 함수에서 받을 파라미터 작성

파라미터 하나 작성:
함수에서 실행할 자바스크립트 코드 작성
호출한 함수에서 받을 파라미가 없는 형태


[Function()]
-새로운 Function 오브젝트를 생성하여 반환
처리 방법과 파라미터 작성 방법은 new Function과 같음


[함수 생명 주기]

-개요
일반적으로 new Function()으로 함수인스턴스를 생성하지 않고
function 키워드를 사용하여 생성

function getBook(title){return title;}
var result = getBook("자바스크립트");

-인스턴스 생성
엔진이 function 키워드를 만나면
인스턴스 이름이 getBook인 인스턴스 생성
생성한 인스턴스를 글로벌 오브젝트에 설정
생성한 인스턴스를 설정할 오브젝트를 지정하지 않았기 때문
==생성한 인스턴스를 설정할 오브젝트를 지정하지 않았기 때문

-함수 호출
getBook("자바스크립트");
함수를 호출하면서 파라미터 값으로 "자바스크립트"를 넘겨 줌
getBook() 앞에 오브젝트를 지정하지 않으면 글로벌 오브젝트 사용


-함수 코드 실행
function getBook(title){return title;}
var result = getBook("자바스크립트");

엔진 컨트롤이 함수로 이동
파라미터 이름에 넘겨준 파라미터 값을 매핑
함수 블록 안의 자바스크립트 코드 실행
return 문이 있으면 반환 값을 갖고 함수를 호출한 곳으로 돌아 감
할당 연산자가 있으므로 반환된 값을 result 변수에 할당


[함수 선언문]

function / Function / function 키워드
식별자 / String / 함수 이름
파라미터 / Any / 파라미터 리스트 opt
함수 블록 / Object / {실행 가능 코드opt}
반환 / Function / Function Object


-함수 정의(Function Definition)
함수를 호출할 수 있도록 자바스크립트 문법에 맞게 함수를 작성하는 것
함수는 두개의 형태를 정의할 수 있음
--함수 선언문(Function Declaregion)
--함수 표현식(Function Expression)


-함수 선언문
function 키워드와 함수 이름은 필수 작성
파라미터, 블록 안의 자바스크립트는 선택
엔진이 function 키워드를 만나면 Function 오브젝트 생성
이때 함수 이름을 Function 인스턴스 이름으로 사용



[함수 표현식]

function / Function / function 키워드
식별자 / String / 함수 이름opt
파라미터 / Any / 파라미터 리스트 opt
함수 블록 / Object / {실행 가능 코드opt}
반환 / Function / Function Object


-개요
var name = function(){}
표현식 형태로 Function 오브젝트를 변수에 할당하는 형태
함수 이름이 옵션으로 작성하지 않아도 됨
-- 이때 변수 이름이 함수 이름이 됨


[toString()]

-개요
함수 코드를 문자열로 반환
구현 방법은 개발에게 위임
Object 오브젝트를 모든 빌트인 오브젝트에서 상속 받으므로
모든 오브젝트에 toString()이 존재하지만 오브젝트마다 기능이 다름



[call()]

function getTotal(one,two){
		return one+two;
};

-개요
getTotal.call(this,10,20)
getTotal() 함수를 호출하면 10과 20을 파라미터로 넘겨줌
첫 번째 파라미터에 호출된 함수에서 this로 참조할 오브젝트 지정
--일반적으로 this를 사용하지만 다른 오브젝트를 지정할 있음
--호출된 함수의 파라미터로 넘어가지 않고 두번째 넘어 감

논리 전개는 중급 과정에서 다룸



[apply()]

function getTotal(){
	var total = 0;
	
	for(var k=0;k < arguments.length;k++){
		total += arguments[k];
	}
	return total;
};

-개요
getTotal.apply(this.[10,20])
getTotal() 함수를 호출하면서 10과 20을 배열로 파라미터로 넘겨줌
call()과 함수를 호출하는 방법은 같지만
파라미터를 배열로 넘겨주어야 하는 것과
arguments를 넘겨줄 수 있는 점이 다름


---------------------[Boolean 오브젝트]---------------------

-Boolean
true 와 false로 구성
Number ,String 과 같이 빌트인 오브젝트 타입
--즉 , 오브젝트로 메소드를 가짐
값 또는 비교문에서 사용

-true , false 인식 기준
값이 undefiend 또는 null이면 false로 인식
숫자 타입으로 0 또는 NaN임ㄴ false로 인식 , 값이 있으면 true로 인식
문자열 타입에서 값이 빈 문자열이면 false로 인식 , 값이 있으면 true로 인식
오브젝트이면 true 인식

-값 변환 기준
true를 1로, false를 0으로 변환
Object로 생성하면 Boolean 오브젝트가 되고 
파라미터 값이 프리미티브에 설정



[Boolean()]
-개요
함수로 인스턴스를 생성하지 않으며
파라미터 값을 변환


---------------------[Math 오브젝트]---------------------


-Math
상수,절댓값, 발온림 , 사인 , 탄젠트와 같은 수학용 함수 제공

-싱글(Single) 오브젝트
new 연산자로 새로운 인스턴스를 생성할 수 없는 오브젝트
Math 오브젝트 , JSON 오브젝트, 글로벌 오브젝트가 속함
prototype에 프로퍼티로 연결되어 있지 않고
Math 오브젝트에 연결되어 있으므로 메소드가 아닌 함수


[Math 함수 리스트]

abs() / 절댓값 반환
floor() / 소수 이하 버림 . 정숫값 반환
ceil()  / 소수 이하절상, 정숫값 반환
round() / 소수 이하 반올림 , 정숫값 반환
max() / 최댓값
min() / 최솟값
random() / 0에서 1미만 난수
log() / 자연로그 값
cos() / 코사인(cosine)
acon() / 아크 코사인(arc cosine)
sin() / 사인(sine)
asin() / 아크 사인(arc sine)
tan() / 탄젠트(tangent)
atan() / 아크 탄젠트(arc tangent)
atan2() / y,x 좌표의 아크 탄젠트(arc tangent)
sqrt() / 제곱근
exp() / 자연로그 상수(e)의 제곱근
pow() /x의 y자승 값


[abs()]

-개요
음수를 양수로 변환하여 반환



[floor()]
-개요
소수값을 버리고 정숫값을 반환

음수값은 -1을 더해 반환


[ceil()]

-개요
소수 이하 값을 버리고 정숫값을 반환
남은 값이 양수이면 1을 더해 반환
0보다 작고 -1보다 크면 +0을 반환

[round()]

-개요
값이 양수이면 소수 이하 첫째 자리에서 반올림하여 반환
값이 음수이면 소수 이하 첫째 자리에서 반내림하여 반환
0보다 크면서 0.5보다 작으면 +0반환
0보다 작으면서 -0.5 이상이면 -0을 반환


[max()]
-개요

파라미터 값 중에서 가장 큰 값을 반환
파라미터 값을 전부 숫자 값으로 변환하여 비교
파라미터에 NaN이 하나라도 있으면 NaN 반환
파라미터를 작성하지 않으면 음수 무한대 값이 반환

[min()]

max() 반대 개념
파라미터를 작성하지 않으면 양수 무한대 값이 반환


[randow()]

-개요
0에서 1미만의 값을 난수


[log()]

-개요
파라미터 값의 자연로그 값 반환
파라미터 값이 NaN 이거나 

[cos()]

-개요
코사인(cosine)


[acos()]
-개요
아크 코사인(arc cosine)
파라미터 값을 0에서 PI까지의 라디안 값으로 변횐

[sin()]

-개요
사인(sine)

[asin()]

-개요
아크 사인(arc sine)

[tan()]

-개요
탄젠트

[atan()]

-개요
아크 탄젠트


[atan2()]

-개요
y,x 파라미터 값의 아크 탄젠트(arc tnagent)



[sqrt()]

-개요
파라미터 값의 제곱근 값을 반환
파라미터 값이 0보다 작거나 NaN 이면 NaN


[pow()]

-개요
파라미터 x 값의 y자승



------------------------------[Date오브젝트]------------------------------

-Data
년월이르 시분초 , 밀리초(millisecond) 제공
밀리초가 프리미티브 값이며 시간값(Time Value)이라고 부름

-UTC(Universal Time Coordinated) 기준
1970년 1월 1일부터 밀리초로 재공 남는 초는 무시
1970.01.01 0시 기준으로 전후 100,000,000일 지원
월은 0부터 시작, 0: 1워르 1:2월 , 11:12월
일은 1에서 31일까지 정수로 표시
요일은 0부터 시작. 0: 일요일, 1:월요일 , 6:토요일
Date 오브젝트로 값을 구할 때 숫자가 아니면 NaN반환

-UTC와 GMT(Greenwich Mean Time)는 조금 차이가 있찌만 거의 같음
자바스크립트는 UTC 기준



[시간 표시]

-시간의 문자열 형태
YYYY, YYYY-MM , YYYY-MM-DD , THH:mm , THH:mm:ss THH:mm:ss.sss
MM, DD를 지정하지 않으면 01로 간주


[프로퍼티 리스트]
Date
new Date() / 인스턴스 생성

Date 함수
Date() / 현재 시각 반환
Date.parse() / 문자열 값을 밀리초로 변환
Date.UTC() / UTC 기준 밀리초로 변환
Date.now() / 현재 시작을 밀리초로 반환

Date.prototype
constructor / 생성자
toString() / 일자와 시간을 변환해서 문자열로 반환
나머지 알아보기

[parse()]

-개요
문자열을 밀리초로 변환해서 반환

Date.parse("2013")
Date.parse("2013-12-28T09:12")


[UTC()]

-개요
파라미터 값을 UTC 기준 밀리초로 변환하여 반환
함수 이름이 소문자가 아닌 대문자



Date.UTC(2015,12,13,15,58,10)


[new Data()]

-개요
새로운 Date 오브젝트를 생성하여 반환
파라미터 값을 해석하여 인스턴스의 시간값으로 설정

-파라미터에 따른 처리
파라미터를 작성하지 않음
UTC 기준 현재 시각을 프리미티브 값으로 사용
연월일, 시분초, 밀리초 지정
지정한 값을 변환하여 프리미티브 값으로 사용

밀리초 작성
연월일 , 시분초 ,밀리초로 변환하여 프리미티브 값으로 사용


[Date 설명 생략]

-Date 오브젝트 메소드 분류
시간을 구하는 getter 메소드와
getDay() , getHour() 등
시간을 설정하는 setter 메소드로 분로
setDay(), setHour() 등
쉽게 기능을 알 수 있으므로 설명 생략

-주의 사항
시간이 중요한 경우에는
클라이언트의 시간을 사용자가 변경할 수 있으므로 서버 시간 사용


[ES5 Object 오브젝트]

-Object 오브젝트
추가된 것은 모두 함수이며 메소드는 없음
따라서 new 연산자로 생성한 인스턴스에 할당되지 않으므로
함수에 값을 파라미터로 넘겨주어 처리

-인스턴스 생성 목적
프로퍼티 이름은 같지만 인스턴스마다 다른 값을 가지려는 것
Object의 prototype에 연결된 메소드는 모든 빌트인 오브젝트에 상속
그런데 상속할 필요가 없다면 함수가 효율적

Object 오브젝트에 추가된 함수는 이런 목적을 가진 함수



[프로퍼티 리스트]

Object 함수
defindProperty() / 프로퍼티 추가 , 프로퍼티 속성 변경
getOwnPropertyDescriptor() / 디스크립터 속성 변경
defineProperties() / 다수의 프로퍼티 추가 , 속성 변경
getOwnPropertyNames() / 오브젝트 이름을 배열로 반환
keys() / 열거 가능 프로퍼티 이름 반환
create() / 새로운 오브젝트 생성 , 반환
getPrototypeOf() / prototype에 연결된 프로퍼티 반환
preventExtensions() / 프로퍼티 추가 금지 설정
isExtensible() /프로퍼티 추가 금 여부 반환
seal() /프로퍼티 추가 , 삭제 금지 설정
isSealed() / 프로퍼티 추가 , 삭제 금지 여부 반환
freeze() / 프로퍼티 추가 , 삭제.변경 금지 설정
isFrozen() / 프로퍼티 추가 , 삭제.변경 금지 여부 반환

프로퍼티 디스크립터
value / [[Value]] , 설정할 값
writable / [[Writable]], 값 변경 가능 여부
get / [[Get]], 값 반환 프로퍼티 함수
set /[[Set]], 값 설정 프로퍼티 함수

[defineProperty()]

-개요
Object에 프로퍼티를 추가하거나 프로퍼티 속성 변경

-ES3의 프리퍼티 처리 방법
var obj = {};
obj.add = "더하기";
제약없이 Object에 프로퍼티를 추가하거나 프로퍼티 값 변경 가능

-ES5 방법
프로퍼티 마다 상태를 가지고 있으므로


[디스크립터]

-프러퍼티 디스크립터(Descriptor) 타입
필드 이름(enumerable)과 필드 값(true/false)으로 구성
프로퍼티의 속성을 구체적으로 정의하거나 처리 기준 정의

-타입 분류
데이터 프로퍼티 디스크립터, 악세스(Access) 프로퍼티 디스크립터
각 프로퍼티 디스크립터에 속한 필드만 같이 사용 , value와 get을 같이 사용할 수 없음

-value
오브젝트의 프로퍼티 값으로 사용될 값을 {value:123} 형태로 작성

Object.defineProperty(obj,"book",{value : 123});

-writable
writable:true 이면 필드 값을 변경할 수 있지만
writable:false 이면 필드 값을 변경할 수 없음

-enumerable
enumerable:true이면 for~in 문으로 열거할 수 있지만
enumerable:false이면 열거 할 수 없음

-configurable
configurable:ture이면 프로퍼티를 삭제할 수 있으며
value 이외의 속성을 변경할 수 있음


[get 속성]
-getter
defineProperty() 함수를 실행하면
book 프로퍼티에 get이 연결되고 형태는 함수
book = {get:function(){...}}형태가 됨

2.result = obj.book; 코드를 만나면
obj.book에 연결된 get 함수가 호출되고
함수에서 반환한 책을 result 변수에 할당

obj.book.get() 형태로 후촐하면 에러 발생
obj.book에서 책을 반환하므려  "책".get()형태로 호출하기 때문

var obj = {}
Object.defineProperty(obj,'book',{
get:function(){
return "책";
}
});
result = obj.book;
js.log(result);


[set 속성]

-setter
1.obj.book - 123; 코드를 만나면
obj.book에 연결된 set 함수가 호출되고
123을 set 함수의 파라미터 값으로 넘겨 줌
set 함수에서 bookValue에 123을 설정

2.result = obj.book; 코드를 만나면
obj.book에 연결된 get 함수가 호출되고
함수에서 반환한 "123"을 result 변수에 할당

[defineProperties()]

-개요
다수의 프로퍼티를 추가하거나 프로퍼티 속성 변경


[getOwnPropertyNames()]

-개요
오브젝트의 프로퍼티 이름을 배열로 반환
자신이 만들 프로퍼티가 대상

[getPrototypeOf()]

-개요
prototype 오브젝트에 연결된 프로퍼티를 반환


[preventExtensions()]

-개요
오브젝트에 프로퍼티 추가 금지 설정
삭제 및 변경은 가능


[isExtensible()]

-개요
오브젝트에 프로퍼티 추가 금지 여부


[seal()]

-개요
오브젝트에 프로퍼티 추가,삭제 금지 설정
삭제 금지는 프로퍼티 단위로

[isSealed()]
-개요
오브젝트에 프로퍼티 추가,삭제 금지 여부

[freeze()]

-개요
오브젝트에 프로퍼티 추가,삭제,변경 금지 설정


[isFreezen()]

-개요
오브젝트에 프로퍼티 추가,삭제,변경 금지 여부





































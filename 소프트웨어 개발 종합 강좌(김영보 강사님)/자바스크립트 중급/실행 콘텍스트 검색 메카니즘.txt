
var sports = function (){
	var value = 123;
	function baseball(){
		js.log(value);
	};
	function swim(){
		js.log(value);
	}
	baseball();
	swim();
};
sports();

/*
	1. 마지막 줄에서 sports 함수를 호출합니다.
	2.sports 실행 콘텍스트를 생성합니다.
	3. 렉시컬 환경(LE)을 생성합니다.
	4.환경 레코드를 생성하여 렉시컬 환경에 첨부합니다.
	-설명 : 함수 안에 작성한 변수 ,함수를 환경 레코드에 기록하지만
	- 이시점에서 함수 안에 코드를 해석하지 않았으므로 기록할 수 없으며
	- 환경 레코드만 생성합니다.
	5. 외부 렉시컬 환경을 참조를 생성하여 렉시컬 환경에 첨부합니다.
	6.외부 렉시컬 환경 참조에 값을 설정합니다.
	- 설명 : sports Function 오브젝트의 [[Scope]]를 외부 렉시컬 환경
			  참조에 설정
			  
	sports 렉시컬 환경 = {
	환경 레코드 = {},
	외부 렉시컬 환경 참조(OLER) : 글로벌 렉시컬 환경
	}
	//초기화 단계
	7.	함수 선언문을 Function 오브젝트로 생성하여 
	환경 레코드에 설정합니다.
	-코드 :  function scooer(){} function swim (){}
	8.value 변수를 환경 레코드에 바인딩 합니다. 값은 undefined	
	 sports 렉시컬 환경 = {
	환경 레코드 = {
	baseball : function(){},
	swim : function(){},
	value : undefined
	},
	외부 렉시컬 환경 참조(OLER) : 글로벌 렉시컬 환경
	}
			  
	// 실행 단계
	9. value 변수에 123을 할당합니다.
	-코드 : var value = 123;
	- 설명 : 환경 레코드의 value프로퍼티 값이 123이로 변경 됩니다.
	
	10.baseball 함수를 호출합니다.
	-함수가 호출되면 앞에서 sports() 함수를 처리했던 과정을 수행합니다.
	
	11.swim 함수를 호출합니다.
	-함수가 호출되면 앞에서 sports() 함수를 처리했던 과정을 수행합니다.
	
	//추가 설명
	1) baseball 함수에서 js.log(value) 문장을 실행하게 되면
	-함수 안에 value 변수가 없으므로
	-외부 환경 렉시컬 참조에서 검색하게 되며
	- value가 있으므로 값을 사용하게 됩니다.
	-swim 함수도 마찬가지입니다.
	
	2) baseball 렉시컬 환경이라는 하나의 통 속에
	-baseball 오브젝트의 변수/함수와
	sports 오브젝트의 변수/함수를 넣어두고 사용하는 모습입니다.
			  
			  
*/
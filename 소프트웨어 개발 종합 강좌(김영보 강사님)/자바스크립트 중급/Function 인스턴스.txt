
[Function 인스턴스 생성]

- Function 구분
빌트인 Function 오브젝트
Function 오브젝트 : function 키워드로 생성
Function 인스턴스 : new 연산자로 생성

new를 만나면 일단 인스턴스부터 만든다.

-Function 오브젝트로 인스턴스
빌트인 Function 오브젝트로생성?!

   //인스턴스 생성 순서 및 방법
   1.sports 오브젝트를 생성합니다.
   - 코드 : function sports(value){...}
   2.sports.prototype에 getValue를 연결하고 function(){}을
   설정 합니다.
     sports.prototype.getValue = function(){
     	return this.value + 300;
     }
     - 설명 : sports.prototype이 오브젝트이므로
     			프로퍼티를 추가 할수 있습니다.
    3.sprots 오브젝트로 인스턴스를 생성하여 sportsObj에 할당합니다.
    - 코드 : var sportsObj = new sports(123);
    4.생성한 인스턴스에서 프로퍼티 이름으로 값을 출력합니다.
    -js.log(sportsObj.value);
    
    5.생성한 인스턴스의 메소드를 호출합니다.
    -js.log(sportsObj.getValue());
    -this.value + 300;에서 this는 sportsObj 인스턴스를 참조합니다.
    -prototype에 연결된 function(){}은 함수가 아닌 method 입니다.


[prototype]

-prototype 오브젝트 목적
프로퍼티 연결을 통한 프로퍼티 확장
생성한 각 인스턴스에서 prototype의 프로퍼티 공유
다른 Function 인스턴스를 상속받음

-프로퍼티 확장
prototype이 오브젝트이므로 프로퍼티를 연결하여 확장 가능

-프로퍼티 공유
prototype에 연결된 프로퍼티로 인스턴스 생성
인스턴스에서 prototype에 연결된 프로퍼티 값 공유

-인스턴스 상속
Function 오브젝트를 인스턴스로 생성하여 prototype 연결
--객체 지향의 상속 개념
--prototype-based inheritance(상속)라고 함
prototype으로 상속을 구현한 형태를
--프로토타입 체인(Prototype Chain)이라고 함



[프로퍼티 확장]

-확장 방법
Function 오브젝트의 prototype에 프로퍼티 연결
--prototype = {key:{key:value}}형태로 확장


[프로퍼티 연결 방법]
-sports.prototype['get'] = function(){};
프로퍼티 이름을 문자열로 작성

-sports.prototype.get = function(){};
.으로 연결


-sports.prototype= {a:function(){}}

[프로퍼티 연결 목적]

-인스턴스 생성 기준
prototype에 연결된 프로퍼티로 인스턴스 생성
복사기로 원본을 복사해서 사용하는 모습

-prototype의 프로퍼티 공유
생성한 모든 인스턴스에서 prototype의 프로퍼티 공유
각각 다른 인스턴스에서 같은 결과를 얻을 수 있음
공유하게 되므로 한 곳으에서 값을 바꾸면 모든 인스턴스에 반영

-인스턴스마다 값을 사용하려면
this.getMember() , this.value 형태 사용
this가 원본 Function 오브젝트를 참조하지 않고
생성한 인스턴스를 참조


[this 와 prototype]

-호출한 함수 앞에 작성한 오브젝트 참조
salesObj.getTotal() 에서 this가 salesObj 참조

-인스턴스 참조
new Sports()로 생성한 인스턴스를 this가 참조
prototype에 연결된 프로퍼티가 인스턴스 프로퍼티가 되므로
this.prototype.getMember() 형태가 아닌
this.getMember() 형태로 호출

-주의 사항
prototype에는 {},[],문자등은 쓰지 않는다.


[프로퍼티 공유 시점]

-prototype 프로퍼티의 공유 시점
사용하는 시점에 공유

-공유 메커니즘
prototype에 연결된  프로퍼티로 인스턴스를 생성하지만
인스턴스의 프로퍼티는 원본 prototype의 프로퍼티 참조
복사하여 인스턴스에 갖고 있는 개념이 아님
인스턴스의 메소드를 호출하면 원본 prototype에 연결된 메소드를 호출

-원본 prototype에 메소드 추가
생성한 모든 인스턴스에서 추가한 메소드 호출가능
인스턴스의 메소드가 아닌 원본 prototype의 메소드를 호출하기 때문
prototype에 연결된 프로퍼티 값을 변경하더라도 마찬가지




[인스턴스 프로퍼티]

-인스턴스 프로퍼티
생성한 인스턴스에 프로퍼티가 연결된 형태
prototype의 프로퍼티 보다 먼저 사용
인스턴스마다 값을 다르게 가질 수 있음



var sport = new function(){};
sports.prototype.member = 123;
var sportsObj = new sports();
debugger;

sportsObj.member = 456;

js.log(sportsObj.member);
js.log(sportsObj.prototype.member);

sportsObj : {
	member : 456,
	__proto__: {
	construnctor : function(){}.
	member : 123
	}
}












[웹 환경과 상속]

-웹 환경
웹 페이지가 바뀔 때 마다 자바스크립트 랜더링

-상속 구조
사용 여부와 관계없이 랜더링할 때 마다 인스턴스 생성

-랜더링 시간 단축
함수를 호출했을 때 인스턴스 생성

-웹 프로그램 특성
UI/UX 개선을 위해 자주 자바스크립트 프로그램 변경
이때 마다 상속 구조를 체크하고 변경하는 것은 비효율적
필요에 따라 코드를 만들어 쓰는 유연성 떨어짐

-컴포넌트 지향
객체들을 텍스트 상태로 평명 위에 펄쳐 놓고
필요한 것을 필요한 때에 결합하여 사용

[프로퍼티 연동 방지]

-오브젝트에 오브젝트를 할당하면
프로퍼티 값이 연동 됨
배열도 마찬가지로 연동 됨
이를 방지하려면 프로퍼티 단위로 할당


var list = [1,2,3,];
var allocate = list;  같은 주소값을 가지고 있다!!
allocate[1] = 123; 하면 list도 바뀐다!!


[재귀 함수]

-Recursive Function
함수 안에서 자신 함수를 호출하는 형태
{key:{key:{key:value}}} 형태에 사용
[[1,2],[3,4,[5,6]]] 형태에 사용


var sports = {
		soccer : {member : 11, time : 90}
		,basketball : {member : 5,time :48}
};

function showValuse(sports){
	var type , obj;
	for(type in sports){
		obj = sports[type];
		typeof obj === 'object' ? 
				showValuse(obj) : js.log(type,":",obj);
	}
}
showValuse(sports);



[함수 즉시 실행]
-함수 즉시 실행이란?
엔진이 함수 코드를 만나면 자동으로 함수를 실행하는 형태

-먼저 예제를 싱핼하여 코드 형태 이해

-무명 함수, 익명 함수
function(){}; 형태로 이름이 없음

-function(){} 형태 문법
함수 이름이 없으므로 함수 선언문 , 함수 표현식도 아님
따라서 문법 에러가 발생해야 하지만 발생하지 않음

[자동 실행 메커니즘]
-표현식 평가

-function(){}뒤에 ()는 자동 실행이다.
--그룹핑을 해야함!!
(function(파라미터){})(파라미터); 맞는 문법!

1.표현식과 표현식의 결과는 메모리에 저장되지 않습니다.
2.(1+2)의 결과가 메모르에 저장된다면 매무 큰 메모리가 필요할 것입니다.
3.마찬가지로 function(){}(); 코드도 메모리에 저장되지 않으며
  실행 결과도 메모리에 저장되지 않습니다.
4. 따라서 저장해야 할 것이 있다면 function 블록 안에서
   저장해야 합니다.

5.이를 반대로 생각하면 저장할 필요가 없는 일회성 코드이면서
  엔진이 function 키워드를 만나는 시점에 즉시 실행해야 한다면
  그룹핑 연산자 안에 표현식으로 코드를 작성하는 것이 좋습니다.


var total = (1+2);
var value  = function(){
	return 123;
};
js.log("함수 호출 : ", value());
var value  = function(){
	return 465;
}();

js.log("자동실행 : ", value);
value = (function(){
	return 798;
})();

js.log(value);
(function(){
	js.log("ABC");
})();



[클로저]

-Closure 개요
자바스크립트의 특정 기능을 지칭
Function 오브젝트를 생성할 때 [[Scope]]에 렉시컬 환경을 설정하고
함수가 호출되었을때 [[Scope]]의 프로퍼티를 사용하는 메카니즘

[클로저 논리]

-클로저 논리 근거
실행증인 함수의 [[Scope]]에 설정된 프로퍼티는
--1단계 밖의 함수와 변수로 구성
외부 렉시컬 환경 참조에 들어간다.

[클로저 정리]

-자바스크립에서 클로저
함수에서 1단계 밖의 변수 사용은
--자바스크립트의 기본 메커니즘
논리적 근거는 외부 렉시컬 환경 참조
외부 렉시컬 환경 참조에 1단계 밖의 변수가 설정되며
--함수에서 함수 안의 변수처럼 접근할 수 있음

-클로저로 구분할 명분, 이유 없음
이런 모습을 나타내는 용어






-Lexical Environment-

[사전 이해]

-Function 오브젝트
오브젝트 생성
오브젝트 프로퍼티

-함수 형태
함수 표현식
함수 선언문

-Argument 오브젝트

-함수,변수
글로벌 , 지역 함수/변수

-스코프
정적 바인딩
동적 바인딩

[실행 콘덱스트]

-개요
Excecution Contexts
함수의 실행 영역
함수 코드를 실행하고
실행 결과를 저장

-ES5 스펙상의 사양
외부 프로그램에서 접근 불가

-실행 콘텍스트 처리 단계
준비 단계
초기화 단계
코드 실행 단계


[렉시컬 환경]

-함수 실행 환경과 범위
구조적 환경에서 독립적으로 실행
오브젝트 , 변수 , 다른 함수를 참조

-렉시컬 환경(Lexical Environment)
함수가 사용할 함수 , 변수를 렉시컬 환경에 설정
함수가 구조적 , 독립적 환경에서 실행하기 위한 메커니즘 제공

-ES5의 새로운 개념
ES3에 없는 개념으로 스펙상의 사양

-초기화 단계에서 해석한
모든 함수/변수를 {key: value} 형태로 저장
함수/변수 이름을 key에 설정하고 값을 value에 설정
따라서 함수/변수를 key로 식별할 수 있음


[렉시컬 환경 구성]

-렉시컬 환경은
function , with문 , try-catch의 catch문에서 생성

-렉시컬 환경 구성 형태
렉시컬 환경(LE) = {
	환경 레코드(ER :Environment Recode): {.....},	
	외부 렉시컬 환경 참조(OLER: Outer Lexical Environment Refernce){...}
}

환경 레코드에 함수 안에 함수 , 변수 기록
외부 렉시컬 환경 참조에 가장 근접한 스코프 기록

-함수/변수 검색 방법
1.환경 레코드에서 겸색
2.존재하지 않으면 외부 렉시컬 환경 참조에서 검색

-소스 코드 작성 최적화 방법
되도록 1단계 안에  변수,함수 작성
1단계 밖의 실행 환경이 스코프이며 외부 렉시컬 환경 참조에 설정되기 때문


-렉시컬 환경 구성 형태

   렉시컬 환경 구성 형태
      렉시컬 환경(LE)={
         환경 레코드(ER:Environment Record):{
            sports:"농구",
            member:"5명"
         },
         외부 렉시컬 환경 참조(OLER:Outer Lexical Environment Reference):{
            play:function(){},
            values:[12,34,56]
         }
      }


-장점
근접한 렉시컬 환경의 논리적 연결을 통해
현재 렉시컬 환경에 영향을 미치지 않으면서
1단계 밖 스코프의 프로퍼티를 이동하지 않고 사용

-스코프 체인과 외부 렉시컬 환경 참조 사이
-ES3 : 스코프 체인으로 근접한 프로퍼티를 이동하지 않고 사용
--인식하기 위한 별도 처리 필요
-렉시컬 환경
--실행 콘텍스트에 근접한 스코프를 갖고 있으므로
--별도 처리 없이 프로퍼티 접근 가능


[검색 메커니즘]

-프포퍼티 검색 순서 , 방법
1.함수 안에서 프로퍼티 검색
2. 존재하지 않으면 외부 렉시컬 환경 참조에서 검색

-[[Scope]] 사용


[환경 레코드(Environment Record)]

-환경 레코드(Environment Record)
함수 , 변수를 사용하기 위해서는
엔진이 인식할 수 있는 곳에 기록해야 하며
그곳이 환경 레코드

-환경 레코드 구성
렉시력 환경 = {
	환경 레코드 : {
	선언적(Declarative) : 환경레코드 : {},
	오브젝트(Object) : 환경 레코드 : {}
	},
	외부 렉시컬 환경 : {}
}

[환경 레코드 구분]
-환경 레코드 구분 이유
기록 대상에 따라 처리 방법이 다르기 때문

-선언적 환경 레코드
function 변수, catch 문에 사용

-오브젝트 환경 레코드
글로벌 오브젝트의 함수 , 변수
with 문에 사용 : with 문에 사용 : with 문을 반복할 때마다 바뀌기 때문



-실행 콘텍스트-

[실행 콘텍스트]
-생성 시점
실행 가능 코드를 만났을때

-실행 가능 코드 유형
함수코드(function code)
글로벌 코드(global code)
eval 코드 (eval 코드)

-코드 유형 분리 이유
실행 콘텍스트에서 처리하는 방법과 환경이 다르기 떄문
함수코드 : 렉시컬 환경
글로벌 코드 : 글러벌 환경

[상태 컴포넌트]

-상태 컴포넌트 유형
실행 콘텍스트 생성 직후, 실행 콘텍스트 안에 생성
렉시컬 환경 컴포넌트(LEC : Lexical Environment Component)
변수 환경 컴포넌트(VEC : Variable Environmnet Component)
this 바인딩 컴포넌트 (TBC: This Binding Component)

-컴포넌트 구조 형태
실행 콘텍스트(EC) = {
	렉스컬 환경 컴포넌트(LEC) : {},
	변수 환경 컴포넌트(VEC) : {} ,
	this 바인딩 컴포넌트 {}
}



[환경 컴포넌트]

-환경 컴포넌트 구성
렉시컬 환경 컴포넌트와 변수 환경 컴포넌트 지칭

-환경 컴포넌트 내용
렉시컬 환경을 환경 컴포넌트에 설정
생성 시점에는 함수 코드를 해석하지 않았으므로
렉시컬 환경의 환경 레코드는 빈 상태이고
외부 렉시컬 환경 참조에 [[scope]]가 설정된 상태

-실행 콘텍스트 초기화 단계에서
변수 이름, 함수 선언문 , 함수의 파라미터를
렉시컬과 변수 환경 컴포넌트의 환경 레코드에 같이 설정

- 컴포넌트를 분리하는 이유
실행 단계에서 실행 결과를 렉시컬 환경 컴포넌트에 설정
변수 환경에는 설정하지 않음
이유 : 초깃값으로 환원할 때 사용하기 위하여

실행 콘텍스트 = {
	환경 컴포넌트  : {
		환경 레코드 : {},
		외부 렉시컬 환경 참조 : {[scope]}
	},
	변수 환경 컴포넌트 = {
		환경 레코드 : {},
		외부 렉시컬 환경 참조 : {[scope]}
	},
	tihs 바인딩 컴포넌트 : {}
}



[this 바인딩 컴포넌트]

-목적
this로 호출한 함수가 속한 오브젝트의 프로퍼티에 악세스
예 : this.propery_name

-악세스 메커니즘
호출한 함수가 속한 오브젝트를 참조할 수 있도록
this 바인딩 컴포넌트에 호출한 함수가 속한 오브젝트를 설정

obj.sports()에서 this로 obj 참조
obj를 this 바인딩 컴포넌트에 설정

obj의 프로퍼티가 변경되면 동적으로 참조


[스택]

-스택(Stack)
실행 콘텍스트의 논리적 구조
함수 안의 자바스크립트 코드가 실행되는 곳

-FILO 순서
First In Last Out
함수가 호출되면
--스택의 가장 위에 실행 콘텍스가 놓이게 됨
다시 함수 안에서 함수를 호출하면
--호출된 함수의 실행 콘텍스트가 스택의 가장 위에 놓이게 됨

함수가 종료되면 스택에서 빠져 나옴(FILO 순서)
가장 아래는 글로벌 오브젝트의 함수가 위치



[글로벌 코드 준비 단계]

debugger;
var value = 123;
function sports(){
	
};

var music = function(){};
sports();

실행 콘텍스트 = {


}

 //글로벌 코드 실행 준비 과정
  1.글로벌 환경을 생성합니다.
  2.환경 레코드를 생성하여 글로벌 환경에 첨부합니다.
  
  3.오브젝트 환경 레코드를 생성하여 환경 레코드에 첨부합니다.
  1)빌트인 글로벌 오브젝트를 오브젝트에 환경 레코드를 바인딩합니다.
  2)따라서 빌트인 오브젝트의 값 프로퍼티(NaN,undefind, Infinity)와
    함수 프로퍼티(eval , parseInt , isNaN 등의 함수)가
    오브젝트 환경 레코드에 존재하게 됩니다.
    
   4.외부 렉시컬 환경 참조를 생성하여 글로벌 환경에 첨부합니다.
   - 설명 : 참조할 외부가 없으므로 외부 렉시컬 환경 참조에 null이 설정됩니다.
   
   5.글로벌 오브젝트를 생성합니다.
   -설명 : 글로벌 오브젝트에 설정됩니다.
   -설명 : 글로벌 환경과 글로벌 오브젝트 생성 순서가
      	     ES5 스펙에 작성되어 있지 않으므로 순서가 바뀔수 있지만
      	     순서가 바뀌더라도 처리에 영향을 주지 않습니다.
      	     
   6.실행 콘텍스트를 생성하고 엔진이 실행 콘텍스트 안으로 이동합니다.
   - 설명 : 글로벌 코드를 파라미터로 싱행 콘텍스트에 넘겨 줍니다.
   
   7.렉시컬 환경 컴포넌트를 생성합니다.
   8. 1번에서 생성한 글로벌 환경을 렉시컬 환경 컴포넌트에 설정합니다.
   
   9.변수 환경 컴포넌트를 생성합니다.
   10.1번에서 생성한 글로벌 환경을 변수 환경 컴포는트에 설정합니다.
   
   11.this 바인딩 컴포넌트를 생성합니다.
   12. 5번에서 생성한 글로벌 오브젝트를 this 바인딩 컴포넌트에 설정합니다.
   1)글로벌 오브젝트를 this 바인딩 컴포넌트에 설정하므로
   -실행 콘텍스트에서 this.propertyName 형태로
    글로벌 오브젝트의 변수와 함수를 사용할 수 있습니다.
    2)실행 콘텍스트 안에서 호출된 함수에서 글로벌 오트젝트의 프로퍼티를
    -변동(추가,삭제,변경)힌 후 돌아왔을 때
    -this 바인딩 컴포넌트에 반영되어 있으므로 즉시 사용할 수 있습니다.
    

[함수 선언문 초기화]

1.엔진이 글로벌 코드의 첫 번째 줄에 위치하게 됩니다.
2,첫 번째 줄부터 작성한 순서로 읽어가면서 함수 선언문을 찾습니다.

3.sports(){}가 함수 선언문이므로 Function 오브젝트를 생성합니다.
4.Function 오브젝트의 [[Scope]]에 글로벌 환경을 설정합니다
-설명 :글로벌 코드에서 함수를 호출했를 때 호출된 함수의 외부 렉시컬 환경 참조에
	설정하게 됩니다.

5.Function 오브젝트의 [[Code]]에 함수 코드를 설정합니다.
6. 오브젝트 환경 레코드에 Sports Function 오브젝트를 설정합니다.
-설명 : 글로벌 코드의 실행 단계에서 sports()와 같이 함수를 호출하는 코드를 만나면,
	오브젝트 호나경 레코드에서 Sports로 식별자를 해결하고 값 타입이 
	Function  오브젝트이면 Sports()를 호출합니다.

7.글로벌 코드에 함수 선언문 형태가 더 없으므로 첫 번째 줄로 이동합니다.

//변수 , 함수 표현식 초기화
8.첫 번째 줄부터 작성한 순서로 읽어가면서 변수를 찾습니다.
9.value 변수를 오브젝트 환경 레코드에 바인딩 합니다.
- 설명 : value가 오브젝트 환경 레코드에 존재함녀 설정하지 않습니다.
	 따라서 아래 10번은 value가 오브젝트 환경 레코드에 없을 때만 실행합니다.

10. value 변수의 초깃값을 undefined로 설정합니다.
- 설명 : var value - 123;에서 123을 할당 하는 것은 실행 단계에서 합니다.

11.music을 오브젝트 환경 레코드에 바인딩하고
-초깃값으로 undefined를 설정합니다.
- 설명 : music이 오브젝트 환경 레코드에 존재하면 설정하지 않습니다.
- 설명 :var music = function(){}에서
- Function 오브젝트를 생성하고 할당하는 것은 실행 단계에서 합니다.

12.글로벌 코드에 변수가 더 없으므로 첫 번째로 줄로 이동합니다.

//글러벌 코드 실행 
13. 글로벌 코드를 실행하기 위한 준비가 되었으며
-첫 번째 줄부터 하나씩 작성한 순서로 읽어가면서 실행합니다.
- 설명 : 이 시점이 debugger로 멈춤 시점입니다.

14. var value = 123; 문장을 만나 value에 123을 할당하게 됩니다.
 렉시컬 환경 컴포넌트 : {
	글로벌 환경 : {
		환경 레코드 : {
			오브젝트 환경 레코드 : {value : 123}
		},		
	외부 렉시컬 환경 참조 : null;
	}
}

15. F11을 누르면 function sports(){} 문장을 건너뛰어
- var music = function(){}문장 앞으로 이동합니다.
- 설명 : sports는 이미 Function 오브젝트로 생성하였으며
- 실행 문장이 아니기 떄문입니다.

16 F11을 누르면 var music = function(){} 문장을 만납니다.
17.Function 오브젝트를 생성하여 music에 할당합니다.
- 설명 : 오브젝트 환경 레코드의 music에 Function 오브젝트가 할당됩니다.
- 이제부터 music()으로 함수를 호출할 수 있습니다.

18.F11을 누르면 sports()를 만나 함수를 호출합니다.


[함수 코드]

-함수 코드 처리 단계
준비 단계
함수 선언문 초기화
변수/함수 표현식 초기화
함수 코드 실행

-함수 코드와 글로벌 코드 차이
1.글로벌 코드
글로벌 환경
외부렉시컬 환경 참조 값 없음
오브젝트 환경 레코드에 해석/실행 경과 바인딩

2.함수 코드
렉시컬 환경
외부 렉시컬 환경 참조 값 있음
선언적 환경 레코드에 해석/실행 결과 바인딩
스코프 있음


-함수가 호출되면
실행 콘텍스트에 파라미터를 넘겨줌

-호출한 함수가 속한 오브젝트를
this 바인딩 컴포넌트에 설정하여 this로 참조

-호출된 함수 코드
호출된 함수에서 실행할 코드로
호출된 함수의 Function 오브젝트의 [[Code]]에 설정되어 있음

-호출한 함수의 파라미터 값
호출된 함수의 arguments 오브젝트에 설정


[함수 코드 환경 설정]

   //함수 코드 실행 환경 설정
  1.실행 콘텍스트 생성합니다.
  2.세 개의 파라미터를 갖고 실행 콘텍스트 안으로 들어갑니다.
  -호출한 함수가 속한 오브젝트 , 함수 코드 , 호출한 함수의 파라미터 값
  
  3.렉시컬 환경 컴포넌트(LEC)를 생성합니다.
  4.변수 환경 컴포넌트(VEC)를 생성합니다.
  5.this바인딩 컴포넌트를 생성합니다.
  6.호출한 함수가 속한 오브젝트의 프로퍼티를 this 바인딩 컴포넌트에
    설정합니다.
    
    7.새로운 렉시컬 환경(LE)을 생성합니다.
    - 설명 : 7번 추가 설명을 참조하세요
    
    8.환경 레코드를 생성하여 생성한 렉시컬 환경에 첨부합니다.
    9.선언적 환경 레코드를 생성하여 환경 레코드에 첨부합니다.
    -설명 : 아직 함수 코드를 해석하지 않았으므로 빈 상태입니다.
    10.외부 렉시컬 환경 참조를 생성하여 렉시컬 환경에 첨부합니다.
    11.호출한 함수 오브젝트의 [[Scope]]를 외부 렉시컬 환경 참조에 설정합니다.
    
    12.렉시컬 환경(LE)을 렉시컬 환경 컴포넌트에 설정합니다.
    13.렉시컬 환경(LE)을 변수 환경 컴포넌트에 설정합니다.
    -설명 : 렉시컬 환경 컴포넌트와 변수 환경 컴포넌트의 초기값이 같게 됩니다.
    
    //7번의 추가 설명
    1) 빌트인 형태의 렉시컬 환경을 인스턴스로 생성합니다.
    2)오브젝트를 인스턴스로 생성하면 프로퍼티를 공유하게 되지만
    -공유가 아닌 단지 같은 형태의 헥시컬 환경을 생성한다는 의미입니다.
   ]


[파라미터 값 매핑]
-파라미터 값 매핑이란?
호출한 함수에서 넘겨 준 파라미터 값을
호출받은 함수의 파라미터 이름 순서에 맞추어 값을 설정하는 것

-엔진 관점
실행 콘텍스트에 파라미터로 넘겨 준 값과
함수의 [[FormalParameters]]에 작성된 이름을 사용하여
이름과 값을 매핑하고 결과를 선언적 환경 레코드에 설정하는것


[선언적 환경 레코드에 설정]

//변수 초기화 단계

1.함수 호출하면 파라미터 값을 실행 콘텍스트에 파라미터로 넘겨줍니다.
- 코드 : obj.sports(11,22)

2.파라미터 이름에 값을 매핑하여 선언적 환경 레코드에 설정합니다.
- 설명 : {one : 11 , two :22} 형태가 됩니다.

3.함수 코드 처음부터 순서대로 변수 초기화를 합니다.
4.엔진이 var one;문장을 만납니다. // 함수안에서 한번도 선언 했다고 치고
5.식별자 해결 규칙으로

6.

7.다음 문장으로 이동
- 설명 : js.log(one + two)가 실행 코드이므로 다음 문장으로 이동합니다.
8.two = 77;문장으로 만납니다.
90


[코딩 : 파라미터 매핑]

-엔진 관점에서 출력된 값의 논리를 제시하세요.
함수의 파라미터 값이 매핑되는 과정을
{key:value} 형태로 기술하고
최종값이 출력되는 논리를 생각하세요.

-함수 형태
function sports(one,two, two){js.log(one + two);}
sports(11,22,55);
두번째 , 세번째 파라미터 이름이 값습니다.
힌트 : 파라미터 식별자 해결 기준


[함수 , 변수 바인딩]

-바인딩 순서
1.파라미터 값을 선언적 환경 레코드에 설정
2. 모든 함수 선언문을 Function 오브젝트로 생성하여
-선언적 환경 레코드에 설정
3.arguments 오브젝트를 선언적 환경 레코드에 설정
4.모든 변수와 함수 표현식을 선언적 환경 레코드에 바인딩

-설정과 바인딩 차이
설정은 프로퍼티가 존재하더라도 값을 대체
--예: 파라미터 이름과 함수 이름이 같으면 함수로 대체됨
바인딩은 프로퍼티가 존재하면 값을 설정하지 않음
--예 : 파라미터 이름과 변수 이름이 같더라도 초기화 단계에서는 대체되지 않음




[eval 코드]
-작성 및 실행 방법
eval 코드 : eval() 함수와 파라미터에 작성한 코드를 총칭
함수의 파라미터에 실행 가능한 코드를 문자열로 작성
문자열을 자바스크립트 코드로 간주하여 해석하고 실행

파라미터가 문자열이 아니면
-- 실행하지 않고 해석만 하여 반환

빌트인 글로벌 오브젝트 함수로
--함수 앞에 오브젝트를 작성하지 않음

보안에 문제가 있으니 !!!! 사용하지 알아라!!!


[try~catch]

-개요
try 블록 문장에서 에러가 발생하면
--catch 블록을 실행하고
에러가 발생하지 않으면
--catch 블록을 실행하지 않음
throw로 에러 발생가능




[Function 인스턴스 생성]

- Function 구분
빌트인 Function 오브젝트
Function 오브젝트 : function 키워드로 생성
Function 인스턴스 : new 연산자로 생성

new를 만나면 일단 인스턴스부터 만든다.

-Function 오브젝트로 인스턴스
빌트인 Function 오브젝트로생성?!

   //인스턴스 생성 순서 및 방법
   1.sports 오브젝트를 생성합니다.
   - 코드 : function sports(value){...}
   2.sports.prototype에 getValue를 연결하고 function(){}을
   설정 합니다.
     sports.prototype.getValue = function(){
     	return this.value + 300;
     }
     - 설명 : sports.prototype이 오브젝트이므로
     			프로퍼티를 추가 할수 있습니다.
    3.sprots 오브젝트로 인스턴스를 생성하여 sportsObj에 할당합니다.
    - 코드 : var sportsObj = new sports(123);
    4.생성한 인스턴스에서 프로퍼티 이름으로 값을 출력합니다.
    -js.log(sportsObj.value);
    
    5.생성한 인스턴스의 메소드를 호출합니다.
    -js.log(sportsObj.getValue());
    -this.value + 300;에서 this는 sportsObj 인스턴스를 참조합니다.
    -prototype에 연결된 function(){}은 함수가 아닌 method 입니다.


[생성자 함수]

-생성자 함수
new 연산자와 함께 인스턴스 생성하는 함수
new Sports()에서 Sports()가 생성자 함수


-인스턴스 생성 방법
new 연산자 : 인스턴스 생성 제어
생성자 함수 : 인스턴스 생성 및 반환 / 인스턴스에 초깃값 설정

-생성자 함수 형태
코딩 관례로 첫 문자를 대문자 사용
new Number(), new String(), new Sports();

//new 연산자와 생성자 함수 실행 과정
	1. 엔진이 new 연산자를 만납니다.
	2.표현식(생성자 함수)을 편가하고 결과를 반환합니다.
	3.평가 결과 값이 오브젝트가 아니면 더이상 처리하지 않습니다.
	- 설명 : 오브젝트가 아니면 프로퍼티를 추가할 수 없기 떄문입니다.
	4. 평가한 오브젝트 
	- Baseball Function 오브젝트를 생성할 때
	   Baseball 함수를 참조하도록 [[Construct]]에 설정하였습니다.
	
	5.[[Construct]]에서 인스턴스를 생성하여 반환합니다.
	-설명 : 아래에서 처리과정을 다름니다.
	6.5번에서 반환된 오브젝트(인스턴스)를 반환합니다.
	'7.new라는 단어의 선입견으로 인해
	-new 연산자가 인스턴스를 생성하는 것으로 생각 할 수 있습니다.
	하지만 Baseball Function 오브젝트의 [[Construct]]를 실행하여
	인스턴스를 생성합니다.
	
	
	//[[Construct]]의 인스턴스 생성과정
	1.새로운 Objct 오브젝트를 생성합니다.
	2.생성한 오브젝트에 자바스크립트 내부 처리용 메소드를 설정합니다.
	3.오브젝트의 [[Class]]에 Object를 설정합니다
	- 따라서 생성한 인스턴스 타입은 object가 됩니다.
	4.Baseball 오브젝트의 [[Prototype]]에 설정된 프로퍼티를
	생성한 오브젝의 [[Prototype]]에 설정합니다.
	prototype 아래에 constructor가 있으며 같이 설정합니다.



[constructor]

-constructor 프로퍼티
Function 오브젝트를 생성할 때 설정되며
생성하는 Function 오브젝트를 참조하도록 설정
prototype에 연결되어 있음

-경험
constructor가 인스턴스를 생성하는 뉘앙스를 풍기지만
constructor가 없더라도 인스턴스 생성에는 지장이 없음
인스턴스를 생성할 때 [[Construct]]를 사용하기 때문으로 생각 됨
하지만 , 스펙에 정의된 사항이므로 필요하지 않다는 의미로 생각


[prototype]

-prototype 오브젝트 목적
프로퍼티 연결을 통한 프로퍼티 확장
생성한 각 인스턴스에서 prototype의 프로퍼티 공유
다른 Function 인스턴스를 상속받음

-프로퍼티 확장
prototype이 오브젝트이므로 프로퍼티를 연결하여 확장 가능

-프로퍼티 공유
prototype에 연결된 프로퍼티로 인스턴스 생성
인스턴스에서 prototype에 연결된 프로퍼티 값 공유

-인스턴스 상속
Function 오브젝트를 인스턴스로 생성하여 prototype 연결
--객체 지향의 상속 개념
--prototype-based inheritance(상속)라고 함
prototype으로 상속을 구현한 형태를
--프로토타입 체인(Prototype Chain)이라고 함


[프로퍼티 확장]

-확장 방법
Function 오브젝트의 prototype에 프로퍼티 연결
--prototype = {key:{key:value}}형태로 확장


[프로퍼티 연결 방법]
-sports.prototype['get'] = function(){};
프로퍼티 이름을 문자열로 작성

-sports.prototype.get = function(){};
.으로 연결

-sports.prototype= {a:function(){}}



[프로퍼티 연결 목적]

-인스턴스 생성 기준
prototype에 연결된 프로퍼티로 인스턴스 생성
복사기로 원본을 복사해서 사용하는 모습

-prototype의 프로퍼티 공유
생성한 모든 인스턴스에서 prototype의 프로퍼티 공유
각각 다른 인스턴스에서 같은 결과를 얻을 수 있음
공유하게 되므로 한 곳으에서 값을 바꾸면 모든 인스턴스에 반영

-인스턴스마다 값을 사용하려면
this.getMember() , this.value 형태 사용
this가 원본 Function 오브젝트를 참조하지 않고
생성한 인스턴스를 참조

[this 와 prototype]

-호출한 함수 앞에 작성한 오브젝트 참조
salesObj.getTotal() 에서 this가 salesObj 참조

-인스턴스 참조
new Sports()로 생성한 인스턴스를 this가 참조
prototype에 연결된 프로퍼티가 인스턴스 프로퍼티가 되므로
this.prototype.getMember() 형태가 아닌
this.getMember() 형태로 호출

-주의 사항
prototype에는 {},[],문자등은 쓰지 않는다.

[프로퍼티 공유 시점]

-prototype 프로퍼티의 공유 시점
사용하는 시점에 공유

-공유 메커니즘
prototype에 연결된  프로퍼티로 인스턴스를 생성하지만
인스턴스의 프로퍼티는 원본 prototype의 프로퍼티 참조
복사하여 인스턴스에 갖고 있는 개념이 아님
인스턴스의 메소드를 호출하면 원본 prototype에 연결된 메소드를 호출

-원본 prototype에 메소드 추가
생성한 모든 인스턴스에서 추가한 메소드 호출가능
인스턴스의 메소드가 아닌 원본 prototype의 메소드를 호출하기 때문
prototype에 연결된 프로퍼티 값을 변경하더라도 마찬가지


var sport = new function(){};
sports.prototype.member = 123;
var sportsObj = new sports();

sports.prototpye.getMember = function(){
	return this.member;
}

debugger;
js.log(sportsObj.getMember());

/*
	var sportsObj = new sports();
	1.sports 인스턴스를 생성하여 sports();
	--------------------------
	sports.prototype.getMember = function(){
	return this.member;
	}
	1.sportsObj의 원본인 sports.prototype에 getMember를 추가합니다.
	2.이미 생성한 모든 인스턴스에서 getMember를 호출하기 때문
	
	---------------
	sportsObj.getMember()
	1.sportsObj를 생성하는 시점에는 prototype에 getMember가
	없었으나 getMember()를 호출하기 전에 추가했으므로 사용할 수
	있습니다.
	
	******
    1.결과적으로 prototype에 연결된 프로퍼티로
      인스턴스를 생성하는 이유가 모호하다고 생각할 수있지만
      -원본에는 prototype 이외에도 프로퍼티를 연결할 수 있으며
       함수가 대표적인 경우입니다.
*/


[인스턴스 프로퍼티]

-인스턴스 프로퍼티
생성한 인스턴스에 프로퍼티가 연결된 형태
prototype의 프로퍼티 보다 먼저 사용
인스턴스마다 값을 다르게 가질 수 있음



var sport = new function(){};
sports.prototype.member = 123;
var sportsObj = new sports();
debugger;

sportsObj.member = 456;

js.log(sportsObj.member);
js.log(sportsObj.prototype.member);

sportsObj : {
	member : 456,
	__proto__: {
	construnctor : function(){}.
	member : 123
	}
}



----this----

[개요]

-this
키워드
실행 콘텍스트의 this 바인딩 컴포넌트 참조

[실행 콘텐스트 형태]

1.함수를 호출하면 
-실행 콘텍스트를 생성하고
-함수의 코드 실행 환경을 설정합니다.

2.호출한 함수 앞에 작성한 오브젝트를
-this 바인딩 컴포넌트에 설정합니다.

[this와 글러벌 오브젝트]

-this 참조
글로벌 오브젝트에서 this는 글로벌 오브젝트를 참조
this 바인딩 컴포넌트에 글로벌 오브젝트가 설정되기 떄문

-this와 windown
windown는 자바스크립트가 제어할 수 있는 영역이 아니며
글로벌 오브젝트의 스코프도 아님
하지만 windown와 글러벌 오브젝트와 같은 선상에서 참조 가능

-strict 모드
함수 앞에 오브젝트를 작성해야 함
그런데 글로벌 오브젝트는 이름이 없으므로
window.get()과 같이 window를 글로벌 오브젝트로 사용

이때 this 바인딩 컴포넌트에 undefined가 설정되므로
this로 window를 참조할 수 없음


[this 참조 범위]

[1번 예제]


var sports = {
		value : 123,
		get :function (){
			js.log(this === window); //true
			js.log(this.value); // undefined;
		}
};

var Comp = sports.get();
Comp(); //호출시 앞에 참조하는 오브젝트가 없으니 global 오브젝트를 this 바인딩에 됨

[2번 예제]

function get(){
	js.log("사과");	
}

var sports =function () {
		function get(){
			js.log("애플");	
		};
		this.get(); //사과
		get(); // 애플
};
sports();


[오브젝트 반환]

-new 연산자로 인스턴스를 생성할때 
생성자 함수에 return 문을 작성하지 않으면 인스턴스 반환
생성자 함수에 return 문을 작성하면:
--표현식 평가 경과에 따라 인스턴스가 반환되지 않을 수 있음

-return 문에서 숫자 , 문자열을 반환하면
생성한 인스턴스를 반환


[return 오브젝트]

//인스턴스가 아닌 오브젝트 반환
return {value:123}


[call()과 this]

-개요
getTotal.call(this,10,20)
getTotal() 함수를 호출하면서 10과 20을 파라미터로 넘겨줌
첫 번째 파라미터에 호출된 함수에서 this로 참조할 오브젝트 지정
--일반적으로 this를 사용하지만 다른 오브젝트를 지정할 수 있음
--호출된 함수의 파라미터로 넘어가지 않고 두 번째로  넘어 감


[this 지정]

var value = 100;
var get = function(one){
	var value = 456;
	return one+ this.value
}
js.log(get.call(this,50)); //150;


[오브젝트 지정]

var get = function(value){
	return this.base * this.rate + value;
}
var result = get.call({base:20,rate :30},50);
js.log(result);

설명
var result = get.call({base:20,rate :30},50);
1.call() 함수의 첫 번째 파라미터를 this가 참조하므로
- {base:20,rate :30}를 this로 참조할 수 있습니다.


[숫자 값 지정]

var get = function(){
	debugger;
	return this.valueOf();
}

var result = get.call(123);
js.log(result);

[this 참조 변경]

var sports = {
	value : 123,
	soccr : {
	value : 456,
	get : function(){
		return this.value;
	}
    }
};
js.log(sports.soccer.get.call(sports));
js.log(sports.soccer.get.call(sports.soccer));


[apply()와 this]

-개요
getTotal.apply(this,[10,20])
getTotal() 함수를 호출하면서 10과 20을 배열로 파라미터로 넘겨줌
call()과 함수를 호출하는 방법은 같지만
파라미터를 배열로 넘겨주어야 하는 것과
arguments를 넘겨줄 수 있는 점이 다름

[bind()와 this]

-개요
bind 메소드는 한 번에 처리하지 않고 나누어 처리
1)Function 오브젝트를 생성하여 반환
2)생성한 Function 오브젝트를 함수로 호출

-작성 방법
첫 번째 파라미터에 생성한 Function 오브젝트를 호출할 때
--this로 참조할 오브젝트 지정
두 번째에 bind 메소드에 넘겨 줄 파라미터 지정

생성한 Function 오브젝트를 호출할 때에도 파라미터 지정 가능
두 개의 파라미터를 병합하여 사용


[Function 오브젝트 생성 , 호출]

var bonus = {
		value : 123,
		get : function(){
			return this.value;
		}
};
js.log(bonus.get()); //123

var fnObj = bonus.get.bind();
js.log(typeof fnObj); // function
js.log(fnObj());  //undefuned

fnObj = bonus.get.bind(bonus); 
js.log(fnObj); //123


[파라미터 병합]


var bonus = {
		get : function(){
			return Array.prototype.slice.call(arguments);
		}
};

var fnObj = bonus.get.bind(this,20,30);
js.log(fnObj(40,50));  //[20,30,40,50]

[bind() 활용]


window.onload = function(){
	var el = document.getElementById('clickID');
	el.onclick = show.bind(sports,el);
};

var sports = {
		value : 123
};
function show(element , event){
	js.log(element.textContent);
	js.log(event.target.id);
	js.log(this.value);
}

/*
	var el = document.getElementById('clickID');
	el.onclick = show.bind(sports,el);
	1.buttib#clickID로 엘리먼트 오브젝트를 생성합니다.
	2.버튼을 클릭하면 onclick 이벤트가 발생하며
	-show.bind()가 실행되면 Function 오브젝트를 생성하여
	-onclick에 핸들러 함수로 설정합니다.
	4.sports는 show 함수에서 this로 참조하게 되며
	5. el은 파라미터 값으로 넘겨줍니다.
*/



------ 객체 지향 프로그래밍 ------ 

[객체]

-객체의 기본 요소
행위(behavior) : 메소드로 표현
속성(attribute)
==자바스크립트는 속성보다 프로퍼티가 더 적절

-객체
독립적으로 존재하며
객체 자체에서 목적 달성

-객체 지향 프로그래밍
OOP : Object Oriented Programming
객체 중심으로 프로그래밍하는 방법 , 형태
개념은 비슷하지만 언어마다 구현 방법, 형태에 차이 있음


[클래스]

-클래스(Class)
객체의 행위와 속성을 선언하는 영역
텍스트 형태이므로
이를 사용하여 오브젝트로 생성해야 함

-자바스크립의 클래스

ES5까지 클래스가 없엇으나 ES6부터 사용
--개념은 비슷하지만 기본적으로 차이 있음

자바스크립트는 function 키워드를 만나면
--자동으로 Function 오브젝트 생성

new 연산자로 클래스를 오브젝트로 생성하는 것과는 차이 있음\

--자바스크립트 Class는 C++등의 클래스와 다르다.


[OOP 주요 개념]

-주요 개념
추상화(Abstracion)
캡슐화(Encapsulation)
다형성(Polymorphism)
상속(Inheritance)

-추상화
추상화의 목적은 최적화
공통 개념을 하나로 정의하는 것부터 시작
정의하는 것에 중심을 두므로
추상화 class는 독립적으로 수형할 수도 있음

--공통분모가 있다면 상위로 빼서 사용한다!!
예 : 객체 발,다리에 같이 피다라는 메소드가 있다면 추상화 해서 올린다.



-자바사크립트에서 추상화
일반적으로 사용하지 않음
이유는 상속을 크게 사용하지 않기 때문

[캡슐화]

-캡슐화
객체의 메소드와 프로퍼티를 외부에 숨긴
처리 방법은 숨기고
--사용할 수 있는 메소드와 파라미터를 외부에 공개
관련 OOP 용어 : 정보 은닉(Information Hidding)

-자바스크립트의 캡슐화
함수 안의 함수를 직접 호출 불가
지역 변수 값은 외부에서 직접 접근 불가
sourcr가 오픈되는 것과 exe 파일과의 차이 있음


[다형성]

-다형성
파라미터 수, 파라미터 데이터 타입에 따라 메소드 존재
--메소드를 호출하면 파라미터에 맞는 메소드 호출
-OOP 용어 : 오버로딩(Overloading)

-자바스크립트의 다형성
파라미터 수와 데이터 타입에 영향을 받지 않음
메소드 이름이 같으면 나중에 작성한 것으로 대체 됨
!! 다형성 없음!!



[상속]

-상속
상속의 목적은 객체의 재사용
목적에 맞는 객체를 내 객체에 포함시키는 것
다중 상속
--java : 다중 상속 불가 , C# : 가능
-- 다중 상속은 논란의 여지가 있음

-자바스크립트의 상속
오브젝트{}와 오브젝트를 병합
함수의 prototype에 인스턴스 연결
다중 상속 불가
다수의 인스턴스가 연결된 형태 : Prototype Chain


[오브젝트 연결]
-연결 방법
오브젝트의 프로퍼티에 오브젝트 연결
완전한 형태의 상속은 아니지만
--오브젝트를 연결할 수는 있음

-연결한 오브젝트에 접근
오브젝트와 프로퍼티를 지정하여 접근


[오브젝트 병합]

-병합 방법
오브젝트와 오브젝트를 하나의 오브젝트로 병합
for~in 문으로 오브젝트를 읽어 병합할 오브젝트에 설정
이름이 같은 프로퍼티가 있으면 값이 대체

[상속 메커니즘]

-자바스크립트 상속 메커니즘
프로퍼티 값에 인스턴스를 연결
상속받은 것을 구분하기 위해
인스턴스에 __proto__를 연결하고
여기에 상속받은 인스턴스를 연결


[Object.create()]

-오브젝트 상속 구현
첫 번째 파라미터에 상속받을 오브젝트를 지정
두 번째 파라미터로 인스턴스를 생성하고
--첫 번째 파라미터의 오브젝트를 상속받음
두 번째 파라미터의 프로퍼티는 오브젝트 프로퍼티로 설정


-Function에 prototpye까지 작성하면  인스턴스로 상속가능

var baseball = {
		member : 123,
		setValue : function(param){
			this.member = param;
		}
};

var sports = Object.create(baseball,{
	member : {value : 456, writable : true},
	getValue : {
		value : function(){
			return this.member;
		}
	}
});

js.log(sports.getValue());
sports.setValue(789);
js.log(sports.getValue());


[프로토타입 체인]


-프로토타입 체인(prototype chain)?
Function 오브젝트의 prototype에
--new 연산자로 생성한 인스턴스를 연결할 형태
연속해서 prototype에 인스턴스를 연결할 수 있으므로
계층 구조로 형태로 만들수 있음


[검색 우선순위]

-this.property_name 형태로 검색하면
우선 서브 오브젝트에서 검색
--프로퍼티가 검색되면 종료
검색되지 않으면 슈퍼 오브젝트(__proto__)에서 검색
--그래도 검색되지 않으면 계속 올라가면서 검색
이 개념(형태)을 검색 우선순위라고 함

-prototype 형태
슈퍼와 서브 오브젝트 각각에 프로퍼티 존재
슈퍼 오브젝트의 프로퍼티가 서브 오브젝트를 대체하지 않음
인스턴스로 연결하고 검색 우선순위로 각각의 프로퍼티를 검색

-변수와 prototype의 차이
변수 : 함수 밖으로 나가 글로벌 오브젝트로 올라가면서 검색
prototype : this.prototype_name 형태로 검색
--상속받은 인스턴스로 올라가면서 검색하지만
--글로벌 오브젝트까지 올라가지 않고 상속받은 범위에서 검색


[슈퍼 오브젝트 접근]
-call()로 슈퍼 오브젝트 메소드 호출
슈퍼 오브젝트의 prototype에 연결된 메소드를 호출


[웹 환경과 상속]

-웹 환경
웹 페이지가 바뀔 때 마다 자바스크립트 랜더링

-상속 구조
사용 여부와 관계없이 랜더링할 때 마다 인스턴스 생성

-랜더링 시간 단축
함수를 호출했을 때 인스턴스 생성

-웹 프로그램 특성
UI/UX 개선을 위해 자주 자바스크립트 프로그램 변경
이때 마다 상속 구조를 체크하고 변경하는 것은 비효율적
필요에 따라 코드를 만들어 쓰는 유연성 떨어짐

-컴포넌트 지향
객체들을 텍스트 상태로 평명 위에 펄쳐 놓고
필요한 것을 필요한 때에 결합하여 사용

[프로퍼티 연동 방지]

-오브젝트에 오브젝트를 할당하면
프로퍼티 값이 연동 됨
배열도 마찬가지로 연동 됨
이를 방지하려면 프로퍼티 단위로 할당

var list = [1,2,3,];
var allocate = list;  같은 주소값을 가지고 있다!!
allocate[1] = 123; 하면 list도 바뀐다!!


[재귀 함수]

-Recursive Function
함수 안에서 자신 함수를 호출하는 형태
{key:{key:{key:value}}} 형태에 사용
[[1,2],[3,4,[5,6]]] 형태에 사용


var sports = {
		soccer : {member : 11, time : 90}
		,basketball : {member : 5,time :48}
};

function showValuse(sports){
	var type , obj;
	for(type in sports){
		obj = sports[type];
		typeof obj === 'object' ? 
				showValuse(obj) : js.log(type,":",obj);
	}
}
showValuse(sports);

[함수 즉시 실행]
-함수 즉시 실행이란?
엔진이 함수 코드를 만나면 자동으로 함수를 실행하는 형태

-먼저 예제를 싱핼하여 코드 형태 이해

-무명 함수, 익명 함수
function(){}; 형태로 이름이 없음

-function(){} 형태 문법
함수 이름이 없으므로 함수 선언문 , 함수 표현식도 아님
따라서 문법 에러가 발생해야 하지만 발생하지 않음


[자동 실행 메커니즘]
-표현식 평가

-function(){}뒤에 ()는 자동 실행이다.
--그룹핑을 해야함!!
(function(파라미터){})(파라미터); 맞는 문법!

1.표현식과 표현식의 결과는 메모리에 저장되지 않습니다.
2.(1+2)의 결과가 메모르에 저장된다면 매무 큰 메모리가 필요할 것입니다.
3.마찬가지로 function(){}(); 코드도 메모리에 저장되지 않으며
  실행 결과도 메모리에 저장되지 않습니다.
4. 따라서 저장해야 할 것이 있다면 function 블록 안에서
   저장해야 합니다.

5.이를 반대로 생각하면 저장할 필요가 없는 일회성 코드이면서
  엔진이 function 키워드를 만나는 시점에 즉시 실행해야 한다면
  그룹핑 연산자 안에 표현식으로 코드를 작성하는 것이 좋습니다.


var total = (1+2);
var value  = function(){
	return 123;
};
js.log("함수 호출 : ", value());
var value  = function(){
	return 465;
}();

js.log("자동실행 : ", value);
value = (function(){
	return 798;
})();

js.log(value);
(function(){
	js.log("ABC");
})();


[클로저]

-Closure 개요
자바스크립트의 특정 기능을 지칭
Function 오브젝트를 생성할 때 [[Scope]]에 렉시컬 환경을 설정하고
함수가 호출되었을때 [[Scope]]의 프로퍼티를 사용하는 메카니즘

[클로저 논리]

-클로저 논리 근거
실행증인 함수의 [[Scope]]에 설정된 프로퍼티는
--1단계 밖의 함수와 변수로 구성
외부 렉시컬 환경 참조에 들어간다.


[클로저와 무명 함수]

함께 사용 가능

[클로저 정리]

-자바스크립에서 클로저
함수에서 1단계 밖의 변수 사용은
--자바스크립트의 기본 메커니즘
논리적 근거는 외부 렉시컬 환경 참조
외부 렉시컬 환경 참조에 1단계 밖의 변수가 설정되며
--함수에서 함수 안의 변수처럼 접근할 수 있음

-클로저로 구분할 명분, 이유 없음
이런 모습을 나타내는 용어























http://warmz.tistory.com/986


[Ionic Framework에 대해서]


- Native App -

전통적인 개발 방식. 네이티브니 당연히 해당 플랫폼에서 제공하는 모든 기능을 사용할 수 있다.

장점

- 성능은 확실하게 보장
- 개발 경험이 있기 때문에 러닝 커브가 낮음

단점 

- 크로스 플랫폼을 지원하기 위해서, 플랫폼 별 개발자가 각각 필요
- 작은 부분에 있어 변경이 발생하면 앱 업데이트가 불가피
- 지속적인 유지보수가 어려움
- OS 및 기기 별 파편화



- Hybrid App -

HTML/JS/CSS로 웹 페이지를 만들고, 이를 웹뷰로 감싼 형태


장점 

- 하나의 코드로 크로스 플래폼 지원
- 개발 프레임워크에 따라서 네이티브 앱처럼 카메라, GPS 등의 플랫폼 기능을 사용할
  수도 있다.

- 기존의 Front End 개발자라면 쉽게 접근 가능
- 게임을 제외한 일반 네이티브 앱에 준하는 성능
- 어느 정도 수준의 파편화 현상을 방지

단점 

- 장점애서 얘기한 네이티브 앱에 준하는 성능을 지원한다고 했지만,
  절대적으로 동급은 아님

- 일반적인 플랫폼 기능 외에 특수한 기능들은(예를 들면 지문 인식 등) 사용하기 어려움

- Native App 개발자 입장에서의 새로운 러닝 커브가 필요
- 플랫폼 별 파편화는 어느정도 방지 할 수 있으나, 웹뷰 버전이 다른 경우 새로운 
  파편화에 직면 할 수 있음



[Ionic]

역사로 따지면 이제 2살 밖에 되지 않은 갓 신생 프레임워크다. 정식 버전은 현재 1.3이고 
,2.0 베타 버전을 상태이다. UI는 AngularJS 및 Ionic Directive로 이루어져 있고 
Native Access API는 Cordova를 베이스로 하고 있어서 추가적으로 필요한 네이티브 기능은
개발자가 직접 플러그인 형태로 개발 가능하다.

- AngularJS(HTML/JS/CSS)
- Cordova(JS - Java/Objectvice-C)


Ionic의 특징을 정리하자면 다음과 같다
- Cordova 플러그인은 Ionic에서 모두 사용 가능하다.
  (떄문에 카메라, GPS, 파일 입출력 기능들은 네이티비 앱과 동일하게 쓸 수 있다.)

- UI 관련해서 많은 코딩을 하지 않더라도 네이티브 앱과 유사하게 디자인 할 수 있다.
  (헤더 , 탭, 사이드 메뉴, 페이지 전환 애니메이션 등등)

- 프레임워크의 개발 방향이 퍼포먼스 향상에 맞춰져 있다.
 (실제로 Ionic 앱을 설치해보면 네이티비 앱이 부럽진 않을 정도로 뛰어나다.)

- CLI (Command Line-Interface)가 잘 지원되므로 개발하기 편하다.

- Like native app을 위한 여러 가지 라이브러리를 지원한다.
  (Pull to refresh, infinite Scroll등등)

- 개발 환경은 node.js를 기반으로 하게 때문에 gulp 등 여러 node module 들을 사용 할 수 있다.

- 기본 빌드 시스템은 gulp를 사용한다.

- Front End 라이브러리 관리는 bower를 사용한다. (사용하지 않다도 상관없다.)

- 래퍼런스가 풍부라고 포럼이 활성화되어 있다.

Ionic은 Android의 경우 자체 웹뷰(Cross Walk)를 사용 할 수도 있지만, 기본적으론 OS의 기본
웹뷰를 사용하되, 플랫폼 별로 상이한 여러가지 이벤트들(키보드 Show/hide 등)을 ionic Framework에서
핸들링해준다. 덕분에 개발자는 각 플랫폼을 위한 하드 코딩(?)을 덜 할 수 있게 되고, 비즈니스 로직 개발에만
집중 할 수 있게 된다.



[Ionic 프로젝트 구조]  

프로젝트의 구조는 Cordova & Phongap과 유사하다.

개발 환경은 node.js 기반으로 하기 때문에 package.json 파일이 있으며, Frnot End 라이브러리
관리를 위한 bower.json, 빌드를 위한 gulpfile.js , 각 플랫폼 설정을 위한 config.xml , 그리고
프로젝트 설정을 위한 iobic.project 파일 등이 있다. 배포를 하기 위해 publish 빌드를 하게 되면,
각 플랫폼은 config.xml을 기반으로 메타 데이터를 설정하게 되고, iOS는 Xcode 프로젝트 파일을,
Android는 서명이 안 된 APK 파일을 생성해준다.


[개발 환경 구성]

Ionic의 개발 환경은 node.js를 기반으로 한다. 앱 자체가 node.js 위에 실행 되는 건 아니고,
소스 파일들이 프론트 엔드 개발과 동일한 HTML/CSS/JS로 이루어져 있기 때문에 PC에선 이를 실행하기 
위한 (경량) 웹서버가 필요하기 된다. 때문에 Ionic은 이런 추가적 요구 사항들은 해결하기 위해
제공되는 여러 CLI들이 있고, 해당 CLI들은 node.js 기반에서 돌아가는 구조로 되어 있다.


Ionic 개발 환경을 구성하기 전, 개발하려는 모바일 OS 플랫폼의 개발 환경을 미리 세팅해야한다.

[Android 개발 환경 구성하기]
http://warmz.tistory.com/989


[Aoache Cordove 설치]

Apach Cordvova는 HTML/CSS/JS를 여러 모바일 플랫폼으로 빌드 할 수 있게끔 도와주는 CLI이다.
(앱 빌드/서치, 플랫폼 별 설정, Native API 사용을 위한 플러그인 등 여러가지 기술을 제공한다.)
사실 Cordova 만으로도 모바일 앱을 만들 순 있으나, Cordova 에는 앱 UI 구현을 위한 라이브러리는
거의 배제되어 있기 댸문에 Ionic이 필요하다.

$ npm install codova -g


[Ionic Framework 설치]

Cordova가 크로스 플랫폼에 대한 기술적인 부분을 지원한다면 Ionic은 좀 더 편리한 앱 개발 환경 및 
UI 구현에 대한 부분을 책임진다고 볼 수 있다.
(여러 Provider/Service/Directive 및 CSS 등을 제공한다.)

$ npm install ionic -g

[gulp 설치]

ionic 은 기본적으로 빌드 시스템을 gulp.js를 사용한다. 떄문에 기본 빌드 task 이외에 개발자가
직접 커스텀 task를 작성 할 수 있다.


$ npm install gulp -g


[ios 개발을 위한 추가 패키지 설치]

- ios-deploy 설치
https://github.com/phonegap/ios-deploy/blob/master/README.md

ios-deploy는 Xcode 실행 없이 앱을 빌드하여 시뮬레이터 또는 디바이스에 설치 할 수 있게끔 도와주는
패키지이다.
(그렇다고 해서 Xcode가 필요 없는 것은 아니고, CLI로 프로젝트를 빌드하기 때문에 기본적으로
Xcode 설치를 요구한다)


[샘플 프로젝트]

개발 환경이 구성되었으니 이제 샘플 프로젝트를 받아보자. ionic start CLI는 샘플 프로젝트를 
받을 수 있는 명령어이다. 아래 명령어를 실행하면 sidemenu 샘플 프로젝트를 다운로드 받게 된다.


$ ionic start myApp sidemenu

다른 샘플 프로젝트는 링크에서 볼 수 있다
http://ionicframework.com/getting-started/



































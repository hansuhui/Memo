===========================[HTTP 통신]===========================

- HTTP
 Hypertext Transfer Protocol
 클라이언트와 서버 간의 통신 프로토콜
 요청(Request), 응답(response) 통신 규약(프로코콜)
 TCP/IP를 기반으로 한 프로토콜

- TCP
 Tranmission Control Protocol
 전송 제어 프로토콜
 오류 없는 데이터 전송
 순서로 전달

- IP
 Internet Protocol
 IP 주소와 포트 번호로 TCP/IP 커넥션 연결


[URL]

-URL
Uniform Resource Locator
URI : Uniform Resource Identifer
URL . URI 같은용도

- 스킴(sceme)
리소스에 접근하기 위해 사용
http,https,mailto, ftp, rtsp , rtusu


[Transaction]

- 트랜젝션 
 요청(Request)  과 응답 (response) 의 상호작용

- HTTP 메소드(method)

GET : 서버에서 클라이언트로 리소스 전송
POST : 클라이언트 데이터를 서버로 전송


- TCP 커넥션 연결
클라이언트에서 서버로 요청 Request


[Node.js의 HTTP 처리 방법]

- Request , Response 인식 방법
이벤트 설정, 이벤트 발생으로 인식

- HTTP 모듈에서 이벤트 제공
HTTP 모듈 생성 , 이벤트 제공 메소드 포함
var http = require("http");

- 이벤트 설정
http.on("request",fucntion(){});
on : 이벤트 설정
requset: 이벤트 타입
function(){} : 이벤트 핸들러


- 이벤트 발생 시킴

이벤트를 발생시켜 핸들러가 실행되게 함
emit(type, 파라미터) 형태


[클라이언트 접속]

-접속 인식 이벤트
커넥션 이벤트 : 접속할 때 발생
-- 크롬 : 2번 발생 , 파이어 폭스 :1 번 발생
requset 이벤트 : 요청할 때 발생

- 이벤트 인식 준비
HTTP 모듈 생성
var http = require("http");
웹서버 생성
var server = http.createServer()

- 이벤트 발생 대기
생성한 서버 실행
server.listen(3000)
3000번 포트에서 접속 대기



[HTTP 통싱 실행]

- Raspberry Pi 준비
/home/pi/IoT 에 http.js 작성
cd iot 
sudo node http.js
클라이언트 접속대기

- 클라이언트 접속
브라우저 주소 창에 (localhost:3000) 입력

-접속 이벤트 발생


[Radio on/off]

-Raspberry Pi 준비

1.HTML 페이지 작성
on/off  라디오 버튼 , 전송 버튼

2. HTTP 서버 생성 , connection / request 이벤트 설정

- 웹 페이지 표시
1. 브라우저 주소 창에  로컬:포트 입력
2. connection/Request 이벤트 핸들러 실행
3. Raspberry Pi에 있는 HTML 페이지를 표시

- 웹 페이지에서 On/Off 라디오 버튼 선택
sumbit 버튼을 클리하면 Raspbeery Pi form 전송

- Raspberry Pi
 전송된 Form을 받아 on/off 라디오 버튼 값에 따라 출력


[웹 페이지 표시]

- 자바스크립트 코드 작성

fs 시스템을 이용해서 요청에 html 값을 던져준다


[express.js 설치]
 
- 개요
Node.js의 http 모듈에 기능을 추가한 프레임워크
Node.js 환경의 프로그램을 쉽게 개발
파일 전송 , 데이터 포맷 등의 유틸리티 제공
가장 많이 알려진 프레임 워크

- 설치
 sudo npm intsall express --save


[express.js Method]

- 서버 생성
var app = require("express")();

- 클라이언트 request 인식
app.get("/",function(req,res){
   //클라이언트로 html 파일 전송
   //__dirname : 글로벌 변수 , 현재 폴더 경로
  res.sendile("파일경로",(root:__dirname));
});

app.post("/",function(req,res){

})



[HTTP 통신 특징]

- 요청과 응답
 클라이언트가 요청하면 서버가 응답
--서버가 주체가 된 통신 불가
단위 처리가 완료되면 통신이 끊어짐
다시 통신하려면 클라이언트에서 요청하여 연결

- 전송데이터
 통신할때마다 Header 와 body통신

- XMLHttpRequest 비동기 통신
비동기(Asynchronous) 통신도 하나의 HTTP 통신 방법
단위 처리가 완료되면 통신이 끊어짐


[Socket 통신 형태]

- Socket 통신 형태
 처음 연결할 때만 통신 Header 와 Body 전송
 연결된 후에는 Header는 전송하지 않고 Body 만 전송

 처음 연결할 때는 HTTP로 연결
 연결이 되면 Socker 프로토콜로 변환


[Socket 통신 시나리오]

- 통신 준비
1.웹페이지를 표시할 html 파일 작성
radio on/off 선택 버튼 포함, 전송 버튼 없음

2.클라이언트 사이드용 Socket 프로그램 작성
3. 서버 사이드용 Socket 프로그램 작성
4. Raspberry Pi에 LED 조립

- 통신 시작

1.브라우저 주소창에서 라즈베리 연결 
2.클라이언트와 서버 간의 Socket 통신 연결
3.Radio 버튼을 클릭할 때마다 선택한 값을 서버로 전송
4. 서버는 전송된 값으로 LED on/off
5.서버는 클라이언트에서 받은 값을 다시 클라이언트로 존성
6.클라이언트는 서버에서 받은 값을 출력

[클라이언트 Socket]

- 클라이언트용 Socket 코드 작성

window.onload = function(){
   //WebSocket 프로토콜로 서버와 연결
    var socket = new WebSocket("192.168.43.195:3000");
    //진행 결과를 출력하는 패어런트 엘리먼트
    var resultNode = document.getElementById("result");
    
    //버튼을 클릭했을 때 on/off 값을 서버로 전송
    document.getElementById("group").addEventListener("click",sendServer,false);
   
    //연결이 완료되었을 때 발생할 이벤트 설정
    socket.onopen = function(){
     socket.send("클라이언트에서 연결");
     var node = document.createElement("li");
     node.textContnet = "클라이언트에서 연결";
     resultNode.appendChild(node);
   }


  //서버에서 보낸 메시지 인식을 위한 이벤트 설정
  socket.onmessage = function(event){
    var node = document.createElement("li");
    node.textContent = "서버에서 받은 값 :" + event.data;
    resultNode.appendChild(node);
  }

  //버튼 했을때 on/off 값을 서버로 전송
  function sendServer(event){
   //label을 클래하면 이벤트가 두번 발생하므로 재외
   if(event.target.nodeName =="LABEL"){retrun;}

   socket.send(event.target.value);
    var node = document.createElement("li");
    node.textContent = "내가 보낸 값: :" + event.target.value;
    resultNode.appendChild(node); 
  }


}



[서버 Socket]

- 서버용 Socket 코드 작성
 


[Socket 통신 실행]

- ws 설치
Node.js 환경의 Server 용 WebSocket 프레임 워크
sudo npm install ws --save
































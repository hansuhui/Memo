[Webpack 작업]

- 간단한 구성 -

webpack 설정을 조정하는 가장 쉬운 방법은 다음 configreWebpack 옵션의 개체를 제공하는 것입니다.
vue.config.js

// vue.config.js
module.exports = {
  configueWebpack: {
    plugins: [
      new MyAwesomeWebpackPlugin()
    ]
  }
}


객체는 webpack-merge를 사용하여 최종 webpack 구성으로 병합됩니다.

경고
  일부 webpack 옵션은 값을 기반으로 설정 vue.config.js 되므로 직접 변경해서는 안됩니다.
  예를 드어 수정하는 대신에 in 옵션을 output.path 사용해야합니다. 수정하는 대신에 에서 옵션을
  사용해야합니다. 모든 값이 함께 제대로 작동하는지 확인하기 위해 값 이 config 내의 여러 위치에
  사용되기 때문입니다. outpurDir vue.config.js output.publicPath baseUrl vue.config.js vue.config.js


환경을 기반으로 조건부 동작이 필요하거나 환경 변수를 직접 변경하려는 경우, 함수를 사용하십시오.
(env 변수가 설정된 후 지연 평가됩니다.) 이 함수는 분석 된 구성을 인수로 받습니다. 
함수 내에서 직접 구성을 변경하거나 병할 할 객체를 반환할 수 있습니다.

// vue.config.js
module.exports = {
  configureWebpack: config => {
    if (process.env.NODE_ENV === 'production') {
      // mutate config for productions...
    } else {
      // mutate for development...  
    }
  }
}




- 연결 (고급) -

내부 webpack 구성은 webpack-chain을 사용하여 유지 관리됩니다. 라이브러리는 명명된 로더 규칙과 
명명된 플러그인을 정의하고 나중에 해당 규칙을 "탭"하여 옵션을 수정할 수 있는 원수 webpack 구성에
대한 추상화를 제공합니다.

이렇게하면 내부 설정을 보다 세밀하게 제어할 수 있습니다. 아래에서 chainWebpack 옵션을 통해
수행 된 일반적인 수정의 몇 가지 예를 볼 수 있습니다. vue.config.js

팁
  vue inspect는 페인을 통해 특정 로더에 액세스하려고 할 때 매우 유용합니다.


- 로더의 옵션 수정하기 -

// vue.config.js
module.exports = {
  chainWebpack: config => {
    config.module
     .rule('vue')
     .use('vue-loader')
       .loader('vue-loader')
       .tap(options => {
         // modify the options...
         return options
       })
  }
}



팁
  CSS 관련 로더의 경우 체이늘 통해 로더를 직접 대상 지정하는 대신 css.loaderOptions를 사용하는
  것이 좋습니다. 이는 각 CSS 파일 유형에 대해 여러 규칙이 있으며 css.loaderOptions 한 곳에서
  모든 규칙에 영향을 줄 수 있기 떄문입니다.


- 새로운 로더 추가하기 -

// vue.config.js 
module.exports = {
  chainWebpack: config => {
    // GraphQL Loader
    config.module
      .rule('graphql')
      .test(/\.graphql$/)
      .use('graphpq-tag/loader')
        .loader('graphpq-tag/loader')
        .end()
  }
}



- 규칙의 로더 바꾸기 -

예를 들어 파일을 로드하는 대신 SVG 파일을 인라인 하는 경우와 같이 기존 기본 로더를 대체하려면
vue-svg-loader 다음을 수행하십시오.

// vue.config.js
module.exports = {
  chainWebpack: config => {
    const svgRule = config.module.rule('svg')

    // clear all existing loaders.
    // if you don't do this. the loader below will be appended to
    // existing loaders of the rule.
    svgRule.uses.clear()

    // add replacement loader(s)
    svgRule
      .use('vue-svg-loader')
        .loader('vue-svg-loader')
  }
}



- 플러그인 옵션 수정하기 -


// vue.config.js
module.exports = {
  chainWebpack: config => {
    config
      .plugin('html')
      .tap(args => {
        return [/* new args to pass to html-webpack-plugin's constructor */]
      })
  }
}

당신은 숙지해야합니다. 웹팩 체인으 API 및 일부 소스코드를 읽을 이 옵션의 모든 기능을 활용하는
방법을 이해하기 위해, 하지만 당신에게 직접의 mutate 값보다 웹팩 설정을 수정하는 더 표현하고 안전한
방법을 제공합니다.

예를 들어 기본 위치 index.html를 /Users/username/proj/public/index.html to 에서 to로 변경하려고
한다면 가정 해보십시오 /User/username/proj/app/templates/index.hml 참조하여 HTML-웹팩 플러그인을
당신은 당신이 전달할 수 있는 옵션의 목록을 볼 수 있습니다. 우리는 다음과 같은 설정으로 새 템플릿 경로에 
전달할 수 있습니다. 우리의 템플릿 경로를 변경합니다.

// vue.config.js
module.exports = {
  chainWebpack: config => {
    config
      .plugin('html')
      .tap(args => {
        args[0].template = '/User/username/proj/app/templates/index.hml'
        return args
      })
  }
}

vue inspace 유틸리티를 사용하여  vue webpack config를 검사하여 이 변경 사항이 적용되었는지
확인할 수 있습니다.


- 프로젝트의 Webpack 구성 검사 -

이후 @vue/cli-service 초록 멀리 웹팩 설정, 당신이 바뀌는 직접 만들려고 노력 특히 때 설정에 
포함되어 이해하는 것이 더 어려울 수 있습니다.

vue-cli-service 노출 inspect 해결 된 웹팩 설정을 검사하는 명령을 전역 vue 바이너리도 inspect 명령을
제공하여 vue-cli-service inspect 프로젝트에서 단순히 프록시로 지정됩니다.

이 명령은 해석 된 webpack 구성을 stdout에 인쇄하며 체인을 통해 규칙 및 플러그인에 액세스하는
방법에 대한 힌트도 포함합니다.

더 쉽게 검사 할 수 있도록 출력을 파일로 리디렉션 할 수 있습니다.

vue inspect > output.js

출력은 유효한 webpack 구성 파일이 아니며 검사 전용으로 직렬화 된 형식입니다.
경로를 지정하여 config 의 하휘 집합을 검사 할 수도 있습니다.

# only inspact the forst rule
vue inspect module.rules.0

또는 명명 된 규칙 또는 플러그인을 타겟팅하십시오.

vue inspect --rule vue
vue inspect --plugin html

마지막으로 모든 명명된 규칙과 플러그인을 나열 할 수 있습니다.


vue inspect --rules
vue inspect --plugins


- 해결된 구성을 파일로 사용 -

일부 외부 도구는 해결된 webpack 구성을 파일로 액세스해야 할 수 있습니다. 
(예: Webpack 구성 경로가 필요한 IDE 또는 명령줄 도구).
이 경우 다음 경로를 사용할 수 있습니다.

<projectRoot>/node_modules/@vue/cli-service/webpack.config.js

이 파일 vue-cli-service은 플러그인 및 사용자 정의 구성을 포함하여 명령에서 사용 된 것과 동일한
웹팩 구성을 동적으로 확인하고 내보냅니다.

























[배포]

- 일반 지침 -

Vue CLI를 배치의 일부로 정적 자산을 처리하는 백엔드 프레임 워크와 함께 사용하는 경우 Vue CLI를
올바른 위치에 빌드 된 파일을 생성 한 다음 백엔드 프레임 워크를 배치 지시를 따르는 것 만큼 해야합니다.

프론트 엔드 앱을 백엔드와 별도로 개발하는 경우 - 백엔드가 프론트 엔드 API와 대화 할 수 있도록 공개한다면
프론트 엔드는 기본적으로 완전히 정적 인 앱입니다. dist 디렉토리의 내장 컨텐츠를 정적 파일 서버에
배치할 수 있지만 올바른 baseUrl을 설정해야 합니다.


- 로컬 미리보기 -

이 dist 디렉토리는 baseUrl 상대 값으로 구성되지 않은 한 HTTP 서버에서 서비스하기 위한 것으로,
프로토콜을 dist/index.html 통해 직접 열면 작동하지 않습니다. file:// 프로덕션 빌드를 로컬에서 미리
볼 수 있는 가장 쉬운 방법은 Node.js 정적 파일 서버를 사용하는 것입니다. (예:serve)

npm install -g serve
# -s flag means serve it in Single-Page Application mode
# which deals with the routing problem below

serve -s dist


- 함께 라우팅 history.pushState -

Vue Router를 history 모드로 사용하는 경우 단순한 정적 파일 서버가 실패합니다.
예를 들어 경로를 사용하여 Vue 라우터를 사용했다면 /todos/42 
dev 서버가 localhost:3000/todos/42 제대로 응답하도록 구성 되었지만 
프로덕션 빌드를 제공하는 단순한 정적 서버는 대신 404로 응답합니다.

이를 수정하려면 index.html 정적 파일과 일치하지 않는 요청에 대해 폴백하도록 프로덕션 서버를 구성해야
합니다. Vue 라우터 문서는 일반적인 서버 설정에 대한 구성 지침을 제공합니다.


- CORS -

정적 프론트 엔드가 백엔드 API와 다른 도메일에 배포 된 경우 CORS를 올바르게 구성해야합니다.


- PWA -

PWA 플러그인을 사용하는 경우 서비스 근로자가 제대로 등록 될 수 있도록 HTTPS를 통해 앱을 제공해야 합니다.



[플랫폼 가이드]

- GitHub 페이지 -

1. 올바른 설정 baseUrl 에서 vue.config.js 로 배포하는 경우 기본적으로
   https://<USERNAME>.github.io/ 생략 할 수 있습니다. 
   baseUrl "/" 로 배포하는 경우 https://<USERNAME>.github.io/<REPO>/ 경우
   (즉, 저장소가 있는 경우 https://github.com/<USERNAME>/<REPO>) 로 설정 baseUrl 하십시오.
   "/<REPO>/" 예를 들어, Repo 이름이 "my-project" 이면 vue.config.js 다음과 같이 표시 되어야 합니다.


module.exports = {
  baseUrl : process.env.NODE_ENV === 'production' ? '/my-project/' : '/'
}


2. 프로젝트 내 deploy.sh 에서 다음 내용 ( 강조 표시된 선을 적절하게 주석 처리하지 않음)을 사용하여
   만들고 실행하여 배포하십시오.


#!/usr/bin/env sh

# abort on errors

set -e

# build

npm run build

# navigate into the build output directory

cd dist

# if you are deploying to a custom domain
# echo 'www.example.com' > CNAME

git iit 
git add-A
git commit -m "deploy"

# if you are deploying to https://<USERNAME>.github.io
# git push -f git@github.com:<USERNAME>/<USERNAME>.guthub.io.git master

# if you are deploying to https://<USERNAME>.github.io/<REPO>
# git push -f git@github.com:<USERNAME>/<REPO>.git master:gh-pages

cd -


팁
  CI 설치에서 위의 스크립트를 실행하여 각 푸시마다 자동 배포를 활성화 할 수도 있습니다.


- GitLab 페이지 -

GitLab Pages 문서에 설명된 .gitlab-ci.yml 대로 저장소의 루트에 파일을 배치하면 모든 일이 발생합니다.
이 실습 예제는 당신을 시작할 것입니다:


# .github-ci.yml file to be placed in the root of your repository

pages : # the job mush be named pages
  image : node:latest
  state : deploy
  script :
    - npm ci
    - npm run budil
    - mv public public-vue # GitLab Pages hooks on the public folder
    - mv dist public # rename the dist folder (result of npm run build)
  artifacts:
    paths : 
      - public # artifact path must be /public for GitLab Pages to pick it up
  only : 
    -master


일반적으로 정적 웹 사이트는 https://yourUserNAme.gitlab.io/yourProjectName에서 호스팅되므로 초기 
vue.config.js 파일을 만들어 값이 일치하도록 업데이트 BASE_URL 할 수도 있습니다.

// vue.config.js file to be place in the root of your repository
// make sure you update 'yourProjectName' with the name of your GitLab proejct

module.exports = {
  baseUrl : process.env.NODE_ENV === 'production' ?  '/yourProjectName/' : '/'
}


프로젝트 웹 사이트를 호스팅 할 URL에 대한 자세한 정보는 GitLab Pages 도메인의 문서를 읽어보십시오.
맞춤 도메인을 사용할 수도 있습니다.

저장소로 푸시하기 전에 .gitlab-ci.yml 및 vue.config.js 파일을 모두 커밋 하십시오.
GitLab CI 파이프 라인이 트리거됩니다 : 성공하면 프로젝트의 Settings > Pages 웹 사이트 링크를 
보고 클릭하십시오.


- Netlify -

1. Netlify 에서 다음 설정으로 GitHub에서 새 프로젝트를 설정하십시오.
  - 빌드 명령 : npm run build 또는 yarn build
  - 게시 디렉토리 : dist

2. 배치 버튼을 누르십시오!

또한  vue-cli-plugin-netlify-lambda를 체크 아웃하십시오.


- 아마존 S3 -

vue-cli--plugin-s3-deploy를 참조하십시오.


- 파이어베이스 -

Firebase 콘솔에 새로운 Firebase 프로젝트를 생성하십시오. 프로젝트를 설정하는 방법에
대해서는 이 문서를 참조하십시오.

전역적으로 firebase-tools를 설치했는지 확인하십시오.

  npm install -g firebase-tools

프로젝트의 루트에서 다음 firebase 명령을 사용하여 초기화 하십시오.

  firebase init 

Firebase는 프로젝트를 설정하는 방법에 대해 몇 가지 질문을 할 것입니다

- 프로젝트를 설정하고자하는 Firebase CLI 기능을 선택하십시오. 반드시 선택하십시오. hosting.

- 프로젝트의 기본 Firebase 프로젝트를 선택하십시오.

- Firebase Hosting에 업로드 될 public 디렉토리 dist(또는 빌드의 출력이 있는 곳)를 설정하십시오.


// firebase.json
{
  "hosting": {
    "public" : "dist"
   }
}


- yes 프로젝트를 단일 페이지 응용 프로그램으로 구성하려면 선택하십시오. 이것은 만들 것이다.
  index.html 당신에 dist 폴더 및 구성 hosting 정보를 표시합니다.


// firebase 
{
  "hosting": {
    "rewrites" : [
      {
        "source": "**",
        "destination" : "/index.html"
      }
     ]
   }  
}

npm run build 프로젝트를 빌드하기 위해 실행하십시오.
Firebase Hosting에 프로젝트를 배포하려면 다음 명령을 실행하십시오.

firebase deploy --only hosting

프로젝트에서 사용하는 다른 Firebase CLI 기능을 배포 firebase deploy 하려면 --only 옵션 없이 
실행하십시오.

이제 프로젝트에 액세스 할 수 있습니다. https://<YOUR-PROJECT_ID>.firebaseapp.com

자세한 내용은 Firebase 문서를 참조하십시오.


- Now -

1. Now CLI를 전역으로 설치하십시오.

npm install -g now 

2. now.json 프로젝트 루트에 파일 추가:

{
  "name": "my-example-app",
  "type": "static",
  "static": {
    "public": "dist",
    "rewrites": [
      {
        "source": "**",
        "destination" : "/index.html"
      }
    ]
  },
 "alias": "vue-example",
 "files": [
    "dist"
  ]
}


Now의 설명서를 참조하여 정적 게재 동작을 맞춤 설정할 수 있습니다.

3. 배포 스크립트 추가 위치 package.json :

  "deploy" : "npm run build && now && now alias"

기본적으로 공개적으로 배포하려는 경우 배포 스크립트를 다음과 같이 변경할 수 있습니다.

  "deploy" : "npm run build && now --public && now alias"

이렇게하면 사이트 별칭이 자동으로 최신 배포로 연결됩니다. 이제 npm run deploy 앱을 실행 하십시오.


- Surge -

Surge와 함께 배포하려면 단계가 매우 간단합니다.

먼저 실행하여 프로젝트를 빌드해야 합니다. num run build . Surge의 명령 줄 도구를 설치하지 않았다면
다음 명령을 실행하면됩니다.

npm install --global surge

그런 다음 dist/ 프로젝트의 폴더로 이동 한 다음 실행 surge 하고 화면 프롬프트를 따릅니다.
서지를 처음 사용하는 경우 이메일 및 비밀번호를 설정하도록 요청합니다. 프로젝트 폴더를 확인하고
원하는 도메인을 입력하고 아래 에서처럼 배포중인 프로젝트를 시청하십시오.


project: /Users/user/Documents/myawesomeproject/dist/
domain: myawesomeproject.surge.sh
upload: [================] 100% eta: 0.0s (31 files, 494256 bytes)
CDN :   [================] 100%
IP : **.**.***.***

Sucess ! - Published to myawesomeproject.surge.sh

Surge가 프로젝트를 성공적으로 게시했는지 확인하십시오 myawesomeproject.surge.sh vola! 사용자
정의 도메인과 같은 자세한 설정 정보는 Surge 도움말 페이지를 참조하십시오.


- Bitbucket Cloud -

1. Butbucket 문서에 설명된 대로 정확하게 이름 지정된 리포지토를 만들어야 합니다.
   <USERNAME>.bitbucket.io

2. 예를 들어 여러 웹 사이트를 원할 경우 주 저장소의 하위 폴더에 게시 할 수 있습니다.
   이 경우 올바른 설정 baseUrl 에서 vue.config.js 로 배포하는 경우 기본적으로 
   https://<USERNAME>.bitbucket.io/ 생략 할 수 있습니다 . baseUrl "/"로 배포하는 
   https://<USERNAME>.bitbucket.io/<SUBFOLDER>/ 경우에 설정 baseUrl 하십시오.
   "/<SUBFOLDER>/" 이 경우 저장소의 디렉토리 구조는 URL 구조를 반영해야합니다.
   예를 들어 저장소 에는 /<SUBFOLDER> 디렉토리가 있어야 합니다.

3. 프로젝트 내 deploy.sh 에서 다음 내용으로 만들고 실행하여 배포하십시오.


#!/usr/bin/env sh

# abort on errors

set -e

# build

npm run build

# navigate into the build output directory

cd dist

git init 
git add -A
git commit -m "deploy"

git push -f git@bitbucket.org:<USERNAME>/<USERNAME>.bitbucket.io.git master

cd -


























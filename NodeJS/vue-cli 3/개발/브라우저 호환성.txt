[브라우저 호환성]

- browserslist -

프로젝트가 타겟팅하는 브라우저 범위를 지정하는 browserslist 필드 package.json (또는 별도의 .browserslistrc 파일)
가 있음을 알 수 있습니다. 이 값은 @babel/preset-env 및 autoprefixer 에서 번역해야 할 JavaScript 기능과 필요한
CSS 공급 업체 접두어를 자동으로 결정하는 데 사용됩니다.

브라우저 범위를 지정하는 방법은 여기를 참조하십시오.

- Polyfills -

기본 Vue CLI 프로젝트는 @vue/bable-preset-app 를 사용 @babel/preset-env 하며,
browserslist config는 프로젝트에 필요한 Polyfill을 경합닏.

= useBuiltIns : '사용'

기본적으로 전달에 자동으로 소스 코드에서 사용되는 언어의 기능에 따라 필요한 polyfills를 감지한다.
이렇게하면 최종 번들에 최소한의 폴리필만 포함됩니다. 그러나 이는 또한 의존 관계 중 
하나에 폴리필에 대한 특정 요구 사이 이쓴 기본적으로 바발이이를 감지 할 수 없음을 의미합니다.

useBuiltIns: 'usage'  
@bable/preset-env

의존 관계 중 하나에 폴리필이 필요한 경우 몇 가지 옵션이 있습니다.

1. 종속성이 대상 환경에서 지원하지 않는 ES 버전으로 작성된 경우 : 해당 종속성에서
   transpileDependencies 옵션에 추가하십시오. vue.config.js. 그러면 구문 변환과 해당 종속성에 대한
   사용 기반의 polyfill 검색이 모두 가능합니다.

2. 종속성이 ES5 코드를 제공하고 polyfill이 명시적으로 나열하면 polyfills 옵션을 사용하여 
   필요한 polyfill을 미리 포함할 수 있습니다. @vue/babel-preset-app. 참고가
   es6.promise 이 libs와 약속에 의존하기에 매우 일반적이기 떄문에 기본적으로 포함되어 있씁니다.

// babel.config.js
module.exports = {
  presets : [
    ['@vue/app', {
      polyfills: [
        'es6.promise',
	'es6.symbol'
      ]
    }]
  ]
}


팁

  폴리 라인은 소스 코드에서 직접 가져오는 대신 이 방법을 추가하는 것이 좋습니다.
  여기에 나열된 폴리필은 browserslist 대상에서 필요하지 않은 경우 자동으로 제외 될 수 있기 떄문입니다.


3. 종속성이 ES5 코드를 제공하지만 명시적으로 polyfill 요구 사항을 나열하지 않고 ES6 + 기능을 사용하는 
   경우 (예 : Vuetify) : 항목 파일을 사용 useBuiltIns : 'entry' 하고 추가 import '@babel/polyfill' 합니다.
   이렇게 하면 대상에 따라 모든 polyfill이 가져오므로 browserslis 이상 종속성 polyfill에 대해 걱정할 필요는
   없지만 사용되지 않은 일부 polyfill에서는 최종 묶음 크기가 늘어날 수 있습니다.

자세한 내용은 @babel-preset/env 문서를 참조하십시.


= 라이브러리 또는 웹 컴포넌트로 빌드 할 때 Polyfill

Vue CLI를 사용하여 라이브러리 또는 Web Components를 빌드하는 경우 자동 폴리필 주입을 사용하지 않으려면
useBuiltIns : false 하고 @vue/bable-preset-app을 전달하는 것이 좋습니다.
따라서 코드에 불필요한 폴리필을 포함시키지 않아야합니다. 폴리필을 포함하는 소비 응용 프로그램의 
책임어야 하기때문입니다.


- 모던 모드 -

Babel을 사용하면 ES2015 + 의 최신 언어 기능을 활용할 수 있지만 구식 브라우저를 지원하기 위해서는
번들 및 폴리필 번들을 제공해야 합니다. 이러한 번들 된 번들은 종종 원래의 기본 ES2015 + 코드보다
더 장황하고 구문 분석하고 느리게 실행됩니다. 현대식 브라우저의 좋은 대부분이 네이티브 ES2015에 대한 적절한
지원을 감안할 때, 오래된 브라우저를 지원해야하기 때문에 브라우저에 더 무겁고 덜 효율적인 코드를 제공해야한다는 
것은 낭비입니다.

Vue CLI는 이 문제를 해결하는 데 도음이 되는 "모든 모드"를 제공합니다. 다음 명령으로 프로덕션 용으로 빌드 시:

vue-cli-service build --modern

Vue CLI는 ES 모듈을 지원하는 최신 브라우저를 대상으로 하는 현대 번들과 그렇지 않은 이전 브라우저를
대상으로 한 기존 번들의 두 가지 버전을 생성합니다.

멋진 부분은 특별한 배포 요구 사항이 없다는 것입니다. 생성된 HTML 파일은 필립 월튼 (Phillip Walton)의
우수한 게시물에서 논의 된 기술을 자동으로 사용합니다.

- 헌대 번들은 <script type="module"> 지원하는 브라우저에서 로드됩니다. 
  그들은 또한 <link rel="modulepreload"> 대신에 미리로드 됩니다.

- 레거시 번들이 로드되며 <script nomodule> ES 모듈을 지원하는 브라우저에서는 무시됩니다.

- <script nomodule> Safari 10의 수정사항도 자동으로 주입됩니다.

Hello World 앱의 경우, 현대 번들은 이미 16% 더 작습니다. 제작시 현대 번들은 대개 구문 분석 및 평가 속도가
휠씬 빨라 앱의 로딩 성능이 향상됩니다.


팁
  <script type="module"> CORS가 항상 사용 가능한 상태로 로드됩니다. 이것은 서버가와 같은 유요한
  CORS 헤더를 반환해야 함을 의미합니다 Access-Control-Allow-Origin: * 자격증명으로 
  스크립트를 가져오려면 crossorigin 옵션을 설정하십시오 . use-credentials

  또한 모던 모드에서는 인라인 스크립트를 사용하여 Safari 10에서 두 번들을 로드하지 않으므로 엄격한
  CSP를 사용하는 경우 다음을 사용하여 인라인 스크립트를 명시적으로 허용해야 합니다.

  Content-Seciruty-Policy: script-src 'self' 'sha256-4RS22DYeB7U14dra4KcQYxmwt5HkOInieXK1NUMBmQI='




























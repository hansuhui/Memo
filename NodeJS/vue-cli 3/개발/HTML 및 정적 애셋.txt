[HTML 및 정적 애셋]

- HTML -

= 색인 파일

이 파일 public/index.html은 html-webpack-plugin 으로 처리할 템플릿입니다.
빌드하신 동안 자산 링크가 자동으로 주입됩니다. 또한 Vue CLI는 리소스 힌트(preload/prefetch) , 
메니페스트 / 아이콘 링크 (PWA 플러그인 사용시) 및 빌드 중에 생성 된 JavaScript 및 CSS 파일에 대한 
자산 링크를 자동으로 주입합니다.


= 보간법

인덱스 파일이 템플릿으로 사용되므로 lodash 템플릿 구문을 사용하여 값을 보간 할 수 있습니다.

  - <%= VALUE %> 이스케이프 처리되지 않은 보간의 경우;
  - <%- VALUE %> HTML 이스케이프 보간 용;
  - <% expression %> 자바 스크립트 제어 흐름.

에 의해 노출 된 기본값 html-webpack-plugin 이외에 모든 클라이언트 측 env 변수도 직접 사용할 수 있습니다.
예를 들어 다음 BASE_URL 값을 사용합니다.

<link rel="icon" href="<%= BASE_URL %>favicon.ico"


= preload

<link rel="preload">는 로드 후 바로 페이지에 필요한 리소스를 지정하는 데 사용되는 리소스 힌트
유형으로, 브라우저의 기본 렌더링 장치가 시작되기 전에 페이지로드의 수명주기 초기에 미리로드를 시작하려고 합니다.

기본적으로 Vue CLI 응용 프로그램은 응용 프로그램의 초기 렌더링에 필요한 모든 파일에 대한 사전로드 힌트를 자동으로 
생성합니다. 

힌트는 @vue/preload-webpack-plugin을 사용하여 삽입되며 chainWebpack as를 통해 수정/삭제 될 수 있습니다.
config.plugin('preload').


= prefetch

<link rel="prefeth">는 페이지가 로드를 완료 한 후 사용자가 가까운 시일 내에 브라우저의 유휴 시간에 방문할 수 있는
컨텐츠를 프리 페치하도록 브라우저에 지시하는 자원 힌트 유형입니다.

기본적으로 Vue CLI 응용 프로그램은 비동기 청크 용으로 생성 된 모든 JAvaScript 파일에 대한 프리페치 힌드를
자동으로 생성합니다 (동적을 통한 주문형 코드 분할 import() 의 결과로)

힌트는 @vue/preload-webpack-plugin을 사용하여 삽입되며 chainWebpack as를 통해 수정/삭제 될 수 있습니다.
config.plugin('prefetch')

예: 

//vue.config.js
module.exports = {
  chainWebpack: config => {
    // remove the prefetch plugin
    config.plugins.delete('prefetch')

    // or : 
    // modify its options:
    config.plugin('prefetch').tap(optoins => {
      options[0].fileBlackList = options[0].fileBlacklist || []
      options[0].fileBlackList.push(/myasyncRoute(.)+?\.js/)
      return options
    })
  }
}


프리 페치 플러그인이 비활성화되면 웹팩의 인라인 주석을 사용하여 
프리 페치 할 특정 청크를 수동으로 선택할 수 있습니다.

import(/* webpackPrefetch: true */ './someAsyncComponet.vue')

상위 청크가 로드되면 webpack의 런타임에서 프리 페치 링크를 삽입합니다.


팁
  프리 페치 링크는 대역폭을 소비합니다. 많은 비동기 청크가 있는 대형 응용 프로그램이 있고
  사용자가 주로 모바일이므로 대역폭을 인식하는 경우 프리 페치 링크를 사용하지 않도록 설정하고 
  프리 페치 할 청크를 수동으로 선택할 수 있습니다.


= 색인 생성 사용 중지

기존 백엔드와 함께 Vue CLI를 사용 index.html 하는 경우 생성된 에셋을 서버에서 렌더링 된 페이지에서
사용할 수 있도록 생성을 비활성화해야 할 수 있습니다. 이렇게하려면 다음을 추가 할 수 있습니다.
vue.config.js

//vue.config.js
module.exports = {
  // disable hashes in filenames
  filenameHashing: false,
  // delete HTML related webpack plugins
  chainWebpack: config => {
    config.plugins.delete('html')
    config.plugins.delete('preload')
    config.plugins.delete('prefetch')
  }
}


그러나 이는 다음과 같은 이유로 권장되지 않습니다.

  - 하드 코딩 된 파일을 사용하면 효율적인 캐시 제어를 구현하기가 더 어려워집니다.
  - 하드 코딩 된 파일이름도 코드 분할로 잘 재생되지 않으며 파일 이름이 다른 추가
    JavaScript 파일을 생성합니다.
  - 현대 모드에서는 하드 코드 된 파일 이름이 작동하지 않습니다.

대신 indexPath 옵션을 사용하여 생성 된 HTML을 서버 측 프레임 워크에서 보기 템플리트로 사용하는 것을
고려해야 합니다.


= 여러 페이지 응용 프로그램 만들기

모든 앱이 SPA 여야하는 것은 아닙니다. Vue CLI에서는 pages 옵션을 vue.config.js 사용하여 다중 페이지 
응용 프로그램을 빌드하는 것을 지원합니다. 제작 된 응용 프로그램은 최족의 로드 성능을 위해 여러 항목간에 
공통 청크를 효율적으로 공유합니다.



- 정적 자산 처리 -

정적 자산은 두 가지 방법으로 처리 할 수 있습니다.

 - 자바 스크립트에서 가져 오거나 템플릿 / CSS 에서 상대 경로를 통해 참조할 수 있습니다.
   이러한 참조는 webpack에서 처리합니다.

 - public 디렉토리에 배치되고 절대 경로를 통해 참조됩니다. 이러한 자산은 단순히 복사되어 
   webpack을 통과하지 않습니다.


= 상대 경로 가져오기

.JavaScript, CSS 또는 *.vue 파일 내에서 상대 경로 (시작해야함)를 사용하여 정적 애셋을 참조하면
애셋이 webpack의 종속성 그래프에 포함됩니다. 이 컴파일 과정에서 <img  src="..."> , background : url(...) 및
CSS와 같은 모든 자산 URL은 모듈 종속성 @import 으로 해결됩니다.

예를 들어 , url(./image.png) 는 request('./image.png') 로 변역됩니다. 

  <img src="./image.png">

  다음과 같이 컴파일됩니다.

  h('img', { attrs: { src: require('./image.png') }})

내부적으로 우리 file-loader는 버전 해시와 올바른 공개 기본 경로를 사용하여 최종 파일 위치를 결정하고
url-loader 4KB 보다 작은 에셋을 조건부로 인라인하여 HTTP 요청 양을 줄이는 데 사용합니다.

chainWebpack을 통해 인라인 파일 크기 제한을 조정할 수 있습니다. 예를 들어 한계를 10kb로 설정하려면 
다음을 입력하십시오.


//vue.config.js
module.exports = {
  chainWebpck : config => {
    config.module
      .rule("images")
        .use(''url-loader)
          .loader('url-loader')
            .tap(options => { Object.assing(options, { limit: 10240 }) })
  }
}


= URL 변환 규칙

  - URL이 절대 경로 /images/foo.png 이면 그대로 유지됩니다.
  - URL . 이로 시작하면 상대 모듈 요청으로 해석되고 파일 시스템의 폴더 구조를 기반으로 해결됩니다.
  - URL ~ 이로 시작하면, 그 이후의 모든 것은 모듈 요청으로 해석됩니다. 즉, 노드 모듈 내부의 자신을 
    참조 할 수도 있습니다.

  <img src="~some-npm-package/foo.png">

  - URL @이로 시작하는 모듈 요청으로 해석됩니다. 이는 Vue CLI가 기본적으로의 별칭이기 떄문에
    유용합니다. <projectRoot>/src . (템플릿 전용)


= public 폴더

public 폴더에 있는 정적 자산은 단순히 복사되어 webpack을 통과하지 않았습니다.
절대 경로를 사용하여 참조해야합니다.

모듈 종속성 그래프의 일부로 자산 가져오기를 권장하므로 다음과 같은 이점이 있는 webpack을 통과하게 됩니다.

 - 추가 네트워크 요구를 피하기 위해 스크립트와 스타일 시트가 함께 축소되어 번들됩니다.
 - 누락 된 파일은 사용자에게 404 오류 대신 컴파일 오류를 발생시킵니다.
 - 결과 파일 이름에는 콘텐츠 해시가 포함되어 있으므로 이전 버전을 캐싱하는 브라우저에 대해 
   걱정할 필요가 없습니다.

public 디렉토리가 제공됩니다 탈출 해치, 당신은 절대 경로를 통해 그것을 참조할 때, 당신은 당신의 응용 프로그램이
배포 될 위치를 고려해야 할 필요가 있다. 앱이 도메인 루트에 배포되지 않는 경우 URL 앞에 baseUrl을 추가해야합니다.

 - public/index.html 에서 템플릿으로 사용되는 다른 HTML 파일 html-webpack-plugin, 링크 앞에 
   <= BASE_URL %> 을 추가할 필요가 있다.

 - 템플릿에서 먼저 구성 요소에 기본 URL을 전달해야 합니다.

   data() {
      return { baseUrl : process.env.BASE_URL }
   }

  그때 :

  <img :src="`${baseUrl}my-image.png`"



= public 폴더 사용시기

 - 빌드 출려에는 특정 이름의 파일이 필요합니다.
 - 수천 개의 이미지가 있고 경로를 동적으로 참조해야합니다.
 - 일부 라이브러리는 Webpack과 호환되지 않을 수 있으며 다른 옵션은 없지만 이를 <script> 태그로
   포함 할 수 있습니다.











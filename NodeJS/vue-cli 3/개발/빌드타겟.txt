[빌드타겟]

실행할 때 --target 옵션을 통해  vue-cli-service build 를 다른 빌드 대상을 지정할 수 있습니다.  
이를 통해 동일한 코드 기반을 사용하여 서로 다른 사용 사례에 따라 서로 다른 빌드를 생성 할 수 있습니다.


- 앱 -

앱이 기본 빌드 타켓입니다. 이 모드에서 :

- index.html 자산 및 자원 참고 사항 주입

- 더 나은 캐싱을 위해 별도의 청크로 분할 된 공급 업체 라이브러리

- 4kb 이하의 정적 애셋은 JavaScript에 인라인됩니다.

- 정적 애셋은 public 출력 디렉토리에 복사됩니다.


- Library -

IE 호환성에 대한 참고 사항
  lib 모드에서 공용 경로는 동적 j로드가 가능하도록 기본 js 파일이 로드 된 URL에 따라 동적으로 결정됩니다.
  그러나 이 기능은 document.currentScript IE에서 누락 된 지원이 필요합니다.
  IE 지원이 필요한 경우 라이브러리를 가져오기 전에 최종 웹 페이지에 current-script-polyfill을 
  포함시키는 것이 좋습니다.


Vue 종속성에 대한 참고 사항
  lib 모드에서는 Vue가 외부화됩니다. 즉, 코드에서 Vue를 가져온 경우에도 번들은 Vue를 번들하지 않습니다.
  lib가 bundler를 통해 사용되면 bundler를 통해 종속성으로 Vue 를 로드하려고 시도합니다.
  그렇지 않으면 글로벌 Vue 변수로 되돌아갑니다.


당신은 하나의 엔트리를 라이브러리로써 구축 할 수 있습니다.

vue-cli-service build --target lib --name myLib [entry]


File   / Size / Gzipped

dist/myLib.umd.min.js  / 13.28 kb   / 8.42 kb
dist/ myLib.umd.js     /  20.95 kb  / 10.22 kb
dist/myLib.common.js   /  20.57 kb  / 10.09 kb
dist/myLib.css         /  0.33 kb   / 0.23 kb
 

항목은 a.js 또는 .vue 파일이 될 수 있습니다. 항목이 지정되지 않는 경우, src/App.vue 사용됩니다.

lib 빌드 출력 : 

- dist/myLib.common.js : 변들을 통해 소비하는 COmmonJS 번들 
			 (불행히도 WEBPACK은 현재 번들의 ES 모듈 출력 형식을 지원하지 않습니다.)

- dist/myLib.umd.js : 브라우저나 AMD 로더에서 직접 소비하는 UMD 번들

- dist/myLib.umd.min.js : UMD 빌드의 축소 된 버전입니다.

- dist/mYLib.css : 추출된 CSS 파일 ( 설정 css : {extract : false} 에 의해 인라인 될 수 있음 ( vue.config.js)


- Vue ve. JS / TS 항목 파일 -

를 사용할 때 .vue 파일을 항목으로 구성 요소는 항상 기본 내보내기이기 떄문에 라이브러리는 Vue 구성 
요소 자체를 직접 노출합니다.

그러나 항목으로 a.js 또는 .ts 파일을 사용하면 이름이 지정된 내보내기가 포함될 수 있으므로 라이브러리는
모듈로 표시됩니다. 즉, window.yourLib.default UMD 빌드 또는 const myLib = require('mylib').default 
CommonJS 빌드 에서처럼 라이브러리의 기본 내보내기에 액세스해야 합니다.
명명된 내보내기가 없고 기본 내보내기를 직접 노출하고자하는 경우 다음 웹팩 구성을 사용할 수 있습니다.
vue.config.js


module.exports = {
   configureWebpack : {
      output : {
        libraryExport : 'default'
      }
   }
}



- 웹 구성 요소 -

호환성에 대한 참고 사항
  웹 구성 요소 모드는 IE11 이하를 지원하지 않습니다.


Vue 종속성에 대한 참고
  웹 구성 요소 모드에서 Vue는 외부화됩니다. 즉, 코드에서 Vue를 가져온 경우에도 번들은 Vue를
  번들하지 않습니다. 번들은 Vue 호스트 페이지에서 전역 변수로 사용할 수 있다고 가정합니다.

다음을 사용하여 웹 구성 요소로 단일 항목을 작성할 수 있습니다.

  vue-cli-service build --target wc --name my-element [entry]

항목은 *.vue 파일 이어여 합니다. VUE CLI는 자동으로 구성 요소를 웹 구성 요소로 랩하고 등록하므로
사용자가 직접 구성 할 필요가 없습니다. main.js 개발 전용 데모 앱으로 사용할 수 있습니다.

빌드는 모든 자바 스크립트 파일 ( 및 축소버전)을 생성합니다. 이 스크립트는 페이지에 포함될 때 
<my-element> 대상 요소를 래핑하는 사용자 정의 요소를 등록합니다. @vue/web-component-wrapper 
래퍼는 속성, 이벤트 및 슬롯을 자동으로 프록시합니다. 
자새한 내용은 @vue/web-component-wrapper 문서를 참조하십시오.


번들은 Vue 페이지에서 전역 적으로 사용할 수 있어야합니다.

이 모드에서는 구성 요소 사용자가 Vue 구성 요소를 일반 DOM 요소를 사용할 수 있습니다.

<script src="https://unpkg.com/vue"></script>
<script src="path/to/my-element.js"></script>

<!-- use in plain HTML , or in any other framework -->
<my-element></my-element>


- 여러 웹 구성 요소를 등록하는 번들 -

웹 구성 요소 번들을 만들 때 glob as 항목을 사용하여 여러 구성 요소를 대상으로 지정할 수도 있습니다.

  vue-cli-service build --target wc --name foo 'src/componets/*.vue'

여러 우베 구성 요소 --name 를 만들 때 접두사로 사용도며 사용자 정의 요소 이릉은 구송 요소 파일 이름에서
유추됩니다. 예를 들어 --name foo 이름이 지정된 구성 요서 HelloWorld.vue를 사용하면 결과 사용자 정의요소가 
등록됩니다. <foo-hello-world>


- 비동기 웹 구성 요소 -

여러 웹 구성 요소를 대상으로 할 때 번들이 상당히 커질 수 있으며 사용자는 번들이 등록하는 구성 요소 중 
일부만 사용할 수 있습니다. 비동기 웹 구성 요소 모드는 모든 구성 요소간에 공유 런타임을 제공하는 작은
항목 파일로 코드 분할 번들을 생성하고 모든 사용자 정의 요소를 먼저 등록합니다.
구성 요소의 실제 구현은 해당 사용자 지정 요소의 인스턴스가 페이지에서 사용될 때만 요청시 가져옵니다.

vue-cli-service build --target wc-async --name foo 'src/components/*.vue'


File  /  Size  / Gzipped


dist/foo.0,min.js  /  12.80 kb / 8.09 kb
dist/foo.min.js    /  7.45 kb  /  31.7 kb 
dist/foo.1.mni.js  /  2.91 kb  / 1.02 kb
dist/foo.js        /  22.51 kb / 6.67 kb
dist/foo.0.js      /  17.27 kb / 8.83 kb
dist/foo.1.js      /  5.24 kb  / 1.64 kb


이제 페이지에서 사용자는 Vue와 항목 파일만 포함시켜야 합니다.

<script src="https://unpkg.com/vue"></srcipt>
<script src="path/to/foo.min.js"></srcipt>

<!--  foo-one's implementation chunk is auto fetched when it's used  -->
<foo-one></foo-one>
























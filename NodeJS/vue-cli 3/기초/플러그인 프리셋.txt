https://cli.vuejs.org/guide/plugins-and-presets.html#plugins

[플러그인 및 프리셋]

- 플러그인 -

Vue CLI는 플러그인 기반 아키텍처를 사용합니다.
새로 생성된 프로젝트를 검사하면 package.json 시작하는 종속성을 찾을 수 
@vue.cli-plugin- 있습니다. 플러그인은 내부 웹팩 구성을 수정하고 명령을 주입 할 수 있습니다.
vue-cli-service  프로젝트 생성 과정에서 나열된 대부분의 기능은 플러그인으로 구현됩니다.

플러그인 기반 아키텍처는 Vue CLI를 유연하고 확장 가능하게 만듭니다. 플러그인 개발에 관심이
있다면 플러그인 개발 안내서를 확인하십시오.

팁
   vue ui 명령을 사용하여 GUI를 사용하여 플러그인을 설치하고 관리 할 수 있습니다.

- 기존 프로젝트에 플러그인 설치하기 -

각 CLI 플러그인은 생성기 (파일 생성)와 
런타임 플러그인(핵심 webpack 구성을 수정하고 명령을 주입 함) 과 함께 제공됩니다.
vue create 새 프로젝트를 만들 때 사용 하는 기능 선택에 따라 일부 플러그인이 미리 설치됩니다.
이미 생성 된 프로젝트에 플러그인을 설치하려는 경우 다음 명령을 사용하여 플러그인을
설치할 수 있습니다. vue add.

vue add @vue/eslint

팁
  vue add Vue CLI 플러그인 설치 및 호출을 위해 특별히 설계되었습니다.
  일반적인 npm 패키지를 대체 하는 것은 아닙니다. 일반 np 패키지의 경우,
  여전히 선택한 패키지 관리자를 사용해야 합니다.

경고
  vue add 명렁은 플러그인의 파일 생성기를 호출하고 잠재적으로 기존 파일을 
  변경하기 떄문에 실행하기 전에 프로젝트의 현재 상태를 커밋하는 것이 좋습니다.

이 명령 @vue/eslint 은 전체 패키지 이름 @vue/cli-plugin-eslint 을 확인하고 npm 에서 
설치하고 해당 생성기를 호출합니다.

# these are equivalent to the previous usage
vue add @vue/cli-plugin-eslint

@vue 접두어가 없으면 명령이 범위가 지정되지 않은 패키지로 대신 해석됩니다.
예를 들어 타사 플러그인을 설치하려면 다음과 같이 하십시오.
vue-cli-plugin-apollo

# installs and invokes vue-cli-plugin-apollo
vue add apollo

특정 범위에서 타사 플러그인을 사용할 수도 있습니다. 예를 들어,
플러그인의 이름이 지정 @foo/vue-cli-plugin-bar 되면 다음과 같은 플러그인을
추가 할 수 있습니다.

vue add @foo/bar

설치된 플러그인에 발전기 옵션을 전달할 수 있습니다. 
(프롬프트를 건너 뜁니다.)

vue add @vue/eslint --config airbnb --lintOn save

vue-router 과 vuex : 그들은 자신의 플러그인을 필요 없지만 , 그럼에도 불구하고 추가 할 수 있습니다.
		  - 특별한 경우 입니다.

vue add router
vue add vuex

플러그인이 이미 설치되어있는 경우 설치를 건너 뛰고 vue invoke 명렁을 사용하여 생성기를
호출 할 수 있습니다. 이 명령에는 다음과 같은 인수가 사용됩니다. vue add

팁 
  어떤 이유로 플러그인이 package.json 프로젝트에 있는 파일이 아닌 다른 파일에 나열된 경우
  파일이 들어있는 폴더의 경로로 vuePlugins.resolveFrom 프로젝트의 옵션을 설정 할 수 있습니다.
  package.json 
 {
  "vuePlugins" : {
      "resolveFrom" : ".config"
    }
  }

- Project local plugin -

프로젝트에서 플러그인 API에 액세스해야 하고 전체 플러그인을 만들지 않으려며 
파일 vuePlugins.service 에서 다음 옵션을 사용할 수 있습니다. package.json

 {
  "vuePlugins" : {
      "service" : ["my-commands.js"]
    }
  }

각 파일은 플러그인 API를 첫 번째 인수로 사용하여 함수를 내보내야 합니다.
플러그인 API에 대한 자세한 내용은 플러그인 개발 안내서를 확인하십시오.

다음 vuePlugins.ui 옵션을 사용하여 UI 플러그인처럼 작동하는 파일을 추가 할 수도 있습니다.

 {
  "vuePlugins" : {
      "ui" : ["my-ui.js"]
    }
  }

자세한 내용은  내용은 UI 플러그인 API를 참조하십시오.

- 사전 설정 -

Vue CLI 프리셋은 사용자가 프롬프트를 선택하지 않아도 되도록 새 프로젝트를 만들기 위한
미리 정의 된 옵션과 플러그인을 포함하는 JSON 객체입니다.

저장되는 프리셋 vue create 은 사용자 홈 디렉토리 (~/.vuerc) 의 설정 파일에 저장됩니다.
이 파일을 직접 편집하여 저장된 프리셋을 조정 / 추가  / 삭제 할 수 있습니다.

다음은 사전 설정의 예엡니다.

{
  "useConfigFiles": true,
  "router": true,
  "vuex": true,
  "cssPreprocessor": "sass",
  "plugins": {
    "@vue/cli-plugin-babel": {},
    "@vue/cli-plugin-eslint": {
      "config": "airbnb",
      "lintOn": ["save", "commit"]
    }
  }
}


프리셋 데이터는 플러그인 생성기가 해당 프로제그 파일을
생성하는 데 사용됩니다. 위의 필드 외에도 통합 도구에 대한 추가 구성을 추가 할 수 있습니다.

{
  "useConfigFiles": true,
  "plugins": {...},
  "configs": {
    "vue": {...},
    "postcss": {...},
    "eslintConfig": {...},
    "jest": {...}
  }
}

이 추가 package.json 구성은 값에 따라 해당 설정 파일에 병합됩니다.
useConfigFiles 예를 들어 with "useConfigFiles" : ture 의 값 config.vue 이로 병합됩니다.
vue.config.js 

[프리셋 플러그인 버전 관리]

사용중인 플러그인의 버전을 명시적으로 지정할 수 있습니다.

{
  "plugins": {
    "@vue/cli-plugin-eslint": {
      "version": "^3.0.0",
      // ... other options for this plugin
    }
  }
}

이것은 공식 플러그인에는 필요하지 않습니다. 생략하면 CLI는 자동으로 레지스트리에서
사용 가능한 최신 버전을 사용합니다. 그러나 사전 설정에 나열된 타사 플러그인에 대해
명시적인 버전 범위를 제공하는 것이 좋습니다.

- 플러그인 프롬프트 허용 -

사전 설정을 사용하는 경우 Vue CLI는 모든 플러그인 옵션이 사전 설정에서 이미 선언 된 것으로 
가정하기 때문에 각 플러그인은 플젝트 생성 프로세스 중에 자체 프롬프트를 삽입할 수 있지만
사전 설정을 사용하는 경우 해당 프롬프트는 건너 뜁니다.

경우에 따라 사용자가 원하는 플러그인을 선언하고 플러그인을 통해 삽입 된 프롬프트를 사용자가 
직접 볼 수 있게 하여 사전 설정을 원하는 경우가 있습니다.

이러한 시나리오 "prompts" : true 의 경우 플러그인의 옵션에서 프롬프트를 삽입 할 수 있도록 
지정할 수 있습니다.

{
  "plugins": {
    "@vue/cli-plugin-eslint": {
      // let the users pick their own ESLint config
      "prompts": true
    }
  }
}

- 원격 사전 설정 -

git repo에 게시하여 다른 개발자와 프리셋을 공유 할 수 있습니다.
repo에는 다음 파일이 포함될 수 있습니다.

- preset.json :  사전 설정 데이터가 포함 된 주 파일(필수).
- generator.js : 프로젝트에서 파일을 삽입하거나 수정할 수 있는 
- prompts.s : 발전기 옵션을 수집 할 수 있는 프롬프트 파일

repo가 게시되면 --preset 프로젝트를 만들 때 원격 사전 설정을 사용하는 옵션을 사용할 수 있습니다.

# use preset from GitHub repo
vue create --preset username/repo my-project

GitLab 및 BitBucket 도 지원됩니다. --clone private repos 에서
가져 오는 경우 옵션을 사용해야합니다.

vue create --preset gitlab:username/repo --clone my-project
vue create --preset bitbucket:username/repo --clone my-project

- 로컬 파일 시스템 프리셋 -

원격 프리셋을 개발할 때 프리셋을 원격 리포에 반복적으로 
밀어 테스트해야하는 것이 지루할 수 있습니다. 워크 플로우를
단순화하기 위해 로컬 사전 설정을 직접 사용할 수 있습니다.
-- preset 옵션의 값이 상대 또는 절대 파일 경로이거나 다음으로 끝나는 경우
Vue CLI는 로컬 사전 설정을 로드 합니다. 

vue create --preset ./my-preset my-project
vue create --preset my-preset.json my-project

 

 







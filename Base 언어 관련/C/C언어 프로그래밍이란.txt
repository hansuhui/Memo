우리는 이제  { Sinclair ˚C* }를 통해 C언어 프로그래밍을 시작할 겁니다. 

C언어라 함은 문법을 말하는 것입니다.

프로그래밍은 프로그램을 만드는 일이고 일반적으로 프로그램은 바로 시간ㅇ네 따른 작업 순서입니다.

프로그램이 작업 순서라는 것은 아주 중요합니다. 순서대로 해야 한다는 말입니다.
 옛 우리 선조들은 '우물거소 숭늉 찾으랴?'라는 정말 멋진 명언을 남겼습니다. 
그런데 요즘 프로그래머들의 모습을 보면 마치 멀리 우물이 보이기만 해도
숭늉을 찾는 게 아닌가 하는 생각이 들기 까지 합니다.

어떤 문제를 해결하기 위해 프로그램밍을 하면서 대부분 우리들이 가장 먼저 하는 것이 
무엇인지 압니까?  바로 비주얼 스튜D5나 기타 에디러를 열고 열심히 타이핑하는 일입니다.
그러나 사실 어던 문제가 발생하면 먼저 해결방법과 순서를 정해야 합니다.
해결방법과 순서를 정하는 일을 유식한 말로 알고리즘(문제를 해결하기 위한 절차나 방법)을
작성한다고 말합니다.
알고리즘은 어느 특정 언어에 한정되어 있지 않습니다. 때란 파스칼등 특정 언어를 사용하는
경우도 있고 그냥 일상 언어를 사용하기도 합니다. 또는 그림을 사용하기도 하는데
Flost Chart나 NS Chart도 있습니다. 객체지향 분석 방법론에서는 UML이라는 것을 사용하기도 합니다.
하지만 우리는 여기서 그냥 일상적인 언어로 작성해보도록 하겠습니다. 다양한 설계 방법론을 설명하고 있는 멋진 책들이 서점에 있고 정보의 바다 인터넷에 널려 있습니다.

프로세스가 무엇이냐 라는 정의를 내리기 위해서는 몇 백 페이지 짜리 논물을 줄줄이 읊어야 할지도 모르겟습니다. 하지만 그것을 다 이야기하고도 현재 실행 중인 프로그램이란 말을 빼먹었다면
그건 틀린 내용일 수도 있습니다. 왜냐하면 일반적으로 프로그램이 실행되면 프로세스라고
부르기 때문입니다. 다시 말해 프로그램은 하드 디스크, 플로피 디스크, 컴팩트 디스크등
물리적인 저장장치에 존재하고 프로세스는 메모리에 존재하게 됩니다.

프로그램이 실행되면 메모리에 올라가 프로세스가 된다.

이렇게 단순한 명제가 왜 중요할까요? 그건 바로 메모리에 올라가면 반드시 주소 값을 갖는다는 
것 때문입니다.
모든 프로그램의 요소는 메모리에 올라가야 샐힝이 되고 메모리에 올라가면 반드시 주소 값을 갖는
때문입니다. 모든 프로그램의 요소는 메모리에 올라가야 실행이 되고 메모리에 올라가면 
반드시 주소값을 갖게 됩니다. 주소 값을 갖지 않는 프로그램 요소는 레지스터 변수 말고는 없습니다.
이렇게 주소 값을 가지기 떄문에 C의 포인터를 사용할 수 있습니다. C의 포인터는 바로 주소 값을 
담기 위한 데이터 타입이기 때문입니다.

포인터 이야기가 나오지 이마를 찌푸리는 분이 있을 텐데 저는 포인터가 나오면 차라리 죽고 싶습니다
그러다가 포인터가 없다는 이유 하나만으로 Java를 배우고 Java 프로그램을 짜고 심지어 북한의 
엔지니어들까지 JAva를 강의했던 사람입니다. 
하지만 포인터가 없다는 Java프로그램을 짜다 보면 종종 만나는 에러가 있습니다. NullPointerException 이었습니다. 포인터가 없다던 Java 에서 NullPointerException은 저를
충분히 좌절시키고도 남음이 있었습니다. 아 포인터를 피해 Java로 왔더니 여기에도 포인터가 있구나.
Java에는 포인터가 없는 게 아닙니다. 다만 감취놓았을 뿐입니다.

그런데 말입니다.. 이제 포인터를 제대로 이해하니 메모리가 제대로 보이기 시작했습니다.
다른 어떤 프로그램을 짜도라도 두렵지 않습니다. 


https://wikidocs.net/29

[모듈 만들고 불러 보기]


# mod1.py
def sum(a, b):
    return a + b



위와 같이 sum 함수만 있는 파일 mod1.py를 만들고 C:\Python 디렉터리에 저장하자. 
이 파일이 바로 모듈이다. 지금까지 에디터로 만들어 왔던 파일과 다르지 않다.

우리가 만든 mod1.py라는 파일, 즉 모듈을 파이썬에서 불러와 사용하려면 어떻게 해야 할까? 
먼저 아래와 같이 도스 창을 열고 mod1.py를 저장한 디렉터리(이 책에서는 C:\Python)로 이동한 다음 대화형 인터프리터를 실행한다.


반드시 mod1.py를 저장한 위치로 이동한 다음 이후 예제를 진행해야 한다. 
그래야만 대화형 인터프리터에서 mod1.py를 읽을 수 있다. 이제 아래와 같이 따라 해보자.

>>> import mod1
>>> print(mod1.sum(3,4))



mod1.py를 불러오기 위해 import mod1이라고 입력하였다. import mod1.py로 입력하는 실수를 하지 않도록 주의하자. 
import는 이미 만들어진 파이썬 모듈을 사용할 수 있게 해주는 명령어이다. 
mod1.py 파일에 있는 sum 함수를 이용하기 위해서는 위의 예에서와 같이 
mod1.sum처럼 모듈이름 뒤에 '.'(도트 연산자)를 붙이고 함수 이름을 써서 사용할 수 있다.

(※ import는 현재 디렉터리에 있는 파일이나 파이썬 라이브러리가 저장된 디렉터리에 있는 모듈만 불러올 수 있다.)

import의 사용 방법은 다음과 같다.

import 모듈이름
여기서 모듈이름은 mod1.py에서 .py라는 확장자를 제거한 mod1만을 가리킨다.

이번에는 mod1.py 파일에 다음 함수를 추가해 보자.

def safe_sum(a, b): 
    if type(a) != type(b): 
        print("더할수 있는 것이 아닙니다.")
        return 
    else: 
        result = sum(a, b) 
    return result
safe_sum 함수는 서로 다른 타입의 객체끼리 더하는 것을 미리 막아 준다. 만약 서로 다른 형태의 객체가 입력으로 들어오면 
"더할 수 있는 값이 아닙니다"라는 메시지를 출력한다. 그리고 return문만 단독으로 사용되어 None 값을 돌려주고 함수를 종료한다.

이 함수를 mod1.py에 추가한 다음 다시 대화형 인터프리터를 열고 다음과 같이 따라 해보자.

>>> import mod1
>>> print(mod1.safe_sum(3, 4))
7
import mod1으로 mod1.py 파일을 불러온 다음 mod1.safe_sum(3, 4)로 safe_sum 함수를 호출한다. 이렇게 하면 같은 
타입의 객체가 입력으로 들어와서 3+4의 결과인 7이 출력된다.

이번에는 다음처럼 따라 해보자.

>>> print(mod1.safe_sum(1, 'a'))
더할 수 있는 값이 아닙니다.
None
>>>
위 예제에서 1은 정수형 객체, a는 문자열 객체이다. 이렇게 서로 타입이 다른 객체가 입력으로 들어오면 
"더할 수 있는 값이 아닙니다."라는 메시지를 출력하고 단독으로 사용된 return에 의해서 None 값을 돌려주게 된다.

mod1의 sum 함수 역시 다음처럼 바로 호출할 수도 있다.

>>> print(mod1.sum(10, 20))
30

(
[모듈 함수를 사용하는 또 다른 방법]

때로는 mod1.sum, mod1.safe_sum처럼 쓰지 않고 그냥 sum, safe_sum처럼 함수를 쓰고 싶은 경우도 있을 것이다. 
이럴 때는 "from 모듈이름 import 모듈함수"를 사용하면 된다.

from 모듈이름 import 모듈함수
from ~ import ~를 이용하면 위와 같이 모듈이름을 붙이지 않고 바로 해당 모듈의 함수를 쓸 수 있다. 
다음과 같이 따라 해보자.

>>> from mod1 import sum
>>> sum(3, 4)
7
그런데 위와 같이 하면 mod1.py 파일의 sum 함수만 사용할 수 있다. sum 함수와 safe_sum 함수를 둘 다 사용하고 싶다면 어떻게 해야 할까?

2가지 방법이 있다.

from mod1 import sum, safe_sum
첫 번째 방법은 위와 같이 from 모듈이름 import 모듈함수1, 모듈함수2처럼 사용하는 방법이다. 콤마로 구분하여 필요한 함수를 불러올 수 있다.

from mod1 import *
두 번째 방법은 위와 같이 * 문자를 사용하는 방법이다. 07장에서 배울 정규 표현식에서 
* 문자는 "모든것"이라는 뜻인데 파이썬에서도 마찬가지 의미로 사용된다.
 따라서 from mod1 import *는 mod1.py의 모든 함수를 불러서 사용하겠다는 말이다.

mod1.py 파일에는 함수가 2개밖에 없기 때문에 위의 2가지 방법은 동일하게 적용된다.
)


====================================================================================================================================

[if __name__ == "__main__": 의 의미]

이번에는 mod1.py 파일에 다음과 같이 추가해 보자.

# mod1.py 
def sum(a, b): 
    return a+b

def safe_sum(a, b): 
    if type(a) != type(b): 
        print("더할수 있는 것이 아닙니다.")
        return 
    else: 
        result = sum(a, b) 
    return result 

print(safe_sum('a', 1))
print(safe_sum(1, 4))
print(sum(10, 10.4))

위와 같은 mod1.py 파일을 에디터로 작성해서 
C:\Python이라는 디렉터리에 저장했다면 다음처럼 실행할 수 있다.

C:\Python>python mod1.py
더할 수 있는 것이 아닙니다.
None
5
20.4


결과값은 위의 예처럼 출력될 것이다. 
그런데 이 mod1.py 파일의 sum과 safe_sum 함수를 사용하기 위해 mod1.py 파일을 import하면 문제가 생긴다.

도스 창을 열고 다음을 따라 해보자

C:\WINDOWS> cd C:\Python
C:\Python>python
>>> import mod1
더할 수 있는 것이 아닙니다.
None
5
20.4

엉뚱하게도 import mod1을 수행하는 순간 mod1.py가 실행이 되어 결과값을 출력한다. 
우리는 단지 mod1.py 파일의 sum과 safe_sum 함수만 사용하려고 했는데 말이다. 이러한 문제를 방지하려면 다음처럼 하면 된다.


if __name__ == "__main__":
    print(safe_sum('a', 1))
    print(safe_sum(1, 4))
    print(sum(10, 10.4))



if __name__ == "__main__"을 사용하면 C:\Python>python mod1.py처럼 
직접 이 파일을 실행시켰을 때는 __name__ == "__main__"이 참이 되어 if문 다음 문장들이 수행된다. 
반대로 대화형 인터프리터나 다른 파일에서 이 모듈을 불러서 사용할 때는 __name__ == "__main__"이 거짓이 되어 
if문 다음 문장들이 수행되지 않는다.

파이썬 모듈을 만든 다음 그 모듈을 테스트하기 위해 보통 위와 같은 방법을 사용하는데, 
실제로 그런지 대화형 인터프리터를 열고 실행해 보자.

>>> import mod1

mod1.py 파일의 마지막 부분을 위와 같이 고친 다음에는 아무런 결과값도 출력되지 않는 것을 볼 수 있다.








lambda는 함수를 생성할 때 사용하는 예약어로, def와 동일한 역할을 한다. 
보통 함수를 한줄로 간결하게 만들 때 사용한다. 우리말로는 "람다"라고 읽고 
def를 사용해야 할 정도로 복잡하지 않거나 def를 사용할 수 없는 곳에 주로 쓰인다. 사용법은 다음과 같다.

lambda 인수1, 인수2, ... : 인수를 이용한 표현식
한번 직접 만들어 보자.

>>> sum = lambda a, b: a+b
>>> sum(3,4)
7
lambda를 이용한 sum 함수는 인수로 a, b를 받아 서로 더한 값을 돌려준다. 
위의 예제는 def를 사용한 아래 함수와 하는 일이 완전히 동일하다.

>>> def sum(a, b):
...     return a+b
...
>>>
그렇다면 def가 있는데 왜 lambda라는 것이 나오게 되었을까? 이유는 간단하다. 
lambda는 def 보다 간결하게 사용할 수 있기 때문이다. 또한 lambda는 def를 사용할 수 없는 곳에도 사용할 수 있다. 
다음 예제에서 리스트 내에 lambda가 들어간 경우를 살펴보자.

>>> myList = [lambda a,b:a+b, lambda a,b:a*b]
>>> myList
[at 0x811eb2c>, at 0x811eb64>]
즉, 리스트 각각의 요소에 lambda 함수를 만들어 바로 사용할 수 있다. 
첫 번째 요소 myList[0]은 2개의 입력값을 받아 두 값의 합을 돌려주는 lambda 함수이다.

>>> myList[0]
at 0x811eb2c>
>>> myList[0](3,4)
7
두 번째 요소 myList[1]은 2개의 입력값을 받아 두 값의 곱을 돌려주는 lambda 함수이다.

>>> myList[1](3,4)
12
파이썬에 익숙해질수록 lambda 함수가 굉장히 편리하다는 사실을 알게 될 것이다.
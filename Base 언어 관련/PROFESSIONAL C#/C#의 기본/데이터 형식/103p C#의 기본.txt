환경변수 설정후

간단한 콘솔 프로그램을 만든후 

해당 폴더로 가서 css 파일.cs

그럼 해당 폴더에 파일.exe 파일이 생성된다.

실행하면 콘솔에서 프로그램이 실행된다.

=======================================================

C#의 문장은 C,C++,자바에서처럼 세미콜론으로 구분되고,
여러 개의 문장은 중괄호를 사용하여 하나의 블록({...})으로 묶일 수 있다.
C#의 문장은 여러 줄로 나누어서 코딩해도 별 상관없이 실행된다.
한 줄짜리 주석은 //로 표시하고, 한 줄을 초과하는 주석은 /*로 시작하여 */로 끝난다
자바에서처럼 모든 코드는 클래스 내부에 작성되어야 하며, 1장에서 살펴보았던 것처럼
.NET 프레임워크의 클래스와 변수 형식들은 네임스페이스(namespace)로 조직되어야 한다.
(이것은 자바의 패키지와 비슷한 개념이다.) 위의 예에서는 특별히 네임스페이스를 명시하지
않았기 때문에 우리가 만든 클래스는 이름없는 전역 네임스페이스 내부에 위치하게 된다.

-요점-

문장은 ;으로 구분되고 
여러 개의 문장은 {}로 묶을수 있다.
// 한 줄주석 
/**/ 여러줄 주석
네임스페이스가 자바의 패키지 개념으로 들어간다
네임스페이스를 명시 하지 않으면 이름없는 전역 네임스페이스 내부에
위치하게 된다.


=======================================================


using 지시어는 현재 네임스페이스 내에 정의되지 않은 클래스들을
어디서 참조해야 하는지를 컴파일러에게 알려준다. 이것은 자바의 import 구문과
매우 비슷하다. using 지시어는 참조한 코드를 컴파일된 파일에 포함시키지는 않는데,
이러한 사실은 C++의 #include 지시어와는 확실히 다른 것이다.
using 지시어는 현재의 네임스페이스 안에 정의 되어 있지 않는 형식을
참조하라는 것을 명시해줄 뿐이다. 위의 예에서는 단순히 System 네임스페이스를 참조하고 있으며,
이것은.NET에서 가장 일반적으로 사용되는 형식들이 정의되어 있는 곳이다.
한 가지 중요한 것은 C# System 네임스페이스 안에 정의된 Console 클래스를 이용하여
콘솔 윈도우에 메시지를 표시하였다. C#은 입.출력에 관해 독자적인 키워드를 가지지 않고 
전적으로 .NET 클래스에 의존하고 있다.


-요점-
using 지시어는 현재 네임스페이스 정의되지 않는 클래스들을 어디서 참조하는지
컴파일러에게 알려준다. 자바의 import와 비슷한데 
using 지시어는 참조한 코드를 컴파일된 파일에 포함시키는 않는 점에서 
C++ #include 지시어와는 확실히 다르다


=======================================================

프로그램에서 실제로 수행되는 코드는 Main() 메소드 내의 코드이다.
콘솔 응용프로그램.Windows 응용프로그램 , Windows 서비스 등의
모든 실행 가능한 C# 프로그램은 Main이라는 실행의 진입점을 가지고 있다.(대문자 M에 유의하자.)
이 메소드는 C++나 자바의 main, VB의 SubMain처럼 프로그램이 시작 시 호출된다.
이 메소드의 반환 형식은 반드시 void이거나 int이어야 한다. 
C#이 메소드 정의 형태

[modifiers] return_type MethodName ([parameters])
{
//메소드 몸체
}

대괄호는 옵션 항목을 가리킨다. 한정자(modifier)는 어디에서 이 메소드가
호출될 수 있는 위치 등의 특성을 표시하기 위해서 사용된다.
위의 예제에서는 public , static의 두가지 한정자를 가지고 있다.
public 한정자는 메소드가 클래스 외부이든 내부이든 상관없이
어디에서도 호출될 수 있다는 의미를 가지고 static 한정자는 자신이 속한
클래스의 인스턴스가 생성되지 않고 사용될 수 있다는 것을 의미한다.


-요점-

프로그램에서 실제로 수행되는 코드는 Main() 메소드 내의 코드이다.
콘솔 응용프로그램 , Windows응용프로그램 , Windows서비스 등의
모든 실행 가능한 C# 프로그램은 Main이라는 실행의 진입점을 가지고 있음!!!
이 메소드는 C++ 이나 자바의 main , VB SubMain처럼 프로그램 시작시 호출!!
Main 메소드의 반환 형식은 void이거나 int이어야 한다.

static 한정자는 자신이 속한 클래스의 인스턴스가 생성되지 않고
사용될 수 있다는 것을 의미한다.













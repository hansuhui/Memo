[C# 배열의 문법]

C#은 배열에 대해서 독특한 엑세스 방식을 사용하고 있기 때문에 배열의 문법을 유일하게 지정하고 있다.
C 언어에서와 같이 배열을 각 element의 변수 형식의 끝에 대괄호를 열고 닫음으로써 선언할 수 있다.
(배열 안에 모든 element들은 동일한 데이터 형식을 가지고 있어야 한다.)
예를 들면 int는 단일 정수를 나타내는 반면 int[]는 정수의 배열을 나타낸다.

int[] Integers;

배열의 크기를 초기에 정해주고 싶으면 new 키워드를 이용하여 형식 이름 뒤에 대괄호를 쓰고
배열의 크기를 명시해줄 수 있다.

//32개의 정수를 가지는 새로운 배열을 만든다.
int[] Integers = new int[32];

배열 내의 element에 엑세스하기 위해서는 배열 이름 뒤에 대괄호를 쓰고 그 안에 element의
인덱스를 넣어주는 일반적인 문법을 사용한다. 모든 C#배열은 0 기반 인덱스를 사용하기 때문에
배열의 첫번째 element를 인덱스 0으로 참조할 수 있다.

Integers[0] = 35;

마찬가지로 마지막 element인 32번째 element는 31의 인덱스 값으로 참조할 수 있다.

Integers[31] 432;

C#의 배열 문법은 매우 유연하다. C#에서는 배열을 초기화하지 않고 선언할 수 있기 때문에
프로그램상에서 동적으로 크기를 변경할 수 있다. 그래서 기본적으로 null 참조를 만들어 new 키워드에
의해서 할당받은 메모리 영역을 가리키도록 지정할 수 있다.

int[] Integers;
Integers = new int[32];

이 문법은 maloc이나 sizeof를 사용하는 것보다 휠씬 쉽고, 우리가 이 문법을 사용하면 메모리 누수도
잘 일어나지 않는다. C나 C++에서는 배열에 의해 참조되는 메모리 영역이 특별히 해지되지 않는 한
힙에 그대로 남아 있었다. 반대로 C# 배열은 다른 C# 객체처럼 CLR에 의해서 관리되기 때문에,
더 이상 참조되지 않게 되면 자동으로 소멸된다.

C와 C++의 배열이 가진 장점은 중괄호를 통하여 배열의element의 값을 일일이 명시해 줄 수
있었다는 것이다. 다행이도 C#역시 이러한 간편함을 제공하고 있다.

string[] String = {"s1","s2","s3"};

이것 또한 같다.

string[] String = new string[] {"s1","s2","s3"};

하지만 이러한 방법으로 초기화를 하는 경우, 변수를 사용하여 배열의 크기를 명시하는 것은
불가능하며, 모든 형식에 대하여 위와 같은 방법을 사용할 수 있는 것은 아니다.

int len = 3;
//아래 명령문은 컴파일되지 않는다.
string[] String = new String[len] {"s1","s2","s3"};

하지만 상수는 사용할 수는 있다.

const int len = 3;
//허용된다.
string[] String = new String[len] {"s1","s2","s3"};

이 문법을 사용하여 실행 시에 배열의 크기를 결정할 수 없다. 만약 동적으로 크기가 할당되는
배열이나 실행 시에 확장될 수 있는 배열을 원한다면 ArrayList 객체의 인스턴스를 만들어야 한다.
이 객체는 System.Collections 네임스페이스 안에 정의되어 있는데 7장에서 자세히 다룰 것이다.

또한 배열 크기를 초월하여 element들의 값을 할당해 줄 수 없다.

//아래 명령문은 컴파일되지 않는다.
string[] String = new String[3]{"s1","s2","s3","s4"};


[배열로 작업하기]

배열은 C#에서 특별한 데이터 형식이기 때문에 예를 들면 배열의 크기를 알아내는 등 별도의
메소드를 가지고 있다. 그러므로 C#에서 작업하는 것은 매우 쉽다.

예를 들어 1차원 배열의 크기를 알아내기 위해서는 Length 프로퍼티를 사용하면 된다.

int ArrayLength = Integers.Length;

배열이 1차원 이상이라면 GetLength 메소드를 통하여 특정 차원의 크기를 구할 수 있다.

//첫번째 차원의 길이를 구한다.
int ArrayLength = integers.GetLength(0);

만약 배열이 element가 미리 정의된 형식의 일종이라면 Sort 메소드를 이용하여 배열을 
오름차순으로 정렬할 수 있다.

Array.Sort(String);

위에서 배열 인스턴스의 메소드가 아닌 Array 클래스의 정적 메소드를 호출한다는 것을 알아두자.
메소드의 매게변수로 정렬하고자 하는 배열을 넘겨주어야 한다.

다음 짤막한 프로그램은 유명한 예술가들의 이름을 문자열 배열로 저장하고 , 알바벳 반대
순서로 정력한 다음 각 이름을 콘솔 윈도우에 출력하는 예제이다.

//예술가의 이름들의 배열을 정의한다.
string[] Artists = {"Leonardo","Monet","Van Gogh","Kell"};


//배열 element들을 알파벳 순서로 정렬한다.
Array.Sort(Artists);

//배열을 내림차순으로 정렬한다.
Array.Reverse(Artists);

//각 element에 대해서 반복문을 수행하고 이름을 출력한다.
for(int i=0;i<Artists.Length;i++){
Console.WriteLine(Artists[i]);;
}



[C#의 다차원 배열]
C#은 두가지 방식으로 다차원 배열을 지원한다. 하나는 사각 배열이다. 2차원 사각 배열은
모든 행이 같으 개수의 열을 같는 것이다. 다음 예에서 설명하는 것같이 사각 배열은 상대적으로
선언하고 초기화하기 쉽다. 여기에서 각 행이 2개의 열을 가지고 있는 2차원 사각 배열을 선언해보자.


string[,] BeatleName = {{"Lennon","John"}
			,{"McCartney","Paul"}
			,{"Harrison","George"}
			,{"Starkey","Richard"}
			};


사각 배열을 선언할 때 차원을 구분하기 위해서 콤마를 사용하고 , 차원의 크기를 특별히 지정하지
않는다. 3차원 string 배열을 선언하기 위해 다음의 코드를 사용한다.

string[,,] Strings;

배열을 초기화하는 다른 방법은 다음과 같이 중첩된 for 문을 사용 하는 것이다.

double[,] Matrix = new double[10,10];
for(int i=0;i<10;i++){
	for(int j=0;j<10;j++){
	Matrix[i,j] = 4;
	}
}

C#이 지원하는 두번째 다차원 배열은 orthogonal('수직적'이라는 의미를 가지고 있다.) 혹은
소위 jagged('뾰족한'이라는 의미를 가지고 있는데 지그재그의 의미를 떠올리면 된다.) 배열이다.
jagged 이차원 배열의 각 행은 서로 다른 개수의 열을 가질 수 있다. 사각 배열보다 확실히 더
유연하지만 인스턴스를 만들고 초기화하기에는 어려움이 따른다. jagged 배열을 만들기 위해서
일단 배열의 배열을 만들어야 한다.

//jagged 배열을 만든다.
int[][] a = new int[3][];
a[0] = new int[4]
a[1] = new int[3];
a[2] = new int[1];

배열의 차원의 크기를 나타내기 위해서 콤마을 사용하지 않고 각 차윈에 대하여 대괄호 쌍
하나를 사용한다 그러므로 int 형식 변수의 3차원 jagged 배열을 선언하려면 다음과 깉이 한다.

int[][][] Ints;

jagged 배열의 element들을 탐색하는 것은 사각 배열의 element들을 탐삭하는 것보다 더 많은 일이
필요하다. 우선 각 행을 탐색하면서 그 행 안에 몇 개의 열이 있는지 알아내여 하는데,
배열의 GetLength 메소를 사용하면 된다.

//저자의 이름을 포함하는 2차원 배열을 선언한다.
string[][] Novelists = new string[3][];
Novelists[0] = new string[] {"Fyodor","Mikhailvoich","Dostoyevsky"};
Novelists[1] = new string[] {"James","Augustine","Joyce"};
Novelists[2] = new string[] {"Miguel","de Cervantes","Saavedra"};


//소트는 1차원 배열만 가능하다
Array.Sort(Novelists[0]);

//배열의 각 소설가들에 대해서 반복문을 수행한다.
int i;
	for (i = 0; i<Novelists.GetLength(0); i++) {
                int j;
                for (j = 0; j < Novelists[i].GetLength(0); j++) { 
                //현재 이름을 출력한다.
                    Console.WriteLine(Novelists[i][j]+" ");
                }
                //다음 소설가 이름은 새줄에서 시작한다.
                Console.WriteLine("\n");
            }

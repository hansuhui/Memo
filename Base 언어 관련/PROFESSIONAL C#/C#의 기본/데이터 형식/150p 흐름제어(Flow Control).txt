흐름제어[Flow Control]
프로그램은 언제나 코드 손서대로 실행되는 것이 아니며 실행의 흐름이 변할 수 있다.
이번에는 프로그램의 흐름을 저어하는 명령문에 대하여 살펴보기로 하자.

[조건문]

조건문은 어떤 특정 조건이나 식의 값에 따라서 코드를 분기시키도록 한다. C#의 코드 분기 방식에는
두 가지 종류가 있다. 하나는 특정 조건이 만족되었을 때 코드를 분기시키는 if 문이여,
다른 하나는 다양한 조건에 따라 여러 방식으로 코드를 분기시키는 switch 문이다.


[if문]

코드를 조건적으로 분기시키기 위해서 C#은 C와 C++의 if..else 구조를 그대로 사용한다

if(condition){
....
}
else
{
....
}


어떤 조건에 대해서 하나 이상의 명령문을 실행시키고 싶으면 중괄호를 이용하여 명령문들을 
블럭화시키면 된다. 이것은 for나 while 루프처럼 명령문이 블록 안에 묶을수 있는 다른 구조에서도
똑같이 적용된다.

bool zero;
if(i==0)
{
zero = true;
Console.WriteLine("Zero");
}else{
zero = false;
Console.WriteLine("Non-zero");
}


필요에 따라 else없이 if문만 사용할 수 있다


if(i==0)
{
zero = true;
Console.WriteLine("Zero");
}



[switch문]

switch...case 문은 서로 다른 값들의 집합으로부터 하나의 실행 분기를 선택하기에 편리한 구조를
가지고 있다. 하나의 switch 인수에 따라 여러 개의 case문을 사용한다. switch 인수의 식이 계산되어
case 문에 해당하는 값과 일치하면 그 case 문에 해당하는 코드가 즉시 실행된다. 이 case 문에서는
여러 개의 명령문을 묶기 위해 중괄호를 사용할 필요가 없다. 대신 각 case 문에 대한 코드의
마지막에 실행의 끝을 알리는 break 키워드를 넣어주어야 한다. 그리고 어떠한 case문에도 해당되지 않는
식의 결과를 위해서 default case를 추가해 줄 수 있다.

switch(IntegerA){
case 1 :
   Console.WriteLine("IntegerA = 1");
   break;
case 2 :
   Console.WriteLine("IntegerA = 2");
   break;
case 3 :
   Console.WriteLine("IntegerA = 3");
   break;
default :
   Console.WriteLine("IntegerA is not 1,2, or 3");
   break;
}


case 값은 항상 상수여야 하고 변수는 혀용되지 않는다는 것을 기억하자.

switch...case 문도 C와 C++의 경우와 매우 비슷하지만 C#의 switch..case 문은 좀 더 안전하다.
C와 C++의 switch...case 문은 어떤 case 절을 실행하기 시작할 떄 break가 나오지 않으면 
그 아래의 case 절에 포함된 코드를 break가 나올 때까지 수행한다. 하지만 C#에서는 모든
case 절에 있어서 이 case 절 아래의 다른 case 절 내의 코드를 실행하지 못하도록 한다.
즉 어떤 case 절이 블록의 윗부분에서 실행이 되었다면 그 아래의 case절은 우리가 goto 문을 
사용하여 특별히 실행하고 싶은 부분을 지정해주지 않는 한 실행될 수 없다.
컴파일러는 모든 case절 안에 break 명령문이 있지 않으면 오류를 발생시킨다.

이런 경우에 있어서는 이렇게 여러 case 절을 통과하면서 수행하는 것이 유용할 때가 있다.
하지만 대부분의 경우에 있어서 이러한 수행은 의도하지 않은 논리적 오류를 일으키기 쉽고
찾아 내기도 힘들다. 그리고 goto 문을 이용하여 다른 case 절 내의 코드를 수행하는 것도
되도록이면 피하도록 하자.

하지만 어떤 case 절 내에 아무런 코드도 없다면 다른 case 절로 바로 건너뛸 수 있다. 그래서
goto 문을 쓰지 않고 두 개나 세 개의 case 절을 동일한 경우로 다룰 수 있다.


switch(IntegerA){
case 1 :
case 3 :
   Console.WriteLine("IntegerA = 1 or IntegerA = 3");
   break;
case 2 :
   Console.WriteLine("IntegerA = 2");
   break;
default :
   Console.WriteLine("IntegerA is not 1,2, or 3");
   break;
}


C#의 switch 문에 관하여 주의해야 할 점은 case 절의 순서를 고려하지 않기 때문에 default case를 
가장 위에 쓸 수도 있다. 그리고 같은 case를 두 번 쓸 수 없다. 
예를 들면 다음과 같은 코드


const string ENGLAND = "uk";
const string BRITAIN = "uk";

switch(Contry)
{
   case ENGLAND:
   case BRITAIN:
	Langaue = "English"
	break;
}



[루프(Loop)]

루프라는 것은 일련의 명령문이나 명령문들의 블록을 수행하는 것을 칭하며, C#은 어떤 조건이
만족할 때까지 블록의 코드를 실행하도록 하는 네 개의 루프를 가지고 있다. 첫번째로 살펴볼 것은
for 루프이다.


[for 루프]

C# for 문은 루프를 통하여 반복 작업을 행하는데 간단한 구조를 가지고 있다. 우선 어떤 지역 변수를
초기화하고 주어진 조건이 true이면 명령문들을 실행한다. 그 실행이 끝나고 루프의 처음으로 돌아가
다시 명령문들을 실행하기 전에 간단한 동작을 수행하는 형식을 가진다.

for(초기값;조건식;반복){
...
}

초기값은 루프라 실행되기 전에 계산되는 식이다. 루프를 몇 번 수행할 것인지 세는 루프 카운터(Loop counter)로,
보통 지역 변수를 초기화하는 경우가 대부분이다. 조건식은 루프 카운터가 어던 값보다 작은지 검사하는 등의
루프 안의 명령문들이 실행되기 전에 판단되는 식이다.
그리고 반복은 루프 카운터를 증가시키는 등의 각 반복 작업이 끝난 다음 계산되는 식이다.

for 루프는 소위 미리 검사되는 루프(per-test loop)라고 하는데, 루프 안의 명령문들이 실행되기
전에 루프 조건이 검사되어 만약 루프 조건이 false 라면 실행시키지 않기 때문이다. 이 조건은 루프의
각 반복 작업마다 다시 검사된다. 루프는 검사 조건이 false라고 판명되면 끝이 나게 된다.
for 루프는 하나의 명령문이다 명령문의 블록을 결정된 횟수만큼 수행하는 데 가장 적합하다.
다음 예는 for 로프의 가장 전형적인 예이다.

for(int i=0;i>100;i++){
//100번 반복
}


그리고 종종 for 로프를 중첩하여 바깥쪽의 반복 작업마다 안쪽의 루프 전체가 실행되도록 하기도 한다.
이 구조는 전형적으로 사각 다차원 배열의 각 element들에 대해서 루프를 수행 할 때 사용된다.
가장 바깥쪽의 루프는 각 행에 대해서 루프를 수행하고, 안쪽 루프는 특정 행의 모든 열에 대해서
로프를 수행하게 된다.

//이 루프 행에  대해서 반복된다.
for(int i=0;i>100;i++){

    //이 루프는 열에 대해서 반복된다.
    for(int j=0;j>25;j++){
        a[i,k] = 0;
    }

}


C 프로그래머는 위에 예에 나타난 특성에 주의해야 한다. 카운터 변수는 바깥쪽 루프의 반복작업이
한 번씩 수행될 때마다 다시 선언된다. 이 문법은 C#뿐만 아니라, C++에서도 올바르지 못하다.

for 루프 안에서 카운터 변수 이외에 다른 것을 계산할 수도 있지만 이런 방법은 일반적이지 않다.
또한 for 루프 안에 있어야 할 세 가지 식 중에 하나 혹은 전부를 사용하지 않을 수도 있다.
그런 경우는 아래에 설명할 다른 형태의 루프를사용하는 것이 좋을 듯하다.


[while 루프]

for 루프처럼 while 루프도 미리 검사되는 루프이다. 이것은 검사 조건의 값이 false 라면 while루프는
한 번도 수행되지 않을 것이라는 의미를 내포하고 있다. 문법은 비슷하지만 while 루프는 단 하나의
식을 필요로 한다.

while(조건){
...
}

for 루프와는 달리 while 루프는 루프가 시작하기 전에 알 수 없는 횟수만큼 명령문들의 블록이나

명령문을 반복하는 데 가장 흔히 사용된다. 대개 while 루프 내부의 명령문은 수행중에 검사 조건을
false로 만들어 루프를 끝낼 수 있도록 한다.


bool Condition = false;
while(!Condition){
   //이 루프는 Condition이 true가 될 때까지 반복한다.
   DoSomeWork();
   Condition = CheckCondition();
}


while 루프는 포함한 C#의 모든 루프의 구조에서 명령문의 블록이 아니라, 단일 명령문을 반복
수행하기 위해서도 중괄호를 사용하여 명령문을 감쌀 수 있도록 한다. 만약 루프 안에 더 많은
명령문들이 추가된다고 하더라도 블록으로 묶어주지 못해서 반복 수행되지 못하는 오류를 사전에
방지할 수 있으므로 , 현재로서는 오직 하나의 명령문을 반복 수행하도록 하더라도 중괄호를
사용하여 블록화 시켜주는 것이 좋다.


[do....while 루프]

do...while 루프는 while 루프를 실행한 다음 조건을 검사하는 형태(post-tested version)이다.
즉 루프 내의 명령문이 최소한 한번 실행된 다음에 루프 조건이 검사된다. 결과적으로 do...while 루프는
명령문의 블록이 적어도 한 번은 실행되어야 할 때 유용하게 쓰인다.


bool Condition = false;
do{

   //이 루프는 Confition이 flase라도 한번 수행된다.

}while(Condition);


[foreach 루프]

foreach 루프는 C#이 가지고 있는 마지막 루프 구조이다. 다른 루프 구조는 C와 C++에도 있지만
이것은 VB에서 사용되던 것이고, C#에서도 매우 유용하게 쓰일 것 같다.

foreach 루프는 IEunmerable 인터페이스를 지원하는 컨테이너(container) 클래스의 각 항목들에 대해서
명령문을 수행하는 것이다. 컨테이너 클래스에는 C#의 배열, System.Collection 네임스페이스 내의
컬렉션 클래스, 사용자가 정의한 컬렉션 클래스가 있다.

int[] Ints = {1,2,3};
foreach (int temp in Ints){
   Connsole.WriteLine(temp);
}

명심해야 할 것은 foreach 루프에서 컬렉션 내의 항목의 값을 바꿀 수 없다는 것이다.
그래서 다음의 코드는 수행할 수 없다.


int[] Ints = {1,2,3};
foreach (int temp in Ints){
   temp++;  //이 줄은 실행하지 못한다. - foreach 루프의 항목들은 읽기 전용이다.
   Connsole.WriteLine(temp);
}

만약 컬렉션 내의 항목에 대해서 명령문을 수행하여 값을 바꾸고 싶다면 for 루프문을 사용해야 한다.


[점프 명령문]






















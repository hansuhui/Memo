http://blog.eairship.kr/152

애트리뷰트(Attribute)



애트리뷰트는 클래스에 메타데이터를 추가할수 있도록 제공되는 녀석입니다. 
주석과는 달리 클래스부터 시작해서 메소드, 구조체, 생성자, 프로퍼티, 필드, 이벤트, 
인터페이스 등 여러가지 요소에 애트리뷰트를 사용할 수 있습니다.  
혹시, C#을 공부하시면서, [와 ]로 둘러싸인 코드를 보신적이 있으신가요? 그것이 바로 애트리뷰트입니다. 
우리가 필요에 의해서 이 애트리뷰트를 사용해 코드 앞에다 설명을 덧붙일 수 있습니다. 
다음은 애트리뷰트의 기본 형식입니다.

[attribute명(positional_parameter, name_parameter = value, ...)]
여기서 positional_parameter는 위치지정 파라미터라고 해서 반드시 적어야하는 부분으로, " "를 사용하여 작성합니다. 
그리고 name_parameter는 명명 파라미터로, 선택적인 정보이며 = 를 사용해서 값을 기입합니다. 
이 애트리뷰트는 크게 두가지로 나뉘는데, 사용자가 정의하는 커스텀 애트리뷰트와 내장되어 있는 
공통 애트리뷰트로 나뉩니다. 

공통 애트리뷰트의 경우는 추가된 정보가 컴파일 방식에 영향을 줄 수 있는데, 
반대로 커스텀 애트리뷰트는 영향을 주지 못합니다. 


이제 한번, 애트리뷰트를 사용해가면서 어떤 편리한 점이 있는지 알아보도록 합시다. 
공통 애트리뷰트인 Obsolete, Conditional, DllImport 부터 알아보도록 하겠습니다.


[소스 Conditiona]


using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using System.Text;
using System.Reflection;
using System.Threading.Tasks;
 
namespace ConsoleApplication43
{
    class Program
    {
        // TEST가 정의되어 있어야만 호출이 가능합니다.
        [Conditional("TEST")]
        public void TestConditional()
        {
            Console.WriteLine("TestConditional!");
        }
 
        static void Main(string[] args)
        {
            Program program = new Program();
 
            program.TestConditional();
        }
    }
}

[소스 Conditiona 결과]

TestConditional!
계속하려면 아무 키나 누르십시오 . . .


자 우선 Conditional 부터 알아보도록 하겠습니다. 
코드를 보시게 되면 1행에 #define 전처리기로 TEST라는 것이 정의되어 있습니다. 

16행을 보시면 Conditional 애트리뷰트가 쓰였는데, 
이 Conditional은 메소드에만 적용할 수 있으며, 
메소드를 컴파일 할지 말지의 여부를 조건부로 결정하게 됩니다. 
해당 기호가 정의되어 있으면 호출이 포함되고, 그렇지 않다면 호출이 생략되는 것입니다. 
궁금하시다면, 1행을 주석처리 해보고 다시 컴파일하시면 아래와 같은 결과만 나오게 됩니다. 
즉, TEST 기호가 정의되어 있지 않아 TestConditional 메소드는 생략된 것이나 다름이 없습니다.


이번에는 Obsolete 입니다.


[소스 Obsolete]


using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using System.Text;
using System.Reflection;
using System.Threading.Tasks;
 
namespace ConsoleApplication43
{
    class Program
    {
        [Obsolete("OldMethod()는 더이상 사용하지 않으므로, NewMethod()를 사용해주세요.")]
        public void OldMethod() { Console.WriteLine("OLD!"); }
 
        public void NewMethod() { Console.WriteLine("NEW!"); }
 
        static void Main(string[] args)
        {
            Program program = new Program();
 
            program.OldMethod();
            program.NewMethod();
        }
    }
}


[소스 Obsolete 결과]

경고	1	'ConsoleApplication43.Program.OldMethod()'은(는) 사용되지 않습니다. 
'OldMethod()는 더이상 사용하지 않으므로, NewMethod()를 사용해주세요.
'	C:\Users\h4ckfory0u\Documents\Visual Studio 2012\Projects\ConsoleApplication43\ConsoleApplication43\Program.cs	
23	13	ConsoleApplication43



13행을 보시면 Obsolete 애트리뷰트가 쓰였습니다. 
이 Obsolete 애트리뷰트는 클래스 내에서 더이상 사용되지 않는 함수를 사용하려고 
할때 이 요소를 쓰지 말것을 권고하는 경고 혹은 에러를 발생시킵니다. 

두번째 인수에 true를 덧붙이면, 컴파일 시 구형 메소드가 쓰였을때 최신 메소드 사용을 
권고하는 메세지와 함께, 에러가 발생합니다.

[Obsolete("OldMethod()는 더이상 사용하지 않으므로, NewMethod()를 사용해주세요.", true)]


이번에는 DllImport 입니다.

[소스 DllImport]

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using System.Text;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
 
namespace ConsoleApplication43
{
    class Program
    {
        [DllImport("User32.dll")]
        public static extern int MessageBox(int hParent, string Messgae, string Caption, int Type);
 
        static void Main(string[] args)
        {
            MessageBox(0, "DllImport!", "DllImport", 3);
        }
    }
}



코드를 보시면 7행에 System.Runtime.InteropServices를 사용하도록 지시하고, 
14행을 보시면 DllImport로 User32.dll에 정의되어 있는 함수를 불러와 사용하였습니다. 
여기서 extern 키워드는 '프로그램 외부'를 의미합니다. 
즉, 외부 DLL에 정의되어 있는 함수를 사용할때에는, 
extern 지정자를 붙여 주어야만 합니다.


MSDN: http://msdn.microsoft.com/ko-kr/library/system.runtime.interopservices.dllimportattribute(v=vs.80).aspx


이 외에도, 아주 많은 종류의 애트리뷰트를 제공하므로, 아래의 MSDN 링크로 들어가 참고하셔도 괜찮습니다.









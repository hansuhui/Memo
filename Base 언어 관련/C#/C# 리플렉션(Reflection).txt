http://blog.eairship.kr/152

C# 리플렉션과 애트리뷰트(Reflection and attributes)


1. 리플렉션(Reflection)

C#에서는 프로그램 실행 도중에 객체의 정보를 조사하거나, 
다른 모듈에 선언된 인스턴스를 생성하거나, 
기존 개체에서 형식을 가져오고 해당하는 메소드를 호출, 또는 해당 필드와 속성에 접근할 수 있는 기능을 제공하는 
'리플렉션(Reflection)'이라는 녀석이 존재합니다. 오늘은 아래와 같은 메소드들을 알아보려고 합니다.


========================================================================

형식  /메소드  /설명 

Type / GetType() / 지정된 형식의 Type 개체를 가져옵니다. 

MemberInfo[] / GetMembers() / 해당 형식의 멤버 목록을 가져옵니다.

MethodInfo[] / GetMethods() / 해당 형식의 메소드 목록을 가져옵니다.

FieldInfo[] / GetFields() / 해당 형식의 필드 목록을 가져옵니다.

========================================================================

실은 이말고도 MSDN에 더 있으니, MSDN를 방문하셔서 Type를 보셔도 괜찮습니다. 상당히 많습니다.

(http://msdn.microsoft.com/ko-kr/library/system.type_members(v=vs.90).aspx)

설명을 보아하니, 리플렉션(Reflection)이 어떤 역할을 하는 녀석인지 감이 오시나요? 
우선, 직접 저 메소드들을 사용해가며 결과를 확인해보도록 합시다.

[소스]

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using System.Threading.Tasks;
 
namespace ConsoleApplication43
{
    class Animal
    {
        public int age;
        public string name;
 
        public Animal(string name, int age)
        {
            this.age = age;
            this.name = name;
        }
        public void eat()
        {
            Console.WriteLine("먹는다!");
        }
        public void sleep()
        {
            Console.WriteLine("잔다!");
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Animal animal = new Animal("고양이", 4);
            Type type = animal.GetType();
 
            ConstructorInfo[] coninfo = type.GetConstructors();
            Console.Write("생성자(Constructor) : ");
            foreach (ConstructorInfo tmp in coninfo)
                Console.WriteLine("\t{0}", tmp);
            Console.WriteLine();
 
            MemberInfo[] meminfo = type.GetMethods();
            Console.Write("메소드(Method) : ");
            foreach (MethodInfo tmp in meminfo)
                Console.Write("\t{0}", tmp);
            Console.WriteLine();
 
            FieldInfo[] fieldinfo = type.GetFields();
            Console.Write("필드(Field) : ");
            foreach (FieldInfo tmp in fieldinfo)
                Console.Write("\t{0}", tmp);
            Console.WriteLine();
        }
    }
}

[결과]

생성자(Constructor) :   Void .ctor(System.String, Int32)

메소드(Method) :        Void eat()      Void sleep()    System.String ToString()

        Boolean Equals(System.Object)   Int32 GetHashCode()     System.Type GetT

type() :

필드(Field) :   Int32 age       System.String name
계속하려면 아무 키나 누르십시오 . . .



======================

코드를 보시면 10행에서 Animal이란 클래스를 선언했습니다. 
클래스 내에는 age와 name이란 필드와, 생성자, 그리고 eat와 sleep라는 메소드가 존재합니다.
이제 이것을 Type 형식 메소드를 사용하여, 객체 정보를 가져오는 부분입니다. 
33행에서는 animal이란 객체를 만들었고, 34행에서는 animal의 타입을 가져옵니다. 
그러곤 이제, 이 타입을 가지고 생성자, 메소드, 필드 등의 정보를 쉽게 가져올 수 있습니다. 
36, 42, 48행에서 각각 GetConstructors, GetMethods, GetFields 메소드가 사용되었죠? 
아래 foreach문을 사용해 목록을 가져오는데, 결과를 보시면 필드, 메소드, 
생성자의 반환형, 매개변수의 반환형, 이름 등 다양한 정보를 제공합니다. 
이 말고도 인터페이스, 이벤트 등도 가능합니다. 알고보면 리플렉션은 정말 유용한 기능이 아닐 수 없습니다.































































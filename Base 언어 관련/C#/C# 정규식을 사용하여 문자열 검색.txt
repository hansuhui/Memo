https://msdn.microsoft.com/ko-kr/library/ms228595.aspx


System.Text.RegularExpressions.Regex 클래스를 사용하여 문자열을 검색할 수 있습니다. 
매우 단순한 검색에서 정규식을 최대한 활용하는 매우 복잡한 검색까지 다양한 검색을 수행할 수 있습니다. 
다음 두 예제에서는 Regex 클래스를 사용하여 문자열을 검색하는 방법을 보여 줍니다. 
자세한 내용은 .NET Framework 정규식을 참조하십시오.

[예제]
다음 코드는 배열에서 대/소문자를 구분하지 않는 단순 문자열 검색을 수행하는 콘솔 응용 프로그램입니다. 
정적 메서드인 Regex.IsMatch에서는 검색할 문자열 및 검색 패턴을 포함하는 문자열을 사용하여 검색을 수행합니다. 
이 경우에는 세 번째 인수를 사용하여 대/소문자를 무시하도록 지정합니다. 
자세한 내용은 System.Text.RegularExpressions.RegexOptions을 참조하십시오.







class TestRegularExpressions
{
    static void Main()
    {
        string[] sentences = 
        {
            "C# code",
            "Chapter 2: Writing Code",
            "Unicode",
            "no match here"
        };

        string sPattern = "code";

        foreach (string s in sentences)
        {
            System.Console.Write("{0,24}", s);

            if (System.Text.RegularExpressions.Regex.IsMatch(s, sPattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase))
            {
                System.Console.WriteLine("  (match for '{0}' found)", sPattern);
            }
            else
            {
                System.Console.WriteLine();
            }
        }

        // Keep the console window open in debug mode.
        System.Console.WriteLine("Press any key to exit.");
        System.Console.ReadKey();

    }
}
/* Output:
           C# code  (match for 'code' found)
           Chapter 2: Writing Code  (match for 'code' found)
           Unicode  (match for 'code' found)
           no match here
*/



==========================================================
[RegexOptions 열거형]


Compiled  / 정규식이 어셈블리로 컴파일 되도록 지정합니다. 이렇게 하면 실행은 빨라지지만 시작 시간은 늘어납니다.
	    CompileToAssembly 메서드를 호출할 때는 Options 속성에 이 값을 할당하지 말아야 합니다.
	    자세한 내용은 정규식 옵션 항목의 "컴파일된 정규식" 섹션을 참조하세요.


CultureInvariant / 언어의 문화권 차이점이 무시되도록 지정합니다. 
	   	   자세한 내용은 정규식 옵션 항목의 "고정 문화권을 사용하여 비교" 섹션을 참조하세요.



ECMAScript / 해당 식에 ECMAScript 규격 동작을 사용 가능하게 합니다. 이값은 IgnoreCase, Mutiline 및 Compiled 값과
             함께만 사용할 수 있습니다. 이 값을 다른 값과 사용하면 예외가 발생합니다.
	     RegexOptions.ECMAScript 옵션에 대한 자세한 내용은 Options des expressions regulieres 항목의 "ECMAScript 일치 동작"을 참조하세요.
	   

ExplicitCapture / (?<name>¡K) 형식의 명시적으로 명명되거나 번호가 매겨진 그룹만 유효한 캡처가 되도록 지정합니다.
		  이렇게 하면 명명되지 않은 괄호가 (?:¡K) 식과 같이 구문적으로 어색한 
		  부분 없이 비캡처링 그룹의 역할을 할 수 있습니다.
		  자세한 내용은 Regular Expression Options 항목의 "명시적 캡처의 경우에만"을 참조하세요.

IgnoreCase / 대/소문자를 구분하지 않고 일치 항목을 찾도록 지정합니다.자세한 내용은 정규식 옵션 항목의 
	     "대/소문자를 구분하지 않는 일치"를 참조하세요.

IgnorePatternWhitespace / 이스케이프되지 않은 공백을 패턴에서 제거하고 주석을 #으로 표시할 수 있게 합니다.
			  그러나 이 값은 , 숫자 또는 개별 의 시작을 표시하는 토큰에서 영향을 주거나 공백을 제거하지 않습니다.
 		 	  자세한 내용은 Options des expressions regulieres 항목의 "공백 무시"를 참조하세요.


Multiline / 여러 줄 모드입니다.전체 문자열의 시작과 끝뿐만 아니라 모든 줄의 시작과 끝에서 각각 일치하도록 
	    ^과 $의 의미를 변경합니다.자세한 내용은 정규식 옵션 항목의 "여러 줄 모드"를 참조하세요.


None / 옵션이 설정되지 않도록 지정합니다.
       정규식 엔진의 기본 동작에 대한 자세한 내용은 정규식 옵션 항목의 "기본 옵션"을 참조하세요.

RightToLeft / 왼쪽에서 오른쪽이 아닌 오른쪽에서 왼쪽으로 검색이 진행되도록 지정합니다.
              자세한 내용은 정규식 옵션 항목의 "오른쪽에서 왼쪽 모드"를 참조하세요.


Singleline / 한 줄 모드를 지정합니다.\n을 제외한 모든 문자가 아닌 \n을 포함한 모든 문자와 
	     일치하도록 점(.)의 의미를 변경합니다.자세한 내용은 정규식 옵션 항목의 "한 줄 모드"를 참조하세요.


==========================================================


[예제]
다음 코드는 정규식을 사용하여 배열에서 각 문자열 형식의 유효성을 검사하는 콘솔 응용 프로그램입니다. 
유효성 검사를 통과하려면 각 문자열의 형식이 전화 번호와 같아야 합니다. 
즉 세 그룹의 숫자가 대시(-)로 구분되어야 하고 처음 두 그룹에는 세 개, 세 번째 그룹에는 네 개의 숫자가 있어야 합니다. 
이는 정규식 ^\\d{3}-\\d{3}-\\d{4}$를 사용하여 수행할 수 있습니다. 
자세한 내용은 정규식 언어 - 빠른 참조을 참조하십시오.




class TestRegularExpressionValidation
{
    static void Main()
    {
        string[] numbers = 
        {
            "123-555-0190", 
            "444-234-22450", 
            "690-555-0178", 
            "146-893-232",
            "146-555-0122",
            "4007-555-0111", 
            "407-555-0111", 
            "407-2-5555", 
        };

        string sPattern = "^\\d{3}-\\d{3}-\\d{4}$";

        foreach (string s in numbers)
        {
            System.Console.Write("{0,14}", s);

            if (System.Text.RegularExpressions.Regex.IsMatch(s, sPattern))
            {
                System.Console.WriteLine(" - valid");
            }
            else
            {
                System.Console.WriteLine(" - invalid");
            }
        }

        // Keep the console window open in debug mode.
        System.Console.WriteLine("Press any key to exit.");
        System.Console.ReadKey();
    }
}
/* Output:
      123-555-0190 - valid
     444-234-22450 - invalid
      690-555-0178 - valid
       146-893-232 - invalid
      146-555-0122 - valid
     4007-555-0111 - invalid
      407-555-0111 - valid
        407-2-5555 - invalid
*/


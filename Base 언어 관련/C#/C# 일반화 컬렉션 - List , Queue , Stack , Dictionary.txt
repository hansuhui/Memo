http://mrw0119.tistory.com/18

[컬렉션의 성능 문제]

컬력션들(ArrayList, Queue , Stack, Hastable)은 성능의 문제가 있었다.
컬렉션은 데이터의 어떤 타입도 전부 object 타입으로 저장하기 떄문에
데이터에 접근할 때마다 본래 타입으로 형식변환이 무수하게  일어나며,
이는 곧 성능의 저하로 나타난다.

이러한 이유에서 컬렉션보다는 일반화 컬렉션을 사용한다.
일반화 컬렉션은 형식을 지정해서 사용하기 때문에 불필요한 형식 변환을 발생키지 않으며,
잘못된 형식의 객체를 담는 위험을 피할 수 있다.

일반화 컬렉션에는 List , Queue , Stack , Dictionary 등이 있는데,
(이들은 컬렉션[ArrayList , Queue, Stack , Hashtable]의 일반화 버전이다.)

일반화 컬렉션은 System.Collections.Generic 네임스페이스 안에 있기 때문에,
이들을 사용하기 위해서는 네임스페이스부터 사용 선언해주어야 한다.

using System.Collection.Generic;

이제 간단하게 일반화 컬렉션들을 살펴보자.

========================================================================================

[List<T>]

List는 ArrayList와 같은 기능을 하며, 다른점이라면 행식매개변수 T로 타입을 지정하고
사용해야 한다는 것이다. 물론 지정한 타입의 객체외의 다른 타입 객체는 담을 수 없다.
ArrayList와 메소드도 동일하므로 다른 설명없이 예제를 작성해 본다.


- 예제 -

using System;
using System.Collections.Generic;

namespace Console1
{
  
    class ListT_Ex
    {        
        public void Main() {
            List<int> list1 = new List<int>();
            list1.Add(11); list1.Add(22); list1.Add(33);
            list1.RemoveAt(1);
            list1.Remove(11);
            list1.Insert(0, 44);

            foreach (var i in list1) {
                Console.WriteLine(i);
            }

            List<string> list2 = new List<string>();
            list2.Add("가"); list2.Add("나"); list2.Add("다");
            list2.RemoveAt(1);
            list2.Remove("가");
            list2.Insert(1, "라");

            foreach (var i in list2)
            {
                Console.WriteLine(i);
            }

        }
    }
}



========================================================================================


[Queue<T>]

일반화 컬렉션 큐도 형식 지정빼고는 그냥 컬렉션 큐와 다르게 없다.

- 예제 -

using System;
using System.Collections.Generic;

namespace Console1
{
    class QueueT_Ex
    {
        public void Main() {
            Queue<int> que = new Queue<int>();

            que.Enqueue(10); //10
            que.Enqueue(20); //10 20
            que.Enqueue(30); //10 20 30
            que.Dequeue();   //20 30

            que.Enqueue(4); //20 30 4 
            que.Dequeue();   //30 4
            Queue<string> que2 = new Queue<string>();
            que2.Enqueue("ABC"); 

            while (que.Count > 0)
                Console.WriteLine(que.Dequeue());

            while (que2.Count > 0)
                Console.WriteLine(que2.Dequeue());

        }
    }
}


========================================================================================

[Stack<T>]

스택도 뭐 다를거 없다.


- 예제 -


using System;
using System.Collections.Generic;

namespace Console1
{
    class StackT_Ex
    {
        public void Main() {
            Stack<int> stack = new Stack<int>();

            stack.Push(10); //10
            stack.Push(20); //10 20
            stack.Push(30); //10 20 30
            stack.Pop();   //10 20 
            stack.Pop();   //10 


            Stack<string> stack2= new Stack<string>();
            stack2.Push("셋");
            stack2.Push("Set");

            while (stack.Count > 0)
                Console.WriteLine(stack.Pop());

            while (stack2.Count > 0)
                Console.WriteLine(stack2.Pop());

        }
    }
}




========================================================================================

[Dictionary<T>]


- 예제 -

using System;
using System.Collections.Generic;

namespace Console1
{
    class Dictionary_Ex
    {
        public void Main() {
            Dictionary<string, int> dt = new Dictionary<string, int>();
            dt["1"] = 1;
            dt["2"] = 2;
            dt["3"] = 3;

            Console.WriteLine("1 : "+dt["1"]);
            Console.WriteLine("2 : "+dt["2"]);
            Console.WriteLine("e : "+dt["3"]);

        }
    }
}
















========================================================================================
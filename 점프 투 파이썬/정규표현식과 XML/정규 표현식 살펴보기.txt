https://wikidocs.net/1642

[정규 표현식 살펴보기]

정규 표현식(Regular Expressions)은 복잡한 문자열을 처리할 때 사용하는 기법으로, 
파이썬만의 고유 문법이 아니라 문자열을 처리하는 모든 곳에서 사용된다. 
정규 표현식을 배우는 것은 파이썬을 배우는 것과는 또 다른 영역의 과제이다.

(※ 정규 표현식은 줄여서 간단히 "정규식"이라고도 말한다.)

필자는 "정규 표현식"을 이 책 《점프 투 파이썬》에 포함시켜야 할지 오랜 시간 고민했다. 
왜냐하면 정규 표현식은 꽤 오랜 기간 코드를 작성해 온 프로그래머라도 잘 모를 수 있는 
고급 주제여서 초보자를 대상으로 하는 이 책에는 어울리지 않기 때문이다.

하지만 정규 표현식을 배워 익히기만 하면 아주 달콤한 열매를 맛볼 수 있다. 
그래서 파이썬 하우투(https://docs.python.org/3.4/howto/regex.html)를 참고하여 
그곳에서 소개하는 수준의 내용만이라도 독자들이 이해하고 사용할 수 있도록 노력했다. 
여러분이 정규 표현식을 잘 다루게 되면 파이썬 외에 또 하나의 강력한 무기를 얻게 되는 것이다.

정규 표현식은 왜 필요한가?
다음과 같은 문제가 주어졌다고 가정해 보자.

주민등록번호를 포함하고 있는 텍스트가 있다. 
이 텍스트에 포함된 모든 주민등록번호의 뒷자리를 * 문자로 변경하시오.
우선, 정규식을 전혀 모르면 다음과 같은 순서로 프로그램을 작성해야 할 것이다.

전체 텍스트를 공백 문자로 나눈다(split).
나누어진 단어들이 주민등록번호 형식인지 조사한다.
단어가 주민등록번호 형식이라면 뒷자리를 *로 변환한다.
나누어진 단어들을 다시 조립한다.
이를 구현한 코드는 아마도 다음과 같을 것이다.

data = """
park 800905-1049118
kim  700905-1059119
"""

result = []
for line in data.split("\n"):
    word_result = []
    for word in line.split(" "):
        if len(word) == 14 and word[:6].isdigit() and word[7:].isdigit():
            word = word[:6] + "-" + "*******"
        word_result.append(word)
    result.append(" ".join(word_result))
print("\n".join(result))
결과값:
park 800905-*******
kim  700905-*******

반면에, 정규식을 사용하면 다음처럼 훨씬 간편하고 직관적인 코드를 작성할 수 있다. 
아직 정규식 사용 방법을 배우지 않았으니 눈으로만 살펴보자.

import re 

data = """
park 800905-1049118
kim  700905-1059119
"""

pat = re.compile("(\d{6})[-]\d{7}")
print(pat.sub("\g<1>-*******", data))
결과값:

park 800905-*******
kim  700905-*******
정규 표현식을 사용하면 이렇게 간단한 예제에서도 코드가 상당히 간결해진다. 만약 찾고자하는 문자열 또는 바꾸어야 할 문자열의 규칙이 매우 복잡하다면 정규식의 효용은 더 커지게 된다.

이제부터 정규 표현식의 기초부터 심화 부분까지 차근차근 알아보도록 하자.
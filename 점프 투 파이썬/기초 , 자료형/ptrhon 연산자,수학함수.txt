[연산자]

+	덧셈

-	뺄셈

*	곱셈

/	나눗셈

//	나눗셈의 몫

%	모듈로 (나눗셈의 나머지)

**	지수 연산자

+var	단항 덧셈

-var	단항 뺄셈

========================================================================



[수학 내장 함수]


abs(var)	절대값

pow(x, y)	** 연산자 대신에 사용 가능

pow(x,y,modulo)	삼항 지수-나머지 (x ** y) % modulo

round(var[, n])	10-n 또는 (10**-n)의 반올림한 근사치를 반환. n의 기본값은 0

divmod(x, y)	나눗셈의 몫과 나머지로 이루어진 튜플을 반환




>>> # 다음 코드는 수학 내장 함수를 사용하는 몇 가지 예제를 제공한다
>>> # 9의 절대값
>>> abs(9)
9

>>> # -9의 절대값
>>> abs(-9)
9

>>> # 8을 4로 나눈 몫과 나머지로 이루어진 튜플
>>> divmod(8,4)
(2, 0)

>>> # 똑같은 일을 하지만, 이번에는 나머지(모듈로)가 반환됨
>>> divmod(8,3)
(2, 2)

>>> # 8의 제곱을 구함
>>> pow(8,2)
64

>>> # 8의 제곱을 3으로 나눈 나머지  ((8 **2) % 3)
>>> pow(8,2,3)
1

>>> # 반올림을 수행
>>> round(5.67,1)
5.7
>>> round(5.67)
6.00


========================================================================


[비교 연산자]

>	큼

<	작음

>=	크거나 같음

<=	작거나 같음

!=	같지 않음

==	같음




>>> # 단순 비교
>>> 8 > 10
False

>>> 256 < 725
True

>>> 10 == 10
True

>>> # 식 내에서 비교

>>> x = 2*8
>>> y = 2
>>> while x != y:
...     print 'Doing some work...'
...     y = y + 2
...

Doing some work...
Doing some work...
Doing some work...
Doing some work...
Doing some work...
Doing some work...
Doing some work...

>>> # 삼항 비교
>>> 3<2<3
False

>>> 3<4<8
True


========================================================================

[비트 연산자]

&	논리곱 연산자로서 비트가 두 항에 모두 나타나는 경우 비트를 결과에 복사함

||	논리합 연산자로서 비트가 두 항 중 어느 곳에 나타나는 경우 비트를 결과에 복사함

^	배타적 논리합 연산자로서 어느 한 쪽의 항에만 비트가 존재할 경우 비트를 결과에 복사함

~	부정 연산자로서 비트를 뒤집어서 각 비트에 대하여 정확히 반대를 반환함

>>> 14 & 27
10

>>> 14 | 27
31

>>> 14 ^ 27
21

>>> ~14
-15

>>> ~27
-28





14 & 27 = 00001110 and 00011011 = 00001010 (정수 10)

14 | 27 = 00001110 or 000110011 = 00011111 (정수 31)

14 ^ 27 = 00001110 xor 000110011 = 00010101 (정수 21)

~14 = 00001110 = 11110001 (정수 -15)

========================================================================


[이동 연산자]

x<<n	왼쪽으로 이동 (숫자 x에 2를 n번 곱한 것과 동등함)

x>>n	오른쪽으로 이동 (숫자 x를 2로 n번 나눈 것과 동등함)



# 왼쪽으로 이동, 여기서는 3*2
>>> 3<<1
6
# 3*2*2와 동등함
>>> 3<<2
12
# 3*2*2*2*2*2와 동등함
>>> 3<<5
96
# 오른쪽으로 이동
# 3/2와 동등함
>>> 3>>1
1
# 9/2와 동등함
>>> 9>>1
4
# 10/2와 동등함
>>> 10>>1
5
# 10/2/2와 동등함
>>> 10>>2
2


========================================================================

[복합 대입 연산자]



a += b  a = a + b

a -= b	a = a - b

a *= b	a = a * b

a /= b	a = a / b

a %= b	a = a % b

a //= b	a = a // b

a **= b	a = a** b

a &= b	a = a & b

a |= b	a = a | b

a ^= b	a = a ^ b

a >>= b	a = a >> b

a <<= b	a = a << b


========================================================================


[부울 식]

and	x and y 평가에 있어서, x가 거짓으로 판명되면 그것을 반환하고, 그렇지 않은 경우에는 y를 평가하여 결과값을 반환

or	x or y 평가에 있어서, x가 참으로 판명되면 그것을 반환하고, 그렇지 않은 경우에는 y를 평가하여 결과값을 반환

not	not x 평가에 있어서, x가 거짓이라는 것은 x의 반대를 의미함


========================================================================

[파이썬의 연산 순서]

+var, -var, ~var	단항 연산자

**	제곱 연산자

*, /, //, %	곱셈, 나눗셈, 몫, 나머지

+, -	덧셈, 뺄셈

<<, >>	왼쪽 및 오른쪽 이동

&	논리곱

^	배타적 논리합

||	논리합

<, >, <=. >= , <>	비교 연산자

==, != , is, is not, in, not in	동등 및 포함

and, or, not	여부 판단 조건









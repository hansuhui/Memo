================================================================================================

[문자열 포맷 코드]


%s	문자열 (String)

%c	문자 1개(character)

%d	정수 (Integer)

%f	부동소수 (floating-point)

%o	8진수

%x	16진수

%%	Literal % (문자 % 자체)


================================================================================================

[문자열 인덱싱]

>>> a = "Life is too short, You need Python"
>>> a[0]
'L'
>>> a[12]
's'
>>> a[-1]  #역순
'n'


[문자열 슬라이싱]


>>> a = "Life is too short, You need Python"
>>> a[0:4]
'Life'


지정에서 끝까지 뽑는다.
a[19:]


================================================================================================

[슬라이싱으로 문자열 나누기]


>>> a = "20010331Rainy"
>>> date = a[:8]
>>> weather = a[8:]
>>> date
'20010331'
>>> weather
'Rainy'


================================================================================================

[문자열 포매팅 따라 하기]


1) 숫자 바로 대입

>>> "I eat %d apples." % 3
'I eat 3 apples.'



2) 문자열 바로 대입


>>> "I eat %s apples." % "five"
'I eat five apples.'


3) 2개 이상의 값 넣기

>>> number = 10
>>> day = "three"
>>> "I ate %d apples. so I was sick for %s days." % (number, day)
'I ate 10 apples. so I was sick for three days.'


================================================================================================


[포맷 코드와 숫자 함께 사용하기]


1) 정렬과 공백

>>> "%10s" % "hi"
'        hi'

앞의 예문에서 "%10s"의 의미는 전체 길이가 10개인 문자열 공간에서 hi를 오른쪽으로 정렬하고 
그 앞의 나머지는 공백으로 남겨 두라는 의미이다.


>>> "%-10sjane." % 'hi'
'hi        jane.'


반대쪽인 왼쪽 정렬은 "%-10s"가 될 것이다. 확인해 보자.


2) 소수점 표현하기

>>> "%10.4f" % 3.42134234
'    3.4213'


================================================================================================

[고급 문자열 포매팅]



문자열의 format 함수를 이용하면 좀 더 발전된 스타일로 문자열 포맷을 지정할 수 있다. 
앞에서 살펴본 문자열 포매팅 예제들을 format 함수를 이용해서 바꾸면 다음과 같다.

------------------------------------------------------------------------------------------------------

숫자 바로 대입하기

>>> "I eat {0} apples".format(3)
'I eat 3 apples'
"I eat {0} apples" 문자열 중 {0} 부분이 숫자 3으로 바뀌었다.

------------------------------------------------------------------------------------------------------

문자열 바로 대입하기

>>> "I eat {0} apples".format("five")
'I eat five apples'
문자열의 {0} 항목이 five라는 문자열로 바뀌었다.

------------------------------------------------------------------------------------------------------

숫자 값을 가진 변수로 대입하기

>>> number = 3
>>> "I eat {0} apples".format(number)
'I eat 3 apples'
문자열의 {0} 항목이 number 변수의 값인 3으로 바뀌었다.

------------------------------------------------------------------------------------------------------

2개 이상의 값 넣기

>>> number = 10
>>> day = "three"
>>> "I ate {0} apples. so I was sick for {1} days.".format(number, day)
'I ate 10 apples. so I was sick for three days.'
2개 이상의 값을 넣을 경우 문자열의 {0}, {1}과 같은 인덱스 항목들이 format 함수의 입력값들로 순서에 맞게 바뀐다. 
즉, 위 예에서 {0}은 format 함수의 첫 번째 입력값인 number로 바뀌고 {1}은 format 함수의 두 번째 입력값인 day로 바뀐다.


------------------------------------------------------------------------------------------------------



이름으로 넣기

>>> "I ate {number} apples. so I was sick for {day} days.".format(number=10, day=3)
'I ate 10 apples. so I was sick for 3 days.'
위 예에서 볼 수 있듯이 {0}, {1}과 같은 인덱스 항목 대신 더 편리한 {name} 형태를 이용하는 방법도 있다. {name} 형태를 이용할 경우 format 함수의 입력값에는 반드시 name=value와 같은 형태의 입력값이 있어야만 한다. 위 예는 문자열의 {number}, {day}가 format 함수의 입력값인 number=10, day=3 값으로 각각 바뀌는 것을 보여 주고 있다.

------------------------------------------------------------------------------------------------------

인덱스와 이름을 혼용해서 넣기

>>> "I ate {0} apples. so I was sick for {day} days.".format(10, day=3)
'I ate 10 apples. so I was sick for 3 days.'
위와 같이 인덱스 항목과 name=value 형태를 혼용하는 것도 가능하다.

------------------------------------------------------------------------------------------------------

왼쪽 정렬

>>> "{0:<10}".format("hi")
'hi        '
:<10 표현식을 이용하면 치환되는 문자열을 왼쪽으로 정렬하고 문자열의 총 자릿수를 10으로 맞출 수 있다.

------------------------------------------------------------------------------------------------------

오른쪽 정렬

>>> "{0:>10}".format("hi")
'        hi'
오른쪽 정렬은 :< 대신 :>을 이용하면 된다. 화살표 방향을 생각하면 어느 쪽으로 정렬이 되는지 금방 알 수 있을 것이다.

------------------------------------------------------------------------------------------------------

가운데 정렬

>>> "{0:^10}".format("hi")
'    hi    '
:^ 기호를 이용하면 가운데 정렬도 가능하다.

------------------------------------------------------------------------------------------------------

공백 채우기

>>> "{0:=^10}".format("hi")
'====hi===='
>>> "{0:!<10}".format("hi")
'hi!!!!!!!!'
정렬 시 공백 문자 대신에 지정한 문자 값으로 채워 넣는 것도 가능하다. 채워 넣을 문자 값은 정렬 문자인 <, >
, ^ 바로 앞에 넣어야 한다. 위 예에서 첫 번째 예제는 가운데(^)로 정렬하고 빈 공간을 =문자로 채웠고
, 두번째 예제는 왼쪽(<)으로 정렬하고 빈 공간을 !문자로 채웠다.

------------------------------------------------------------------------------------------------------


소수점 표현하기

>>> y = 3.42134234
>>> "{0:0.4f}".format(y)
'3.4213'
위 예는 format 함수를 이용해 소수점을 4자리까지만 표현하는 방법을 보여 준다. 이전에 살펴보았던 
표현식 0.4f가 그대로 이용된 걸 알 수 있다.

>>> "{0:10.4f}".format(y)
'    3.4213'
위와 같이 자릿수를 10으로 맞출 수도 있다. 역시 58쪽에서 살펴보았던 "10.4f"의 표현식이 그대로 이용된걸 알 수 있다.

------------------------------------------------------------------------------------------------------


{ 또는 } 문자 표현하기

>>> "{{ and }}".format()
'{ and }'
format 함수를 이용해 문자열 포매팅을 할 경우 {나 }와 같은 중괄호(brace) 문자를 포매팅 문자가 아닌 
문자 그대로 사용하고 싶은 경우에는 위 예의 {{와 }}처럼 2개를 연속해서 사용하면 된다.


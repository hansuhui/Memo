[딕셔너리 관련 함수들]


[Key 리스트 만들기(keys)]

>>> a = {'name': 'pey', 'phone': '0119993323', 'birth': '1118'}
>>> a.keys()
dict_keys(['name', 'phone', 'birth'])

a.keys()는 딕셔너리 a의 Key만을 모아서 dict_keys라는 객체를 리턴한다.


(
[파이썬 3.0 이후 버전의 keys 함수, 어떻게 달라졌나?]

파이썬 2.7 버전까지는 a.keys() 호출 시 리턴값으로 dict_keys가 아닌 리스트를 리턴한다. 
리스트를 리턴하기 위해서는 메모리의 낭비가 발생하는데 파이썬 3.0 이후 버전에서는 
이러한 메모리 낭비를 줄이기 위해 dict_keys라는 객체를 리턴해 준다. 
다음에 소개할 dict_values, dict_items 역시 파이썬 3.0 이후 버전에서 추가된 것들이다. 
만약 3.0 이후 버전에서 리턴값으로 리스트가 필요한 경우에는 "list(a.keys())"를 사용하면 된다. 
dict_keys, dict_values, dict_items 등은 리스트로 변환하지 않더라도 기본적인 반복성(iterate) 구문(예: for문)들을 실행할 수 있다.
)

dict_keys 객체는 다음과 같이 사용할 수 있다. 리스트를 사용하는 것과 차이가 없지만, 
리스트 고유의 함수인 append, insert, pop, remove, sort등의 함수를 수행할 수는 없다.

>>> for k in a.keys():
...    print(k)
...
phone
birth
name


dict_keys 객체를 리스트로 변환하려면 다음과 같이 하면 된다.

>>> list(a.keys())
['phone', 'birth', 'name']


==============================================================================================================


[Value 리스트 만들기(values)]


>>> a.values()
dict_values(['pey', '0119993323', '1118'])

==============================================================================================================

[Key, Value 쌍 얻기(items)]

>>> a.items()
dict_items([('name', 'pey'), ('phone', '0119993323'), ('birth', '1118')])

==============================================================================================================

[Key: Value 쌍 모두 지우기(clear)]

>>> a.clear()
>>> a
{}


==============================================================================================================

[Key로 Value얻기(get)]


>>> a = {'name':'pey', 'phone':'0119993323', 'birth': '1118'}
>>> a.get('name')
'pey'
>>> a.get('phone')
'0119993323'

>>> a.get('nokey')
>>> a['nokey']


딕셔너리 안에 찾으려는 key 값이 없을 경우 미리 정해 둔 디폴트 값을 대신 가져오게 하고 싶을 때에는 
get(x, '디폴트 값')을 사용하면 편리하다.

>>> a.get('foo', 'bar')
'bar'

a 딕셔너리에는 'foo'에 해당하는 값이 없다. 따라서 디폴트 값인 'bar'를 리턴한다.

==============================================================================================================

[해당 Key가 딕셔너리 안에 있는지 조사하기(in)]

>>> a = {'name':'pey', 'phone':'0119993323', 'birth': '1118'}
>>> 'name' in a
True
>>> 'email' in a
False





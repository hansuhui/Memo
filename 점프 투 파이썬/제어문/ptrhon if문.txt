https://wikidocs.net/20


[if문]



>>> money = 1
>>> if money:
...     print("택시를 타고 가라")
... else:
...     print("걸어 가라")
...
택시를 타고 가라



- 들여쓰기 -


if문을 만들 때는 if 조건문: 바로 아래 문장부터 if문에 속하는 모든 문장에 들여쓰기(indentation)를 해주어야 한다. 
다음과 같이 조건문이 참일 경우 "수행할 문장1"을 들여쓰기 했고 "수행할 문장2"와 "수행할 문장3"도 들여쓰기를 해주었다. 
다른 프로그래밍 언어를 사용했던 사람들은 파이썬에서 "수행할 문장"들을 들여쓰기 하는 것을 무시하는 경우가 많으니 더 주의해야 한다.


if 조건문:
    수행할 문장1
    수행할 문장2
    수행할 문장3

다음과 같이 작성하면 오류가 발생한다. "수행할 문장2"를 들여쓰기 하지 않았기 때문이다.

if 조건문:
    수행할 문장1
수행할 문장2
    수행할 문장3

다음 예제를 살펴보면 무슨 말인지 이해할 수 있을 것이다.

>>> money = 1
>>> if money:
...     print("택시를")
... print("타고")
File "<stdin>", line 3
print("타고")
^
SyntaxError: invalid syntax

그렇다면 들여쓰기는 공백[Spacebar]으로 하는 것이 좋을까? 아니면 탭[Tab]으로 하는 것이 좋을까? 
이에 대한 논란은 파이썬을 사용하는 사람들 사이에서 아직도 계속되고 있다. 

탭으로 하자는 쪽과 공백으로 하자는 쪽 모두가 동의하는 내용은 단 하나, 2가지를 혼용해서 쓰지는 말자는 것이다. 
공백으로 할 거면 항상 공백으로 통일하고, 탭으로 할 거면 항상 탭으로 통일해서 사용하자는 말이다.
 탭이나 공백은 프로그램 소스에서 눈으로 보이는 것이 아니기 때문에 혼용해서 쓰면 에러의 원인이 되기도 한다. 주의하도록 하자.

(※ 요즘 파이썬 커뮤니티에서는 들여쓰기를 할 때 공백(Spacebar) 4개를 사용하는 것을 권장한다.)

==============================================================================================================

[조건문이란 무엇인가?]



자료형	/참	   / 거짓

숫자	/0이 아닌 숫자	/0

문자열	/"abc"/	""

리스트	/[1,2,3]	/[]

터플	/(1,2,3)	/()

딕셔너리	/{"a":"b"}	/{}



- 비교연산자 -

x < y	x가 y보다 작다

x > y	x가 y보다 크다

x == y	x와 y가 같다

x != y	x와 y가 같지 않다

x >= y	x가 y보다 크거나 같다

x <= y	x가 y보다 작거나 같다



- and, or, not - 

x or y	x와 y 둘중에 하나만 참이면 참이다

x and y	x와 y 모두 참이어야 참이다

not x	x가 거짓이면 참이다



- x in s, x not in s -

x in 리스트	x not in 리스트

x in 튜플	x not in 튜플

x in 문자열	x not in 문자열


>>> 1 in [1, 2, 3]
True

>>> 1 not in [1, 2, 3]
False

>>> 'a' in ('a', 'b', 'c')
True

>>> 'j' not in 'python'
True


>>> pocket = ['paper', 'cellphone', 'money']
>>> if 'money' in pocket:
...     print("택시를 타고 가라")
... else:
...     print("걸어가라")
...



(
[조건문에서 아무 일도 하지 않게 설정하고 싶다면?]

가끔 조건문의 참, 거짓에 따라 실행할 행동을 정의할 때, 아무런 일도 하지 않도록 설정하고 싶을 때가 있다. 다음의 예를 보자.

"주머니에 돈이 있으면 가만히 있고 주머니에 돈이 없으면 카드를 꺼내라"
이럴 때 사용하는 것이 바로 pass이다. 위의 예를 pass를 적용해서 구현해 보자.

>>> pocket = ['paper', 'money', 'cellphone']
>>> if 'money' in pocket:
...     pass 
... else:
...     print("카드를 꺼내라")
...
pocket이라는 리스트 안에 money라는 문자열이 있기 때문에 if문 다음 문장인 pass가 수행되고 아무런 결과값도 보여 주지 않는다.
)














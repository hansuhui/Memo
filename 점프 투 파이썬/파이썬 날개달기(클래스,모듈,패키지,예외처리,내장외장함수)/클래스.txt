https://wikidocs.net/28

[클래스]


class Calculator:
    def __init__(self):
        self.result = 0

    def adder(self, num):
        self.result += num
        return self.result

cal1 = Calculator()
cal2 = Calculator()

print(cal1.adder(3))
print(cal1.adder(4))
print(cal2.adder(3))
print(cal2.adder(7))


=================================================================================


[객체]


>>> class Programmer:
>>>    pass


>>> kim = Programmer()
>>> park = Programmer()


(
[객체와 인스턴스의 차이]

클래스에 의해서 만들어진 객체를 인스턴스라고도 한다. 
그렇다면 객체와 인스턴스의 차이는 무엇일까? 이렇게 생각해 보자. kim = Programmer() 이렇게 만들어진 kim은 객체이다. 
그리고 kim이라는 객체는 Programmer의 인스턴스이다. 
즉, 인스턴스라는 말은 특정 객체(kim)가 어떤 클래스(Programmer)의 객체인지를 관계 위주로 설명할 때 사용된다. 
즉, "kim은 인스턴스" 보다는 "kim은 객체"라는 표현이 어울리며, 
"kim은 Programmer의 객체" 보다는 "kim은 Programmer의 인스턴스"라는 표현이 훨씬 잘 어울린다.
)



------------------------------------------------------------------

- self 살펴보기 -


그렇다면 이번에는 서비스 업체의 입장에서 생각해 보자. 
서비스 업체는 오직 가입한 사람들에게만 서비스를 제공하고 싶어 한다. 
이를 위해 그들은 더하기 서비스에 가입했는지 여부를 확인하기 위한 장치를 추가했다. 
이전에 보았던 더하기를 제공해 주는 함수를 다시 보면 다음과 같다.


... def sum(self, a, b):
...     result = a + b
...     print("%s + %s = %s입니다." % (a, b, result))


누군가 이 서비스 업체의 더하기 서비스를 이용하고 싶다고 요청했을 때 이 사람이 
가입을 한 사람인지 안 한 사람인지 가리기 위해 위처럼 sum이라는 함수의 첫 번째 인수값으로 self라는 것을 사용했다. 
어떤 사람이 다음처럼 더하기 서비스를 이용하려 한다고 생각해 보자.

>>> pey = Service()
>>> pey.sum(1, 1)
이렇게 하면 pey라는 아이디를 가진 사람이 이 서비스 업체의 sum이라는 서비스를 이용하겠다고 요청한다는 뜻이다. 
위와 같이 했을 때 업체가 제공하는 더하기 서비스(sum 함수)는 다음과 같이 생각한다.

"어, 누군가 더하기 서비스를 해달라고 하네? 그럼 서비스를 해주기 전에 먼저 이 사람이 가입을 한 사람인지 아닌지 판단해야겠군. 
자 그럼 첫 번째 입력값으로 뭐가 들어오는지 보자. 음...... pey라는 아이디를 가진 사람이군. 가입한 사람이 맞네. 서비스를 제공해 주자!"

앞에서 봤듯이 서비스 업체는 sum 함수의 첫 번째 입력값을 통해 가입 여부를 판단했다. 다시 sum 함수를 보자.

... def sum(self, a, b):
...     result = a + b
...     print("%s + %s = %s입니다." % (a, b, result))
위의 sum 함수는 첫 번째 입력값으로 self라는 것을 받고 두 번째, 세 번째 입력값으로 더할 숫자를 받는다. 
입력으로 받는 입력 인수의 개수가 총 3개인 것이다.

따라서 pey라는 아이디를 가진 사람은 다음처럼 sum 함수를 사용해야 할 것이다.

pey.sum(pey, 1, 1)
sum 함수는 첫 번째 입력값을 가지고 가입한 사람인지 아닌지를 판단한다. 
따라서 첫 번째 입력 인수로 pey라는 아이디를 주면 sum 함수는 pey라는 
아이디가 이미 가입되어 있는 것을 확인한 후 서비스를 제공해 줄 것이다.

그런데 이전에 sum 함수를 호출할 때는 아래 문장처럼 pey를 따로 전달하여 사용하지 않아도 문제가 없었다. 왜 그럴까?

>>> pey.sum(1, 1)
pey.sum(1, 1)이라는 호출이 발생하면 sum함수의 첫번째 인수인 self에는 호출 시 이용했던 객체(즉, pey라는 아이디)가 자동으로 전달된다. 
이러한 이유로 pey.sum(pey, 1, 1)이 아닌 pey.sum(1, 1)으로 사용해야만 하는 것이다.

(※ pey.sum(1, 1)은 Service.sum(pey, 1, 1)처럼 사용해도 동일한 결과를 얻는다.)


=================================================================================

[__init__ 이란 무엇인가?]  == 생성자!!


>>> class Service:
...     secret = "영구는 배꼽이 두 개다"
...     def __init__(self, name):
...         self.name = name
...     def sum(self, a, b):
...         result = a + b
...         print("%s님 %s + %s = %s입니다." % (self.name, a, b, result))
...



pey = Service("홍길동")




=================================================================================


[클래스의 상속]

>>> class HouseKim(HousePark):
...     lastname = "김"

class 상속받을 클래스명(상속할 클래스명)



class HousePark:
    lastname = "박"
    def __init__(self, name):
        self.fullname = self.lastname + name
    def travel(self, where):
        print("%s, %s여행을 가다." % (self.fullname, where))
    def love(self, other):
        print("%s, %s 사랑에 빠졌네" % (self.fullname, other.fullname))
    def __add__(self, other):
        print("%s, %s 결혼했네" % (self.fullname, other.fullname))
    def __sub__(self, other):
        print("%s, %s 이혼했네" % (self.fullname, other.fullname))


class HouseKim(HousePark):
    lastname = "김"
    def travel(self, where, day):
        print("%s, %s여행 %d일 가네." % (self.fullname, where, day))

pey = HousePark("응용")
juliet = HouseKim("줄리엣")
pey.love(juliet)
pey + juliet


박응용, 김줄리엣 사랑에 빠졌네
박응용, 김줄리엣 결혼했네

pey + juliet

def __add__(self, other):
    print("%s, %s 결혼했네" % (self.fullname, other.fullname))

pey - juliet

    def __sub__(self, other):
        print("%s, %s 이혼했네" % (self.fullname, other.fullname))








